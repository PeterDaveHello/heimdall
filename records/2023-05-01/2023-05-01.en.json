[
  {
    "id": 35762780,
    "timestamp": 1682864266,
    "title": "Whistleblowers are the conscience of society, yet suffer gravely",
    "url": "https://covertactionmagazine.com/2023/04/25/whistleblowers-are-the-conscience-of-society-yet-suffer-gravely-for-trying-to-hold-the-rich-and-powerful-accountable-for-their-sins/",
    "hn_url": "http://news.ycombinator.com/item?id=35762780",
    "content": "WhistleblowersWhistleblowers Are the Conscience of Society, Yet Suffer Gravely For Trying to Hold the Rich and Powerful Accountable For Their SinsBy Ashley Gj\u00f8vik - April 25, 2023 6[Source: twitter.com]Why Don\u2019t More People Support Whistleblowers? \u2026Legislatures Should Provide the Protections They DeserveLeave a ReplyAuthorAshley Gj\u00f8vikAshley Gjovik is a lawyer, activist, author, and whistleblower. She blew the whistle on Apple in 2021.Ashley specializes in human rights & the common good. She has a Bachelor of Science, Juris Doctor, and a Certificate in Public International Law with honors.Ashley can be reached at ashleymgjovik@protonmail.com.NEW!! CovertAction Bulletin Podcast",
    "summary": "- Whistleblowers are important to society because they hold the rich and powerful accountable for their actions, yet they often suffer greatly for their efforts.\n- It is essential for legislatures to provide protections for whistleblowers to encourage more people to come forward and speak out against wrongdoing.\n- The author, Ashley Gj\u00f8vik, is a lawyer, activist, author, and former whistleblower who specializes in human rights and the common good.",
    "hn_title": "Whistleblowers are the conscience of society, yet suffer gravely",
    "original_title": "Whistleblowers are the conscience of society, yet suffer gravely",
    "score": 842,
    "hn_content": "- Whistleblowers are considered the conscience of society but suffer negative consequences for their actions.\n- Power structures are less likely to tolerate whistleblowers who go against them, as opposed to those who benefit them.\n- Normal sociable people are less likely to whistleblow against powerful organizations.\n- Corporations may accept incompetence or failed projects, but not whistleblowing that upsets the power structures.\n- The whistleblowers often get chastised, and there is almost never support from within their organization for them.\n- Power structures can be harmful to people's well-being, and avoidance may help shift energy towards ethical spaces.\n- The issue is bad power structures, not power structures per se.\n- A group of people that comes together as a larger body or organism can be quite beautiful.\n- Snowden exposed wrong-doing, and the public agreed but not all punished for speaking out are believed to be \"speaking an essential truth.\"The article discusses the flaws in the launch systems of nuclear missiles during the Cold War, wherein a single individual could potentially launch a missile if given the opportunity. It also explores the topic of whistleblowing, specifically Edward Snowden's leak of classified information regarding government surveillance, and the mixed reactions to his actions. The comment section includes discussion on the ethics of whistleblowing, the role of intelligence agencies, and the prevalence of spying amongst allies.The article contains a debate between commenters on the morality and ethics of spying among nations. The comments make several claims and point to various sources:\n\n- The assertion that all countries spy on each other.\n- The scale and funding of US intelligence gathering is greater than other countries.\n- The use of intelligence for the greater good or harm is dependent on how the information is wielded.\n- Claims of EU countries spying on its allies.\n\nOverall, the article is a discussion forum and lacks any specific news or new releases.The comments section discusses the practice of Realpolitik and how it affects the US and other countries. Some comments criticize the US for championing Realpolitik despite claiming to be a champion of justice and peace. Other comments focus on Edward Snowden and his leaked documents, questioning whether he did enough to filter and review the information he released. Some commenters argue that whistleblowers should be better protected, and that more information should be made public in a democracy. The legality and morality of PRISM, a government surveillance program that targets non-US citizens, is also debated.- iCloud mail became widely used\n- Microsoft prioritized integrating wiretap data from Microsoft after running Hotmail for a long time\n- Countless examples of companies challenging government orders came from Snowden leaks\n- Twitter acted on reported TOU violations, the government did not have unilateral control over Twitter\n- Court rubber stamps 99.97% of requests\n- PRISM was a data integration project to ingest wiretap data from the FBI and was legal\n- Snowden primarily motivated by opposition to US foreign policy and control of the world\n- Snowden found himself in a situation where both the Government and the Media were in cahoots to cover up criminal behavior\n- Majority of Americans are against government data collection, but media and democracy aren't functioning properlyThe divide between politicians and the American public is a concerning issue, exemplified by Bernie Sanders' campaigns being ignored by media and treated negatively. Media and propaganda influence people, even those who are intelligent and educated. Individual research is necessary in a world where the news media is seen as rigged. Snowden's revelations exposed the NSA's spying, which led to a debate about personal privacy versus security. Whistleblowers should not be prosecuted if they reveal the state's crimes. Spying in general is not ok, but unfortunately, it is not avoidable in today's world. China's surveillance of its citizens concerns people, but different countries' spying on each other may be justifiable if it leads to respective countries' safety.There is a debate about whether or not US agencies are involved in the Five Eyes program that allows mutual spying on each other's citizens, which some are considering treasonous. However, others argue that this is legal under the Espionage Act. Many individuals have differing views on Edward Snowden's whistleblowing and his subsequent living situation. Meanwhile, there are concerns about government officials' lack of accountability and transparency. There are also debates about the legality of offshore accounts and whether or not everyone has the same privileges. Lastly, there is a call for pardoning Snowden, but this is a contentious issue among both political parties.",
    "hn_summary": "- Power structures are less likely to tolerate whistleblowers who go against them, leading to chastisement and a lack of support from within the organization.\n- The debate on whistleblowing includes ethics, the role of intelligence agencies, and the legality and morality of programs like PRISM."
  },
  {
    "id": 35758842,
    "timestamp": 1682817242,
    "title": "Microsoft quietly supported legislation to make it easier to fix devices",
    "url": "https://grist.org/technology/microsoft-right-to-repair-quietly-supported-legislation-to-make-it-easier-to-fix-devices-heres-why-thats-a-big-deal/",
    "hn_url": "http://news.ycombinator.com/item?id=35758842",
    "content": "Maddie StonePublishedApr 28, 2023TopicClimate + TechnologyShare/RepublishTwitterFacebookRepublishIn March, Irene Plenefisch, a senior director of government affairs at Microsoft, sent an email to the eight members of the Washington state Senate\u2019s Environment, Energy, and Technology Committee, which was about to hold a hearing to discuss a bill intended to facilitate the repair of consumer electronics. Typically, when consumer tech companies reach out to lawmakers concerning right-to-repair bills \u2014 which seek to make it easier for people to fix their devices, thus saving money and reducing electronic waste \u2014 it\u2019s because they want them killed. Plenefisch, however, wanted the committee to know that Microsoft, which is headquartered in Redmond, Washington, was on board with this one, which had already passed the Washington House.\u201cI am writing to state Microsoft\u2019s support for E2SHB 1392,\u201d also known as the Fair Repair Act, Plenefisch wrote in an email to the committee. \u201cThis bill fairly balances the interests of manufacturers, customers, and independent repair shops and in doing so will provide more options for consumer device repair.\u201dThe Fair Repair Act stalled out a week later due to opposition from all three Republicans on the committee and Senator Lisa Wellman, a Democrat and former Apple executive. (Apple frequently lobbies against right-to-repair bills, and during a hearing, Wellman defended the iPhone maker\u2019s position that it is already doing enough on repair.) But despite the bill\u2019s failure to launch this year, repair advocates say Microsoft\u2019s support \u2014 a notable first for a major U.S. tech company \u2014 is bringing other manufacturers to the table to negotiate the details of other right-to-repair bills for the first time. \u201cWe are in the middle of more conversations with manufacturers being way more cooperative than before,\u201d Nathan Proctor, who heads the U.S. Public Research Interest Group\u2019s right-to-repair campaign, told Grist. \u201cAnd I think Microsoft\u2019s leadership and willingness to be first created that opportunity.\u201dRepair advocates say Microsoft\u2019s support for a repair bill in Washington \u2014 a notable first for a major U.S. tech company \u2014 is bringing other manufacturers to the table for the first time. Alexander Koerner/Getty ImagesAcross a wide range of sectors, from consumer electronics to farm equipment, manufacturers attempt to monopolize repair of their devices by restricting access to spare parts, repair tools, and technical documentation. While manufacturers often claim that controlling the repair process limits cybersecurity and safety risks, they also financially benefit when consumers are forced to take their devices back to the manufacturer or upgrade due to limited repair options.Right-to-repair bills would compel manufactures to make spare parts and information available to everyone. Proponents argue that making repair more accessible will allow consumers to use older products for longer, saving them money and reducing the environmental impact of technology, including both electronic waste and the carbon emissions associated with manufacturing new products. But despite dozens of state legislatures taking up right-to-repair bills in recent years, very few of those bills have passed due to staunch opposition from device makers and the trade associations representing them. New York state passed the first electronics right-to-repair law in the country last year, but before the governor signed it, tech lobbyists convinced her to water it down through a series of revisions.Like other consumer tech giants, Microsoft has historically fought right-to-repair bills while restricting access to spare parts, tools, and repair documentation to its network of \u201cauthorized\u201d repair partners. In 2019, the company even helped kill a repair bill in Washington state. But in recent years the company has started changing its tune on the issue. In 2021, following pressure from shareholders, Microsoft agreed to take steps to facilitate the repair of its devices \u2014 a first for a U.S. company. Microsoft followed through on the agreement by expanding access to spare parts and service tools, including through a partnership with the repair guide site iFixit. The tech giant also commissioned a study that found repairing Microsoft products instead of replacing them can dramatically reduce both waste and carbon emissions.Microsoft has also started engaging more cooperatively with lawmakers over right-to-repair bills. In late 2021 and 2022, the company met with legislators in both Washington and New York to discuss each state\u2019s respective right-to-repair bill. In both cases, lawmakers and advocates involved in the bill negotiations described the meetings as productive. When the Washington state House introduced an electronics right-to-repair bill in January 2022, Microsoft\u2019s official position on it was neutral \u2014 something that state representative and bill sponsor Mia Gregerson, a Democrat, called \u201ca really big step forward\u201d at a committee hearing. Despite Microsoft\u2019s neutrality, last year\u2019s right-to-repair bill failed to pass the House amid opposition from groups like the Consumer Technology Association, a trade association representing numerous electronics manufacturers. Later that year, though, the right-to-repair movement scored some big wins. In June 2022, Colorado\u2019s governor signed the nation\u2019s first right-to-repair law, focused on wheelchairs. The very next day, New York\u2019s legislature passed the bill that would later become the nation\u2019s first electronics right-to-repair law.When Washington lawmakers revived their right-to-repair bill for the 2023 legislative cycle, Microsoft once again came to the negotiating table. From state senator and bill sponsor Joe Nguyen\u2019s perspective, Microsoft\u2019s view was, \u201cWe see this coming, we\u2019d rather be part of the conversation than outside. And we want to make sure it is done in a thoughtful way.\u201dProctor, whose organization was also involved in negotiating the Washington bill, said that Microsoft had a few specific requests, including that the bill require repair shops to possess a third-party technical certification and carry insurance. It was also important to Microsoft that the bill only cover products manufactured after the bill\u2019s implementation date, and that manufacturers be required to provide the public only the same parts and documents that their authorized repair providers already receive. Some of the company\u2019s requests, Proctor said, were \u201ctough\u201d for advocates to concede on. \u201cBut we did, because we thought what they were doing was in good faith.\u201dIn early March, just before the Fair Repair Act was put to a vote in the House, Microsoft decided to support it. \u201cMicrosoft has consistently supported expanding safe, reliable, and sustainable options for consumer device repair,\u201d Plenefisch told Grist in an emailed statement. \u201cWe have, in the past, opposed specific pieces of legislation that did not fairly balance the interests of manufacturers, customers, and independent repair shops in achieving this goal. HB 1392, as considered on the House floor, achieved this balance.\u201dAcross a wide range of sectors, from consumer electronics to farm equipment, manufacturers attempt to monopolize repair of their devices by restricting access to spare parts, repair tools, and technical documentation. TOLGA AKMEN/AFP via Getty ImagesWhile the bill cleared the House by a vote of 58 to 38, it faced an uphill battle in the Senate, where either Wellman or one of the bill\u2019s Republican opponents on the Environment, Energy, and Technology Committee would have had to change their mind for the Fair Repair Act to move forward. Microsoft representatives held meetings with \u201cseveral legislators,\u201d Plenefisch said, \u201cto urge support for HB 1392.\u201d \u201cThat\u2019s probably the first time any major company has been like, \u2018This is not bad,\u2019\u201d Nguyen said. \u201cIt certainly helped shift the tone.\u201dMicrosoft\u2019s engagement appears to have shifted the tone beyond Washington state as well. As other manufacturers became aware that the company was sitting down with lawmakers and repair advocates, \u201cthey realized they couldn\u2019t just ignore us,\u201d Proctor said. His organization has since held meetings about proposed right-to-repair legislation in Minnesota with the Consumer Technology Association and TechNet, two large trade associations that frequently lobby against right-to-repair bills and rarely sit down with advocates. \u201cA lot of conversations have been quite productive\u201d around the Minnesota bill, Proctor said. TechNet declined to comment on negotiations regarding the Minnesota right-to-repair bill, or whether Microsoft\u2019s support for a bill in Washington has impacted its engagement strategy. The Consumer Technology Association shared letters it sent to legislators outlining its reasons for opposing the bills in Washington and Minnesota, but it also declined to comment on specific meetings or on Microsoft.While Minnesota\u2019s right-to-repair bill is still making its way through committees in the House and Senate, in Washington state, the Fair Repair Act\u2019s opponents were ultimately unmoved by Microsoft\u2019s support. Senator Drew MacEwen, one of the Republicans on the Energy, Environment, and Technology Committee who opposed the bill, said that Microsoft called his office to tell him the company supported the Fair Repair Act.\u201cI asked why after years of opposition, and they said it was based on customer feedback,\u201d MacEwen told Grist. But that wasn\u2019t enough to convince MacEwen, who sees device repairability as a \u201cbusiness choice,\u201d to vote yes.\u201cUltimately, I do believe there is a compromise path that can be reached but will take a lot more work,\u201d MacEwen said.Washington state representative and bill sponsor Mia Gregerson wonders if Microsoft could have had a greater impact by testifying publicly in support of the bill. While Gregerson credits the company with helping right-to-repair get further than ever in her state this year, Microsoft\u2019s support was entirely behind the scenes. \u201cThey did a lot of meetings,\u201d Gregerson said. \u201cBut if you\u2019re going to be first in the nation on this, you\u2019ve got to do more.\u201dMicrosoft declined to say why it didn\u2019t testify in support of the Fair Repair Act, or whether that was a mistake. The company also didn\u2019t say whether it would support future iterations of the Washington state bill, or other state right-to-repair bills.But it signaled to Grist that it might. And in doing so, Microsoft appears to have taken its next small step out of the shadows.\u201cWe encourage all lawmakers considering right to repair legislation to look at HB 1392 as a model going forward due to its balanced approach,\u201d Plenefisch said. All donations matched for a limited timeGrist is the only award-winning newsroom focused on exploring equitable solutions to climate change. It\u2019s vital reporting made entirely possible by loyal readers like you.Right now, one of the best ways to help Grist continue to thrive is by becoming a monthly member. It\u2019s the type of giving that allows us to plan for future projects and provides us with the consistent funding we need to continue bringing you the climate news that you rely on. Monthly or one-time, donate now when all donations will be matched by a generous group of donors. Donate NowNext ArticleHow bad was Tucker Carlson for the planet?John McCracken Culture",
    "summary": "- Microsoft quietly supported the Fair Repair Act in Washington state, breaking from typical tech company opposition to right-to-repair bills that seek to make device repair more accessible.\n- Repair advocates say Microsoft's support for the bill is bringing other major tech manufacturers to the negotiating table for the first time.\n- The Fair Repair Act stalled in the Washington state Senate due to opposition from lawmakers, but Microsoft's engagement on repairing devices marks a change in the industry's stance on right-to-repair.",
    "hn_title": "Microsoft quietly supported legislation to make it easier to fix devices",
    "original_title": "Microsoft quietly supported legislation to make it easier to fix devices",
    "score": 521,
    "hn_content": "Microsoft has been quietly supporting the right-to-repair movement by helping to pass laws that make it easier to fix electronic devices. However, a recent right-to-repair law passed in New York was sabotaged by the governor, who added loopholes that made the bill worse than useless, despite passing with a supermajority. Lobbyists are believed to have weakened the original bill with edits that were verbatim in the final version. Many people believe that corruption is becoming systemic in the political system and that single-term limits might be a solution. While lobbying is necessary to provide input from industry experts, systemic corruption concentrated in the legislative branch of government is a real problem. Overall, politics is a \"filthy business,\" and lobbying or advocacy is essentially bribery, which is, or should be, illegal.A discussion on the role of lobbying in politics, with some commenters arguing for a ban on lobbying and others highlighting the importance of skilled communication to influence politicians for well-meaning causes like right to repair legislation. The conversation touches on the potential unintended consequences of banning lobbying, as well as the difficulties that lawmakers face in legislating on topics they're not expert in. There is also criticism of a New York governor who allegedly added loopholes to right to repair legislation despite strong support from the legislature.Microsoft quietly supported legislation that would make it more difficult for Apple and Google to do business. The company has been making efforts to improve repairability of their devices, such as the Surface Pro 9, but users still face difficulties repairing devices due to glued screens and other issues. Microsoft's efforts towards repairability have received some criticism due to their increasing Windows system requirements, which are causing e-waste. Users express frustration with Microsoft's invasive features and lack of a local user account option for Windows. Some commenters speculate that Microsoft's actions towards repairability may be a move to saddle smaller competitors with onerous requirements while scoring PR points.Microsoft has pledged to make it easier to repair its hardware, with the Surface Laptop 4 being the first of several devices to feature replaceable SSDs. This is part of a broader trend of tech companies \u2013 including Apple and Google \u2013 making similar commitments in response to the right-to-repair movement. Critics have suggested Microsoft is attempting to hurt Apple by reducing margins on closed ecosystems, but others consider it a wise business move with the potential to improve AI use. Some have expressed skepticism over Microsoft's motives and accused the company of using PR stunts to create the illusion of caring about consumers. Others have criticized the company's recent decision to impose random CPU requirements on its Windows 11 update, forcing many people to purchase new CPUs.An HN thread explores the idea of a simple tax on e-waste as a way to address its externalities, without creating regulatory complexity, and encouraging market solutions. However, the implementation of such a tax is complex and potentially impractical. There is a debate over whether regulations or taxes are the better solution. The discussion also delves into the Windows 11 hardware requirements, specifically the requirement for CPUs that support modern hardware security mitigations and features, leaving older hardware obsolete. There are also differing opinions on the seriousness of the security vulnerabilities that Windows 11 addresses, and whether there will or should be a version that requires them, causing older machines to be left behind.Many people are being forced to throw away perfectly good hardware because Microsoft is mandating TPM2 and SecureBoot for Windows 11. However, there is no need to throw away old hardware as it can still be used as a sub-computer or given a new role. Some people believe that Microsoft is forcing people to destroy their old machines for obsolete reasons, but others argue that enabling hardware security features is a good thing for consumers. The debate focuses on the balance between security and practicality, and whether it is reasonable to consume more electronic trash due to software updates. The current situation is causing users to search for Windows 10 installers through unofficial channels as Microsoft redirects all relevant links to Windows 11 pages.Microsoft's new operating system, Windows 11, requires TPM as a fixed requirement to run, making many existing devices obsolete, leading to concerns that the OS is more about selling new devices than security. However, there are workarounds to install Windows 11 on unsupported devices. The CPU requirements for Windows 11 are to enable virtualization-based security and hardware-backed remote attestation, ushering in a new era of digital controls that are almost impossible to crack. Several users are choosing to switch to Linux or Mac rather than buy a new computer. Meanwhile, Surface devices contradict Microsoft's CPU requirements, leading to further speculation on whether the new OS's primary objective is security or to sell more hardware.Several users have reported disliking Windows 11 because of its heavy presence of advertisements and a less user-friendly UI than Windows 10. While there are some backend improvements, the frontend still leaves much to be desired. Some have found the experience cheapened by the amount of pre-installed crapware, although it is possible to remove ads and telemetry with third-party tools. Windows 11 requires higher CPU requirements, which some see as an attempt to push users to buy new computers. Despite its shortcomings, some users have found it acceptable and even improved in certain aspects, such as support for variable refresh rates and Intel Thread Director. A clean install may be preferable to an upgrade to avoid compatibility issues.",
    "hn_summary": "- Microsoft has pledged to make it easier to repair its hardware, with the Surface Laptop 4 featuring replaceable SSDs, which is part of a broader trend of tech companies, including Apple and Google, making similar commitments in response to the right-to-repair movement.\n- Windows 11 has faced criticism for its heavy presence of advertisements and less user-friendly UI than Windows 10, its hardware requirements, and the amount of pre-installed crapware, but there are some backend improvements such as support for variable refresh rates and Intel Thread Director."
  },
  {
    "id": 35759016,
    "timestamp": 1682819432,
    "title": "Rate The Landlord: Anonymously share information with tenants like you",
    "url": "https://ratethelandlord.org",
    "hn_url": "http://news.ycombinator.com/item?id=35759016",
    "content": "ratethelandlord.orgChecking if the site connection is secureratethelandlord.org needs to review the security of your connection before proceeding.Ray ID: 7c0732964db4144aPerformance & security by Cloudflare",
    "summary": "- This website is best experienced by visiting the website directly.\n- Please visit the website to read the article.",
    "hn_title": "Rate The Landlord: Anonymously share information with tenants like you",
    "original_title": "Rate The Landlord: Anonymously share information with tenants like you",
    "score": 495,
    "hn_content": "A Reddit user has created a tool called \"Rate The Landlord\" to help tenants share anonymous feedback on landlords with their peers. The tool encourages tenants to report both bad\u00a0and good experiences with their landlords, in a bid to make the sector more transparent. Landlords have traditionally held significant power over tenants, making it difficult for the latter to understand their legal rights in regard to disputes or malfeasance. However, the popularity of the Rate The Landlord tool suggests that integrated feedback systems could help provide tenants with greater power and help the public and\u00a0housing regulators hold rogue landlords to account.The comments on this article discuss the ethics of landlords and the exploitative nature of the relationship between landlords and tenants. Some argue that being a landlord is a risky business with potential losses, while others argue that the laws favor landlords and that the business is inherently exploitative. Alternatives to landlord-tenant relationships, such as cooperative and non-profit housing, are also proposed. The discussion touches upon the history of land ownership and colonization as well. Some argue that while owning a property may not always be more favorable than renting, there are scenarios where people prefer to rent than buy.The article discusses the trade-offs of owning a home versus renting, including limited employment options, major repair costs, and expensive moving. Some commenters suggest creating better systems for temporary housing and providing affordable accommodation on good terms. Other comments share personal experiences with exploitative landlords withholding security deposits and suggest small claims court or standardized processes to protect tenants. The importance of understanding one's legal rights and for landlords to adhere to regulations is emphasized.The comment section on an article about a tenant's struggle to retrieve their security deposit from a landlord has turned into a debate over the ethics of being a landlord. \n\n- The tenant was owed their security deposit but faced difficulties retrieving it. \n- Some commenters argue that landlords take on real financial risks and that being a landlord is a job to them but not all landlords are aware of relevant laws. \n- Others argue that landlords should know the laws and that, in any case, landlords have a lot of power and tenants have little. \n- The question of whether housing is a human right is raised. \n- The risks and benefits of being a landlord and the harm caused by bad or unethical landlords are debated.No meaningful content for a tech news article.A discussion about the usefulness of review sites like ratemyprofessors.com, yelp.com, and Glassdoor. While some users believe that these sites can be helpful, others are concerned about the potential for skewed or fraudulent reviews, anonymity concerns, and the possibility of legal action against reviewers. Despite these issues, many believe that these sites can still provide valuable insights if taken with a grain of salt and used in conjunction with other resources. Suggestions for improving review sites include implementing measures to protect anonymity and encouraging a more balanced representation of reviews. Some users propose a shift towards a \"Zillow-like\" database of properties that only indirectly discusses landlords.  Overall, the discussion raises questions about the efficacy of review sites and their potential impact on transparency and accountability in various industries.",
    "hn_summary": "- Commenters discuss the exploitative nature of landlord-tenant relationships and propose alternatives like cooperative housing.\n- The importance of understanding legal rights and adhering to regulations is emphasized."
  },
  {
    "id": 35759449,
    "timestamp": 1682825218,
    "title": "Just Simply \u2013 Stop saying how simple things are in our docs",
    "url": "https://justsimply.dev/",
    "hn_url": "http://news.ycombinator.com/item?id=35759449",
    "content": "If someone\u2019s having to read your docs, it\u2019s not \u201csimple\u201dJustSimply.devby General ProductsAs a developer, I often find myself knee-deep in a new technology \u2013 perhaps investigating a library, or learning a language. I\u2019m trying to frame new concepts in my head, applying my own data and architecture on the fly to the generic explanations in the docs. It\u2019s hard! Which is why it\u2019s jolting to read something like:[This library] makes it painless to [do difficult thing].[Complicated thing] made simple and easy.All you have to do is just [difficult thing].If someone\u2019s been driven to Google something you\u2019ve written, they\u2019re stuck. Being stuck is, to one degree or another, upsetting and annoying. So try not to make them feel worse by telling them how straightforward they should be finding it. It gets in the way of them learning what you want them to learn.You\u2019re keen to share your excitement!When I\u2019m writing technical docs, annoyingly, I find myself putting \u201cjust\u201d in all the time, despite having strongly-held views about words such as this. I think it\u2019s because I\u2019m so keen to share my enlightenment. It\u2019s exciting that the code I\u2019ve written might be able to help, and naturally I\u2019m keen to communicate that. A bit of light editing lets you keep the enthusiasm for the code, lose the bits that could be interpreted as condescending, and improve the clarity, to boot.",
    "summary": "- Using the word \"simple\" in technical documentation can be condescending and off-putting to readers who are struggling.\n- When someone is reading technical documentation, it usually means they are trying to learn a new concept, so making them feel worse by implying it should be easy is unhelpful.\n- It's important to share excitement and enthusiasm for the code in documentation, but it's possible to do so without using language that could be interpreted as condescending.",
    "hn_title": "Just Simply \u2013 Stop saying how simple things are in our docs",
    "original_title": "Just Simply \u2013 Stop saying how simple things are in our docs",
    "score": 431,
    "hn_content": "A Hacker News discussion centers around the use of \"just\" and \"simply\" in technical writing, with some arguing that it can come across as condescending and others arguing that it is necessary to convey steps that may seem trivial to experienced users. Many commenters agree that good technical writing requires precision and clarity, and that writing is a separate skill from coding. Some advise seeking feedback from beta readers or onboarding new employees to improve documentation, while others caution against using adverbs like \"simply\" and suggest finding clearer alternatives like \"straightforward.\" Overall, the discussion emphasizes the importance of clear technical writing that considers the reader's perspective and avoids unnecessary filler words.An article on improving technical documentation has sparked debate and disagreement. The article advises against using words like \"simple\" or \"just\" in documentation because they can be condescending or misleading. Some readers feel that this advice is unnecessary, while others appreciate the reminder to write clear and concise documentation that doesn't rely on filler words or marketing-speak. Some commenters worry that removing all traces of personality from documentation makes it less engaging and memorable, while others argue that clear and straightforward instructions are the most effective way to communicate with users. Overall, the discussion centers on finding a balance between conciseness, clarity, and a friendly tone.Tech professionals discuss the use of adverbs in technical writing stylebooks, with some users arguing that language policing is unnecessary and that adverbs are not related to nervous breakdowns. Others contend that proper documentation requires clear explanations of all concepts, and it is better to avoid making assumptions about what is simple. The debate continues with a discussion of the sensitivity of modern software developers and whether good documentation is a skill that can be honed. The consensus is that good documentation should have concise and clear technical content that conveys necessary information quickly, with no unnecessary filler or distraction. Ultimately, the purpose of documentation is to help readers achieve their goals using the tools available to them.The use of hyperbolic terms such as \"simple\" and \"easy\" in tech documentation is a matter of accessibility and inhibits clarity.\n\nSome argue that it's a sign of an ego-stroking culture that values fluff and perfection over honesty and clarity.\n\nThe responsibility to communicate clearly lies both on the speaker and the listener, but it's important to empathize with the audience and adjust communication accordingly.\n\nThe word \"easily\" can be misleading and potentially intimidating to students in academic settings.\n\nCareful consideration of word choice in technical language can result in clearer and more effective communication.Technical writers and developers are urged to avoid using words such as \"simply\" and \"obviously\" when writing software instructions and documentation, as they can come across as condescending and discouraging. Instead, use comparatives and clarify ambiguities in technical sentences to help readers better understand how to use software systems. Documentations that only indicate a list of features are often perceived as a mere sales pitch rather than conveying operational details like stability, update cycles, failure rates, and repair costs. Companies should automate the process of eliminating the use of condescending language in their writing tools to avoid discouraging users from learning.- Comments discuss advice for technical writing\n- Advice is to avoid \"-ly\" words as they can be cruft or a crutch\n- Not all adverbs are bad, and some are necessary for technical writing\n- Nuance needed when applying this rule\n- Examples given where non-\u201c-ly\u201d adverbs are used in technical writing",
    "hn_summary": "- Clear and concise documentation is important, but a friendly tone can also be effective\n- The use of hyperbolic terms like \"simple\" and \"easy\" can inhibit clarity and be misleading"
  },
  {
    "id": 35764476,
    "timestamp": 1682874204,
    "title": "Engineers develop water filtration that removes \"forever chemicals\"",
    "url": "https://news.ubc.ca/2023/03/22/new-ubc-water-treatment-zaps-forever-chemicals-for-good/",
    "hn_url": "http://news.ycombinator.com/item?id=35764476",
    "content": "The University of British ColumbiaThe University of British ColumbiaUBC SearchUBC NewsHomeNews TipsArts & HumanitiesBusiness, Law & SocietyScience, Health & TechnologyUniversity NewsContactsServicesFatemeh Asadi Zeidabadi, a PhD student in the UBC department of chemical and biological engineering and a student in Dr. Madjid Mohseni's group. Photo credit: Mohseni labClick to share on Twitter (Opens in new window)Click to share on Facebook (Opens in new window)Click to share on LinkedIn (Opens in new window)Click to email a link to a friend (Opens in new window)New UBC water treatment zaps \u2018forever chemicals\u2019 for goodSCIENCE, HEALTH & TECHNOLOGYMar 22, 2023  |  For more information, contact Lou Corpuz-BosshartEngineers at the University of British Columbia have developed a new water treatment that removes \u201cforever chemicals\u201d from drinking water safely, efficiently \u2013 and for good.\u201cThink Brita filter, but a thousand times better,\u201d says UBC chemical and biological engineering professor Dr. Madjid Mohseni, who developed the technology.Dr. Madjid MohseniForever chemicals, formally known as PFAS (per-and polyfluoroalkyl substances) are a large group of substances that make certain products non-stick or stain-resistant. There are more than 4,700 PFAS in use, mostly in raingear, non-stick cookware, stain repellents and firefighting foam. Research links these chemicals to a wide range of health problems including hormonal disruption, cardiovascular disease, developmental delays and cancer.To remove PFAS from drinking water, Dr. Mohseni and his team devised a unique adsorbing material that is capable of trapping and holding all the PFAS present in the water supply.The PFAS are then destroyed using special electrochemical and photochemical techniques, also developed at the Mohseni lab and described in part in a paper published recently in Chemosphere.While there are treatments currently on the market, like activated carbon and ion-exchange systems which are widely used in homes and industry, they do not effectively capture all the different PFAS, or they require longer treatment time, Dr. Mohseni explained.\u201cOur adsorbing media captures up to 99 per cent of PFAS particles and can also be regenerated and potentially reused. This means that when we scrub off the PFAS from these materials, we do not end up with more highly toxic solid waste that will be another major environmental challenge.\u201dProfessor Madjid Mohseni and postdoctoral fellow Dr. Ehsan Banayan Esfahani looking at a pilot water treatment system that will be deployed in British Columbia in April. Photo: Lou Bosshart/UBCHe explained that while PFAS are no longer manufactured in Canada, they are still incorporated in many consumer products and can then leach into the environment. For example, when we apply stain-resistant or repellent sprays/materials, wash PFAS-treated raingear, or use certain foams to put down fires, the chemicals end up in our waterways. Or when we use PFAS-containing cosmetics and sunscreens, the chemicals could find their way into the body.For most people, exposure is through food and consumer products, but they can also be exposed from drinking water \u2013 particularly if they live in areas with contaminated water sources.Dr. Mohseni, whose research group also focuses on developing water solutions for rural, remote and Indigenous communities, noted: \u201cOur adsorbing media are particularly beneficial for people living in smaller communities who lack resources to implement the most advanced and expensive solutions that could capture PFAS. These can also be used in the form of decentralized and in-home water treatments.\u201dThe UBC team is preparing to pilot the new technology at a number of locations in B.C. starting this month.\u201cThe results we obtain from these real-world field studies will allow us to further optimize the technology and have it ready as products that municipalities, industry and individuals can use to eliminate PFAS in their water,\u201d said Dr. Mohseni.Interview language(s): English, FarsiMultimedia assets: Images (Dropbox 1, Dropbox 2), b-rollFind other stories about: Department of Chemical and Biological Engineering, Dr. Madjid Mohseni, Faculty of Applied Science, forever chemicals, Health Innovation and Community Wellbeing, PFAS, water treatmentContactLou Corpuz-BosshartUBC Media RelationsTel: 604-822-2048Cel: 604-999-0473Email: lou.bosshart@ubc.caNews TipsLooking for story ideas?Check out our latest News Tips!Find UBC ExpertsAn information source that gives journalists access to UBC\u2019s expertise.ExploreARTS & HUMANITIESBUSINESS, LAW & SOCIETYSCIENCE, HEALTH & TECHNOLOGYUNIVERSITY NEWSQ&ASMEDIA ADVISORIESLATEST NEWSUBC offers several electronic news services available in a variety of formatsTweets by @ubcnewsMy TweetsSubscribe & receive news by e-mailView UBC's Okanagan News Room   The University of British ColumbiaAbout UBCContact UBCAbout the UniversityNewsEventsCareersMake a GiftSearch UBC.caUBC CampusesVancouver CampusOkanagan CampusUBC SitesRobson SquareCentre for Digital MediaFaculty of Medicine Across BCEmergency Procedures | Terms of Use | Copyright | Accessibility",
    "summary": "- Engineers at the University of British Columbia have developed an effective water treatment that removes PFAS, also known as \"forever chemicals\", from drinking water, using a unique adsorbing material that can capture and destroy all PFAS particles present in the water supply. \n- The technology created by Dr. Madjid Mohseni and his team captures up to 99% of PFAS particles and can be regenerated and potentially reused, eliminating the environmental challenge of toxic waste. \n- The new water filtration technology is particularly beneficial for people in smaller communities who lack resources to implement expensive solutions that could eliminate PFAS, and would be especially useful in decentralized and in-home water treatments.",
    "hn_title": "Engineers develop water filtration that removes \u201cforever chemicals\u201d",
    "original_title": "Engineers develop water filtration that removes \u201cforever chemicals\u201d",
    "score": 364,
    "hn_content": "Engineers at the University of British Columbia have developed a water filtration system that can remove \u201cforever chemicals\u201d such as PFOA and PFOS. These toxic substances, once used in a wide range of consumer and industrial products, are highly resistant to breakdown, can accumulate in the environment, and have been linked to health problems in humans and animals. The researchers have used a new class of porous materials, known as metal-organic frameworks, to create a highly effective, scalable and reusable filtration system for removing these chemicals from contaminated water supplies. Customers who cannot access filtration systems may reduce these chemicals through regular blood and plasma donation. Engineering students are reminded to test for health effects prior to marketing chemicals and new materials.A new water treatment system developed by engineers at the University of British Columbia can get rid of harmful forever chemicals called PFAS (per- and polyfluoroalkyl substances). PFAS are found in many everyday materials like non-stick pans, food boxes, and pizza boxes, amongst others. The FDA currently approves more than 90 PFAS in food container materials, which can cause adverse health effects even at low levels of exposure. The new system uses plasma technology to treat large flows of water in real-time and can be useful for treating drinking water, wastewater, and agricultural run-off. It is essential to solve the problem because people exposed to PFAS show an increased risk of high cholesterol, thyroid disease, kidney, and testicular cancers.Experts in the comments section of a news article on PFAS (a group of forever chemicals) have expressed doubts about the effectiveness of metal straws and are concerned about how issues related to PFAS are being addressed in the media. Few options exist for removing the harmful compounds from water, with reverse osmosis and activated carbon filters being the most effective so far. However, carbon filters need large amounts of carbon to be effective, while reverse osmosis can be wasteful. There are also mixed reports on the effectiveness of thermal hydrolysis. Most agree that something needs to be done about PFAS contamination, though the article questions the exact focus of mitigation.A discussion on water filters and their effectiveness in removing PFAS contamination leads to a debate on filtration stages, removal effectiveness, and specific testing standards. The original article on PFAS (per and polyfluoroalkyl substances) notes the harmful impacts of these chemicals on human health and the environment, and researchers' subsequent efforts to discover more sustainable solutions. Some comments express concerns over the environmental and human costs of present-day technological innovations, while others contend that humanity has always demonstrated the potential to innovate its way out of any problem.A commenter brings up the topic of hops in beer containing more phytoestrogens than soy or flax seed, with studies indicating that gut bacteria can continue producing these compounds days after consumption. Meanwhile, the Y Combinator startup accelerator is currently accepting applications for its Summer 2023 program.",
    "hn_summary": "- Forever chemicals are highly resistant to breakdown, can accumulate in the environment, and have been linked to health problems in humans and animals\n- The new system uses plasma technology to treat large flows of water in real-time and can be useful for treating drinking water, wastewater, and agricultural run-off."
  },
  {
    "id": 35766570,
    "timestamp": 1682888334,
    "title": "Minetest: An open source voxel game engine",
    "url": "https://www.minetest.net/",
    "hn_url": "http://news.ycombinator.com/item?id=35766570",
    "content": "MinetestAn open source voxel game engine. Play one of our many games, mod a game to your liking, make your own game, or play on a multiplayer server.Available for Windows, macOS, GNU/Linux, FreeBSD, OpenBSD, DragonFly BSD, and Android.Tell me moreDownloadNews: 5.7.0 released. (April 8th 2023 )",
    "summary": "- Minetest is an open-source voxel game engine that allows users to play pre-made games, mod existing ones, create their own games, or join multiplayer servers.\n- The game engine is available on various platforms, including Windows, macOS, GNU/Linux, FreeBSD, OpenBSD, DragonFly BSD, and Android.\n- The latest version of Minetest, 5.7.0, was released on April 8th, 2023.",
    "hn_title": "Minetest: An open source voxel game engine",
    "original_title": "Minetest: An open source voxel game engine",
    "score": 339,
    "hn_content": "Minetest, an open-source voxel game engine, has caught the attention of users discussing the evolution of voxel graphics and alternatives to Minecraft. Minetest offers a range of possibilities, with its mod catalog, ContentDB, and options for different aesthetics, including breaking away from the cubic theme. However, some users have noted limitations and issues such as lower-quality graphics, difficult configuration, and unfinished aspects of the game. Additionally, the conversation touched on Microsoft's role in Minecraft and user complaints about splitting the community and enforcing chat moderation. Some users criticized Microsoft's handling of Minecraft and expressed frustration with account transfers and support.Mojang has faced issues with content release schedules, and the recent Caves & Cliffs update was split in two during the pandemic, with further features from it slipping to the Wild update. The implementation of the chat reporting system has raised concerns, with players fearing Microsoft may attempt to control multiplayer. Microsoft's decision to require users to have a Microsoft account to play Minecraft has frustrated many users, with some resorting to piracy as a result. Open-source alternatives like Minetest offer a healthier alternative to Minecraft, where actual open-source clients and servers can be used. While Minecraft's source code is not open source, it already uses Java, which is open source. There were groundless copyright accusations made against Minetest, which Microsoft was using to get Minetest taken down.Minetest is an open-source sandbox game and engine similar to Minecraft. It allows for modding with Lua scripting and supports P2P multiplayer. Minetest is not as polished as Minecraft, but its open-source nature allows for more customization options, and it does not have the same heavy-handed limitations as Minecraft. The game server stores world data, NPC states, and player inventories, and players must create an account to access different servers. Minecraft servers store data unique to that server, and griefing, or player trolling, is common. Minetest has various texture packs to improve the visuals, and MineClone2 is a popular mod that mimics Minecraft's gameplay.- Minetest is a game engine that can be played with custom games.\n- The default \"Minetest Game\" is bare bones and may not be appealing to new users.\n- Minetest has potential but may not be preferred over Minecraft by some players.\n- Some users express dissatisfaction with Microsoft's management of Minecraft.",
    "hn_summary": "- Discussion around Microsoft's management of Minecraft and user complaints about splitting the community and enforcing chat moderation has arisen.\n- Minetest is similar to Minecraft but allows for more customization options due to its open-source nature; however, it may not be preferred over Minecraft by some players."
  },
  {
    "id": 35765707,
    "timestamp": 1682882201,
    "title": "Pure Sh Bible",
    "url": "https://github.com/dylanaraps/pure-sh-bible",
    "hn_url": "http://news.ycombinator.com/item?id=35765707",
    "content": "- The \"Pure sh Bible\" is a collection of POSIX sh alternatives to external processes.\n- The book aims to document commonly-known and lesser-known methods of doing various tasks.\n- Using the snippets from this book can remove unneeded dependencies from scripts and make them faster.\n- The book covers topics on strings, files, file paths, loops, variables, escape sequences, conditional expressions, and arithmetic operators.\n- Examples of alternatives to external processes are provided, such as trimming leading and trailing white-space from strings and counting the number of lines in a file.\n- The book also provides alternatives to common Unix commands such as head, tail, dirname, and basename.\n- The book promotes the use of raw escape sequences over tput for text formatting and colors.",
    "summary": "- \"Pure sh Bible\" is a collection of POSIX sh alternatives to external processes, aiming to remove unneeded dependencies from scripts and make them faster.\n- The book covers topics on strings, files, file paths, loops, variables, conditional expressions, arithmetic operators, and provides examples of alternatives to common Unix commands.\n- The book promotes the use of raw escape sequences over tput for text formatting and colors.",
    "hn_title": "Pure Sh Bible",
    "original_title": "Pure Sh Bible",
    "score": 322,
    "hn_content": "A post on Hacker News highlights a \"Pure Sh Bible\" on Github showcasing various ways to write shell scripts with only POSIX shell features. The post includes comments with various perspectives on the limitations of shell scripting and the potential for errors. Some users recommend using Python or Perl for more complex scripts, while others defend shell scripting as a viable option. Several users also mention the importance of avoiding potentially dangerous practices such as using eval or relying on shell-specific escape sequences. The post serves as a useful resource for those looking to improve their shell scripting skills while being aware of its limitations.A Reddit post about using POSIX shellNo meaningful content in the given text.",
    "hn_summary": "- Some users recommend using Python or Perl for more complex scripts while others defend shell scripting as a viable option\n- Importance of avoiding potentially dangerous practices such as using eval or relying on shell-specific escape sequences is mentioned."
  },
  {
    "id": 35764584,
    "timestamp": 1682875029,
    "title": "40 Years of Koyaanisqatsi",
    "url": "https://www.thecurb.com.au/40-years-of-koyaanisqatsi/",
    "hn_url": "http://news.ycombinator.com/item?id=35764584",
    "content": "",
    "summary": "- 'Koyaanisqatsi,' the experimental film from the 1980s, is celebrating its 40th anniversary this year.\n- Directed by Godfrey Reggio, the film comprises only visuals and music, without any dialogue or plot, and explores the relationship between nature, technology, and humanity.\n- The film's title comes from the Hopi language, meaning \"life out of balance,\" and the movie has become a cult classic and a staple of avant-garde cinema.",
    "hn_title": "40 Years of Koyaanisqatsi",
    "original_title": "40 Years of Koyaanisqatsi",
    "score": 304,
    "hn_content": "An article on the website 'The Curb' has put the spotlight on the film, Koyaanisqatsi, and the impact that the Philip Glass-composed soundtrack has had on cultural consciousness. The article's author describes the first time listening to the album and watching this film that seemed \"so other, so alien, and so alluring.\" The article highlights the shared experience of numerous readers in their formative years, identifying the strong emotional connection that the movie made with many viewers. The article has triggered a conversation around the profound visual and audio revelations that Koyaanisqatsi provides, with suggestions for other artists, references to other movies, and even deep dives into Hopi mythology.This text contains a variety of comments on the movie \"Koyaanisqatsi\". Some of the comments discuss the film's impact on viewers and the value of its lack of traditional characters and storytelling. Others mention aspects of the filmmaking process, such as the music, involvement of a famous director's name, and difficult collaboration between the director and composer. There are also mentions of related cultural and artistic works, including other films and cover versions of the soundtrack. One comment notes that a song from the soundtrack was used in \"Stranger Things\", and another person questions the quality of digital versions of the movie.- \"Koyaanisqatsi\" is a visually stunning movie with a thought-provoking message about humanity's relationship with technology and the environment.\n- The film has inspired and resonated with many people, both at the time of its release in the 1980s and since then.\n- Some people have found the film to be a powerful experience on psychedelic drugs, while others appreciate it for its artistic and musical qualities.\n- The film has been compared to music videos and has influenced them, as well as other films in the same category.",
    "hn_summary": "- The film has inspired and resonated with many people, both at the time of its release in the 1980s and since then.\n- The film has been compared to music videos and has influenced them, as well as other films in the same category."
  },
  {
    "id": 35761706,
    "timestamp": 1682855296,
    "title": "FAA overruled engineers, let Boeing Max keep flying",
    "url": "https://apnews.com/article/boeing-max-crashes-faa-ea8fac0ad2758b08c58d2d64756fbf37",
    "hn_url": "http://news.ycombinator.com/item?id=35761706",
    "content": "Enable accessibilityAP NEWSEmail:GoU.S. NewsWorld NewsPoliticsSportsEntertainmentBusinessTechnologyHealthScienceOdditiesLifestylePhotographyVideosListenSectionsNBA playoffsCharles III's CoronationNFL draftLatest on Russia-Ukraine warMet GalaMore newsClick to copyRELATED TOPICSPoliticsTravelTrending NewsFederal Aviation AdministrationAccidentsBusinessReport: FAA overruled engineers, let Boeing Max keep flyingApril 29, 2023WASHINGTON (AP) \u2014 Some engineers for the Federal Aviation Administration wanted to ground the Boeing 737 Max soon after a second deadly crash, but top officials in the agency overruled them, according to a government watchdog.The inspector general of the Transportation Department said in a new report that FAA officials wanted to sort out raw data about the two crashes, and held off grounding the plane despite growing international pressure.The inspector general\u2019s office said that it reviewed emails and interviewed FAA officials. The investigation \u201crevealed that individual engineers at the Seattle (office) recommended grounding the airplane while the accident was being investigated based on what they perceived as similarities between the accidents.\u201dOne engineer made a preliminary estimate that the chance of another Max crash was more than 13 times greater than FAA risk guidelines allow. An FAA official said the analysis \u201csuggested that there was a 25% chance of an accident in 60 days\u201d if no changes were made to the planes.\u201cHowever, this document was not completed and did not go through managerial review due to lack of detailed flight data,\u201d the report said.FAA officials at headquarters in Washington, D.C., and the agency\u2019s Seattle office opted not to ground the plane. \u201cInstead, they waited for more detailed data to arrive,\u201d the watchdog said in the report, which was made public Friday.POLITICSBiden's diverse coalition of support risks fraying in 2024Biden hosts Philippines leader Marcos as China tensions growFraught U.S-Israel ties on display as Knesset reconvenesUS readies second attempt at speedy border asylum screeningsThe first Max crash occurred in October 2018 in Indonesia and was followed by the second in March 2019 in Ethiopia. In all, 346 people died.The FAA was the last major aviation regulator to ground the Max \u2014 three days after the second crash.The FAA did not let the planes fly again until late 2020, after Boeing altered a flight-control system that autonomously pointed the plane\u2019s nose down before both crashes.The inspector general\u2019s office said the FAA\u2019s caution on grounding the Max fit with its tendency of waiting for detailed data \u2013 an explanation that agency officials offered at the time.Still, the watchdog recommended that FAA document how key and urgent safety decisions are made and make several other changes in how it analyzes crashes.The FAA said in a response attached to the inspector general\u2019s report that it is committed to measures that will improve safety and has started to update procedures based on the Max tragedies.In a statement to The Associated Press, the FAA said it concurs with the inspector general\u2019s recommendations and had already identified the issues outlined in the report.Safety advocates and lawmakers have harshly criticized the FAA for its decision to certify the Max \u2014 FAA officials did not fully understand the flight-control system implicated in both crashes. Congress passed legislation to reform the process of reviewing new aircraft.AP NEWSTop StoriesVideoContact UsAccessibility StatementCookie SettingsDOWNLOAD AP NEWSConnect with the definitive source for global and local newsMORE FROM APap.orgAP InsightsAP Definitive Source BlogAP Images SpotlightAP ExploreAP BooksAP StylebookFOLLOW APTHE ASSOCIATED PRESSAboutContactCustomer SupportCareersTerms & ConditionsPrivacyAll contents \u00a9 copyright 2023 The Associated Press. All rights reserved.",
    "summary": "- FAA overruled recommendations from individual engineers to ground the Boeing 737 Max plane after the second deadly crash in 2019.\n- The FAA officials preferred to wait for more detailed data and information before deciding to ground the planes.\n- An investigation by the inspector general's office of the Transportation Department recommends that FAA documents how key and urgent safety decisions are made to prevent similar accidents in the future.",
    "hn_title": "FAA overruled engineers, let Boeing Max keep flying",
    "original_title": "FAA overruled engineers, let Boeing Max keep flying",
    "score": 290,
    "hn_content": "The FAA overruled Boeing engineers allowing the 737 Max to keep flying despite early warning signs. A management shift after a merger in 2014 incentivized failures at Boeing, and Al Jazeera\u00a0released an investigation into the company that exposed internal issues. There is a political move either to repeal or change the Pendleton Act, which could lead to more incidents like this. Readers discussed the FAA's past history of not implementing safety recommendations, but the counterargument is that the FAA's safety record is relatively free of incidents. As a comparison, changes made after the 2009 Colgan Air crash required both pilots to have ATP certificates, which added other significant changes. The FAA approved Boeing's request to remove a description of MCAS from the manual despite the fact that there had been around 20 reportings of un-commanded nose-down inputs by pilots. The blame for the crashes cannot solely be put on the pilots.- Trains and busses are much safer than passenger cars and even commercial jets\n- The FAA decision to ground the Boeing 737 MAX was made after other countries had already done so\n- The certification process for new aircraft is overly burdensome and costly, leading to companies finding ways to bypass regulations\n- The lack of innovation in the aviation industry is due to the difficulty and cost of introducing new designs or technologies\n- Current regulations make it almost impossible for new companies to enter the market and make air travel more affordable\n- The FAA should prioritize safety while also making it possible for new designs and technologies to be introduced in a profitable way.The comments section of this post discusses the qualifications and conflicts of interest of the heads of the Federal Aviation Administration (FAA), as well as the cost of flight training and the complexity of control mechanisms in small airplanes. It also touches on the financial pressure on companies to push out new planes quickly and the importance of sound regulation. Overall, it highlights the need for accountability and independent oversight in the aviation industry.Experts debate the qualifications required for regulatory positions, such as the head of the FAA, with some arguing that insiders from the industry are necessary and others stating that an outsider perspective is needed to avoid conflicts of interest. The conversation also touches on the issue of compensating government officials, with some proposing a 99% tax on earnings beyond an average high income as a way to deter those seeking to enrich themselves through public service. However, others argue that this would further disincentivize talented individuals from choosing a career in government. The conversation features multiple viewpoints and critiques of the current system, but there is no new or exciting news or developments mentioned in the post.",
    "hn_summary": "- There is a debate about the qualifications and conflicts of interest of regulatory officials in the aviation industry\n- The conversation highlights the need for accountability and independent oversight in the aviation industry"
  },
  {
    "id": 35758898,
    "timestamp": 1682817993,
    "title": "My favorite C compiler flags during development",
    "url": "https://nullprogram.com/blog/2023/04/29/",
    "hn_url": "http://news.ycombinator.com/item?id=35758898",
    "content": "My favorite C compiler flags during developmentApril 29, 2023This article was discussed on Hacker News and on reddit.The major compilers have an enormous number of knobs. Most are highly specialized, but others are generally useful even if uncommon. For warnings, the venerable -\ufeffWall -\ufeffWextra is a good start, but circumstances improve by tweaking this warning set. This article covers high-hitting development-time options in GCC, Clang, and MSVC that ought to get more consideration.There\u2019s an irony that the more you use these options, the less useful they become. Given a reasonable workflow, they are a harsh mistress in a fast, tight feedback loop quickly breaking the habits that cause warnings and errors. It\u2019s a kind of self-improvement, where eventually most findings will be false positives. With heuristics internalized, you will be able spot the same issues just reading code \u2014 a handy skill during code review.Static warningsTraditionally, C and C++ compilers are by default conservative with warnings. Unless configured otherwise, they only warn about the most egregious issues where it\u2019s highly confident. That\u2019s too conservative. For gcc and clang, the first order of business is turning on more warnings with -\ufeffWall. Despite the name, this doesn\u2019t actually enable all warnings. (clang has -\ufeffWeverything which does literally this, but trust me, you don\u2019t want it.) However, that still falls short, and you\u2019re better served enabling extra warnings on with -\ufeffWextra.$ cc -Wall -Wextra ...That should be the baseline on any new project, and closer to what these compilers should do by default. Not using these means leaving value on the table. If you come across such a project, there\u2019s a good chance you can find bugs statically just by using this baseline. Some warnings only occur at higher optimization levels, so leave these on for your release builds, too.For MSVC, including clang-cl, a similar baseline is /W4. Though it goes a bit far, warning about use of unary minus on unsigned types (C4146), and sign conversions (C4245). If you\u2019re using a CRT, also disable the bogus and irresponsible \u201csecurity\u201d warnings. Putting it together, the warning baseline becomes:$ cl /W4 /wd4146 /wd4245 /D_CRT_SECURE_NO_WARNINGS ...As for gcc and clang, I dislike unused parameter warnings, so I often turn it off, at least while I\u2019m working: -\ufeffWno-unused-parameter. Rarely is it a defect to not use a parameter. It\u2019s common for a function to fit a fixed prototype but not need all its parameters (e.g. WinMain). Were it up to me, this would not be part of -\ufeffWextra.I also dislike unused functions warnings: -\ufeffWno-unused-function. I can\u2019t say this is wrong for the baseline since, in most cases, ultimately I do want to know if there are unused functions, e.g. to be deleted. But while I\u2019m working it\u2019s usually noise.If I\u2019m working with OpenMP, I may also disable warnings about unknown pragmas: -\ufeffWno-unknown-pragmas. One cool feature of OpenMP is that the typical case gracefully degrades to single-threaded behavior when not enabled. That is, compiling without -\ufefffopenmp. I\u2019ll test both ways to ensure I get deterministic results, or just to ease debugging, and I don\u2019t want warnings when it\u2019s disabled. It\u2019s fine for the baseline to have this warning, but sometimes it\u2019s a poor match.When working with single-precision floats, perhaps on games or graphics, it\u2019s easy to accidentally introduce promotion to double precision, which can hurt performance. It could be neglecting an f suffix on a constant or using sin instead of sinf. Use -\ufeffWdouble-promotion to catch such mistakes. Honestly, this is important enough that it should go into the baseline.#define PI 3.141592653589793float degs = ...;float rads = degs * PI / 180; // warns about promotionIt can be awkward around variadic functions, particularly printf, which cannot receive float arguments, and so implicitly converts. You\u2019ll need a explicit cast to disable the warning. I imagine this is the main reason the warning is not part of -\ufeffWextra.float x = ...;printf(\"%.17g\\n\", (double)x);Finally, an advanced option: -\ufeffWconversion -Wno-sign-conversion. It warns about implicit conversions that may result in data loss. Sign conversions do not have data loss, the implicit conversions are useful, and in my experience they\u2019re not a source of defects, so I disable that part using the second flag (like MSVC /wd4245). The important warning here is truncation of size values, warning about unsound uses of sizes and subscripts. For example:// NOTE: would be declared/defined via windows.htypedef uint32_t DWORD;BOOL WriteFile(HANDLE, const void *, DWORD, DWORD *, OVERLAPPED *);void logmsg(char *msg, size_t len){  HANDLE err = GetStdHandle(STD_ERROR_HANDLE);  DWORD out;  WriteFile(err, msg, len, &out, 0); // len truncation warning}On 64-bit targets, it will warn about truncating the 64-bit len for the 32-bit parameter. To dismiss the warning, you must either address it by using a loop to call WriteFile multiple times, or acknowledge the truncation with an explicit cast and accept the consequences. In this case I may know from context it\u2019s impossible for the program to even construct such a large message, so I\u2019d use an assertion and truncate.void logmsg(char *msg, size_t len){  HANDLE err = GetStdHandle(STD_ERROR_HANDLE);  DWORD out;  assert(len <= 0xffffffff);  WriteFile(err, msg, (DWORD)len, &out, 0);}You might consider changing the interface instead:void logmsg(char *msg, uint32_t len);That probably passes the buck and doesn\u2019t solve the underlying problem. The caller may be holding a size_t length, so the truncation happens there instead. Or maybe you keep propagating this change backwards until it, say, dissipates on a known constant. -\ufeffWconversion leads to these ripple effects that improves the overall program, which is why I like it.The catch is that the above warning only happens for 64-bit targets. So you might miss it. The inverse is true in other cases. This is one area where cross-architecture testing can pay off.Unfortunately since this warning is off the beaten path, it seems like it doesn\u2019t quite get the attention it could use. It warns about simple cases where truncation has been explicitly handled/avoided. For example:int x = ...;char digit = '0' + x%10; // false warningThe '0' is a known constant. The operation x%10 has a known range (-9 to 9). Therefore the addition result has a known range, and all results can be represented in a char. Yet it still warns. This often comes up dealing with character data like this.In my logmsg fix I had used an assertion to check that no truncation actually occurred. But wouldn\u2019t it be nice if the compiler could generate that for us somehow? That brings us to dynamic checks.Dynamic run-time checksSanitizers have been around for nearly a decade but are still criminally underused. They insert run-time assertions into programs at the flip of a switch typically at a modest performance cost \u2014 less than the cost of a debug build. All three major compilers support at least one sanitizer on all targets. In most cases, failing to use them is practically the same as not even trying to find defects. Every beginner tutorial ought to be using sanitizers from page 1 where they teach how to compile a program with gcc. (That this is universally not the case, and that these same tutorials also do not begin with teaching a debugger, is a major, on-going education failure.)There are multiple different sanitizers with lots of overlap, but Address Sanitizer (ASan) and Undefined Behavior Sanitizer (UBSan) are the most general. They are compatible with each other and form a solid, general baseline. To use address sanitizer, at both compile and link time do:$ cc ... -fsanitize=address ...It\u2019s even spelled the same way in MSVC. It\u2019s needed at link time because it includes a runtime component. When working properly it\u2019s aware of all allocations and checks all memory accesses that might be out of bounds, producing a run-time error if that occurs. It\u2019s not always appropriate, but most projects that can use it probably should.UBSan is enabled similarly:$ cc ... -fsanitize=undefined ...It adds checks around operations that might be undefined, emitting a run-time error if it occurs. It has an optional runtime component to produce a helpful diagnostic. You can instead insert a trap instruction, which is how I prefer to use it: -\ufefffsanitize-trap=undefined. (Until recently it was -\ufefffsanitize-undefined-trap-on-error.) This works on platforms where the UBSan runtime is unsupported. Some instrumentation is only inserted at higher optimization levels.For me, the most useful UBSan check is signed overflow \u2014 e.g. computing the wrong result \u2014 and it\u2019s instrumentation I miss when not working in C. In programs where this might be an issue, combine it with a fuzzer to search for inputs that cause overflows. This is yet another argument in favor of signed sizes, as UBSan can detect such overflows. (Yes, UBSan optionally instruments unsigned overflow, too, but then you must somehow distinguish intentional from unintentional overflow.)On Linux, ASan and UBSan strangely do not have debugger-oriented defaults. Fortunately that\u2019s easy to address with a couple of environment variables, which cause them to break on error instead of uselessly exiting:export ASAN_OPTIONS=abort_on_error=1:halt_on_error=1export UBSAN_OPTIONS=abort_on_error=1:halt_on_error=1Also, when compiling you can combine sanitizers like so:$ cc ... -fsanitize=address,undefined ...As of this writing, MSVC does not have UBSan, but it does have a similar feature, run-time error checks. Three sub-flags (c, s, u) enable different checks, and /RTCcsu turns them all on. The c flag generates the assertion I had manually written with -\ufeffWconversion, and traps any truncation at run time. There\u2019s nothing quite like this in UBSan! It\u2019s so extreme that it\u2019s compatible with neither standard runtime libraries (fortunately not a big deal) nor with ASan.Caveat: Explicit casts aren\u2019t enough, you must actually truncate variables using a mask in order to pass the check. For example, to accept truncation in the logmsg function:  WriteFile(err, msg, len&0xffffffff, &out, 0);Thread Sanitizer (TSan) is occasionally useful for finding \u2014 or, more often, proving the presence of \u2014 data races. It has a runtime component and so must be used at compile time and link time.$ cc ... -fsanitize=thread ...Unfortunately it only works in a narrow context. The target must use pthreads, not C11 threads, OpenMP, nor direct cloning. It must only synchronize through code that was compiled with TSan. That means no synchronization through system calls, especially no futexes. Most non-trivial programs do not meet the criteria.Debug informationAnother common mistake in tutorials is using plain old -\ufeffg instead of -\ufeffg3 (read: \u201cdebug level 3\u201d). That\u2019s like using -\ufeffO instead of -\ufeffO3. It adds a lot more debug information to the output, particularly enums and macros. The extra information is useful and you\u2019re better off having it!$ cc ... -g3 ...All the major build systems \u2014 CMake, Autotools, Meson, etc. \u2014 get this wrong in their standard debug configurations. Producing a fully-featured debug build from these systems is a constant battle for me. Often it\u2019s easier to ignore the build system entirely and cc -g3 **/*.c (plus sanitizers, etc.).(Short term note: GCC 11, released in March 2021, switched to DWARF5 by default. However, GDB could not access the extra -\ufeffg3 debug information in DWARF5 until GDB 13, released February 2023. If you have a toolchain from that two year window \u2014 except mine because I patched it \u2014 then you may also need -\ufeffgdwarf-4 to switch back to DWARF4.)What about -\ufeffOg? In theory it enables optimizations that do not interfere with debugging, and potentially some additional warnings. In practice I still get far too many \u201coptimized out\u201d messages from GDB when I use it, so I don\u2019t bother. Fortunately C is such a simple language that debug builds are nearly as fast as release builds anyway.On MSVC I like having debug information embedded in binaries, as GCC does, which is done using /Z7.$ cl ... /Z7 ...Though I certainly understand the value of separate debug information, /Zi, in some cases. Sometimes I wish the GNU toolchain made this easier.SummaryMy personal rigorous baseline for development using gcc and clang looks like this (all platforms):$ cc -g3 -Wall -Wextra -Wconversion -Wdouble-promotion   -Wno-unused-parameter -Wno-unused-function -Wno-sign-conversion   -fsanitize=undefined -fsanitize-trap ...While ASan is great for quickly reviewing and evaluating other people\u2019s projects, I don\u2019t find it useful for my own programs. I avoid that class of defects through smarter paradigms (region-based allocation, no null terminated strings, etc.). I also prefer the behavior of trap instruction UBSan versus a diagnostic, as it behaves better under debuggers.For cl and clang-cl, my personal baseline looks like this:$ cl /Z7 /W4 /wd4146 /wd4245 /RTCcsu ...I don\u2019t normally need /D_CRT_SECURE_NO_WARNINGS since I don\u2019t use a CRT anyway.c cppHave a comment on this article? Start a discussion in my public inbox by sending an email to ~skeeto/public-inbox@lists.sr.ht [mailing list etiquette] , or see existing discussions.\u00abPractical libc-free threading on Linux",
    "summary": "- This article covers important C compiler flags for developers in GCC, Clang, and MSVC, focusing on warnings, static and dynamic run-time checks, and debug information.\n- Enabling flags such as -Wall -Wextra and -Wdouble-promotion can help detect bugs statically.\n- Using sanitizers like Address Sanitizer and Undefined Behavior Sanitizer can help detect dynamic run-time errors and data races, while properly configuring debug information with -g3 is crucial for effective debugging.",
    "hn_title": "My favorite C compiler flags during development",
    "original_title": "My favorite C compiler flags during development",
    "score": 284,
    "hn_content": "A Hacker News post is discussed, which covers various C compiler flags used for development purposes. Warnings are used to prevent issues with stack-allocated variable-length arrays, shadowed variables, and to turn warnings into errors. Other flags aim to improve performance, re-export symbols, and unbreak the C compiler. While VLA has seen many CVEs and is a sensitive topic, it provides some benefits, such as an improvement in code quality and precise bounds checking when used with Sanitizers. A few obscure flags, such as\u00a0the use of Clang's static analyzer or `-fanalyzer` with GCC, have been mentioned. While it may be old-school technology, frame pointers are still useful for stack unwinding, with several compiler options used for this purpose.A group of developers discusses using sanitizers for finding memory bugs in C and C++ programs, including Clang's static analyzer and tools like CodeChecker, Valgrind, and GNU's manywarnings module. The discussion covers various implementation details, such as integrating sanitizers with custom allocation functions and providing implementations for sanitizer callbacks. Developers recommend using these tools early and often from the beginning of the development process, as many university programs fail to mention these resources to their students. Some specific flags and settings are highlighted, such as -fanalyzer-transitivity and -g3, although opinions vary on the usefulness of certain warnings and options.",
    "hn_summary": "- Some flags aim to improve performance, re-export symbols, and unbreak the C compiler\n- Developers recommend using sanitizers early and often in the development process to find memory bugs in C and C++ programs, with specific flags and settings highlighted"
  }
]
