[
  {
    "id": 37286860,
    "title": "A new method to reprogram human cells to better mimic embryonic stem cells",
    "originLink": "https://www.uwa.edu.au/news/Article/2023/August/Scientists-find-way-to-wipe-a-cells-memory-to-reprogram-it-as-a-stem-cell",
    "originBody": "Study Research News About UWA Community Contact UWA University of Western Australia Impact > 2023 > August > Scientists find way to wipe a cell's memory to reprogram it as a stem cell Search Search All UWA Seek Wisdom Menu Scientists find way to wipe a cell's memory to reprogram it as a stem cell 17/08/20232 MINS In a groundbreaking study published today in Nature, Australian scientists have resolved a long-standing problem in regenerative medicine. Led by Professor Ryan Lister from the Harry Perkins Institute of Medical Research and The University of Western Australia and Professor Jose M Polo from Monash University and the University of Adelaide, the team developed a new method to reprogram human cells to better mimic embryonic stem cells, with significant implications for biomedical and therapeutic uses. “We predict that TNT reprogramming will establish a new benchmark for cell therapies and biomedical research, and substantially advance their progress.” Professor Ryan Lister, UWA Centre for Medical Research In a revolutionary advance in the mid-2000s, it was discovered that the non-reproductive adult cells of the body, called ‘somatic’ cells, could be artificially reprogrammed into a state that resembles embryonic stem (ES) cells which have the capacity to then generate any cell of the body. The ability to artificially reprogram human somatic cells, such as skin cells, into these so-called induced pluripotent stem (iPS) cells provided a way to make an essentially unlimited supply of ES-like cells, with widespread applications in disease modelling, drug screening and cell-based therapies. “However, a persistent problem with the conventional reprograming process is that iPS cells can retain an epigenetic memory of their original somatic state, as well as other epigenetic abnormalities,” Professor Lister said. “This can create functional differences between the iPS cells and the ES cells they’re supposed to imitate, and specialised cells subsequently derived from them, which limits their use,”. Professor Jose Polo, who is also with the Monash Biomedicine Discovery Institute, explained that they have now developed a new method, called transient-naive-treatment (TNT) reprogramming, that mimics the reset of a cell’s epigenome that happens in very early embryonic development. “This significantly reduces the differences between iPS cells and ES cells and maximises the effectiveness of how human iPS cells can be applied,” he said. Dr Sam Buckberry, a computational scientist from UWA, the Harry Perkins Institute, and Telethon Kids Institute, and co-first author of the study, said by studying how the somatic cell epigenome changed throughout the reprogramming process, they pinpointed when epigenetic aberrations emerged, and introduced a new epigenome reset step to avoid them and erase the memory. Dr Xiaodong Liu, a stem cell scientist who also spearheaded the research said the new human TNT-iPS cells much more closely resembled human ES cells – both molecularly and functionally – than those produced using conventional reprograming. Dr Daniel Poppe, a cell biologist from UWA, the Harry Perkins Institute and co-first author, said the iPS cells generated using the TNT method differentiated into many other cells, such as neuron progenitors, better than the iPS cells generated with the standard method. Monash University student and co-first author Jia Tan, said the team’s TNT method was dynamite. “It solves problems associated with conventionally generated iPS cells that if not addressed could have severely detrimental consequences for cell therapies in the long run,” he said. Professor Polo said the precise molecular mechanisms underlying the iPS epigenome aberrations and their correction were not fully known, and further research was needed to understand them. “We predict that TNT reprogramming will establish a new benchmark for cell therapies and biomedical research, and substantially advance their progress,” Professor Lister said. The collaborative research project also included researchers from the Australian National University, Westlake University, Queen Mary University of London, Mater Research Institute, University of Queensland, Queensland Brain Institute, South Australian Health & Medical Research Institute, Duke-NUS Medical School and CSIRO. Read the full paper ‘Transient naive reprogramming corrects hiPS cells functionally and epigenetically’ in Nature. Image above title courtesy of Ella Marushchenko Media references Doug MacLaurin (UWA Media & PR Advisor) 6488 2802 Health and medicine Research Science and environment Share this Share on Email Share on Facebook Share on Twitter Share on LinkedIn Related news 28/08/2023OUR COMMUNITY Expert panel to discuss what The Voice will really mean for Australians 25/08/2023 The Rise of Revo Fitness: the UWA alumnus innovating Australia's Fitness Industry 24/08/2023RESEARCH Scientists reveal the highs and lows of life for silvertip sharks 24/08/2023RESEARCH This cave on Borneo has been used for 20,000 years - and we've now dated rock art showing colonial resistance 400 years ago 24/08/2023RESEARCH Coral reefs: How climate change threatens the hidden diversity of marine ecosystems Browse by Topic Expert Series - COVID-19 Awards and achievements International affairs Business and law Learning and teaching Policy and opinion Science and environment Arts and culture Engineering and technology Health and medicine Our community Our people Podcasts Research Space Uniview Impact > Article > 2023 > August > Scientists find way to wipe a cell's memory to reprogram it as a stem cell THE UNIVERSITY OF WESTERN AUSTRALIA 35 Stirling Highway Perth WA 6009 Australia +61 8 6488 6000 Emergency +61 8 6488 2222 CRICOS: 00126GPRV12169 Australian University. Campus tour Campus map Ask UWA Privacy Disclaimer and Copyright Accessibility The University of Western Australia acknowledges that its campus is situated on Noongar land, and that Noongar people remain the spiritual and cultural custodians of their land, and continue to practise their values, languages, beliefs and knowledge. Indigenous Commitment X Cookies help us improve your website experience. By using our website, you agree to our use of cookies. Confirm",
    "commentLink": "https://news.ycombinator.com/item?id=37286860",
    "commentBody": "A new method to reprogram human cells to better mimic embryonic stem cellsHacker NewspastloginA new method to reprogram human cells to better mimic embryonic stem cells (uwa.edu.au) 354 points by rbanffy 12 hours ago| hidepastfavorite82 comments vikramkr 11 hours agoVery cool research! The title is poorly worded, so the quick summary is that we&#x27;ve known how to create stem cells (induced pluripotent stem cells, or iPSCs) from non-stem human cells for a while, but they aren&#x27;t as \"good\" at being stem cells as embryonic stem cells (ESCs). So this paper is not presenting a new way of making stem cells, but is very cool nonetheless.Sidequest - epigenetics. You have your DNA that codes for the proteins and rnas that do lot sof important life things. But all your cells have the same DNA so how is a skin cell and a neuron both able to exist with the same DNA? There&#x27;s a layer of regulation on top of the genes that determines what genes are expressed, how much, and what forms (you can get different proteins from the same DNA sequence, look up exons and introns if curious). If these forces of gene regulation are inherited across generations of cells (e.g. when a white blood cells divides, it makes another white blood cell with all those relevant regulatory factors set without having to start again from a stem cells), we call that \"epigenetics\"This paper looked at the epigenetic factors that result in iPSCs not behaving like ESCs and identified differences&#x2F;aberrations in how certain epigenetic patterns (some keywords to Google include DNA methylation and histones in epigenetics) develop through the process of becoming stem cells&#x2F;reprogramming. The technique they developed resets the aberrations in the iPSCs to make them function better.(Warning - opinion&#x2F;speculation&#x2F;I reserve the right to be wrong): This is very cool in terms of making better iPSCs for research purposes. I&#x27;m not sure what impact it would have in using iPSCs in medicine. iPSCs are essentially barely controlled cancer cells which is not great for putting inside people, and this paper doesn&#x27;t provide a new way of creating stem cells. Maybe better reprogramming makes them easier to control and safer&#x2F;more functiononal? But using them therapeutically is a different conversation and not every paper needs to solve all the things in the universe, even if that would make for a more clickable title. reply pfisherman 9 hours agoparentiPSCs are useful when you want to run experiments in hard to obtain cell types. For example, brain cells. It’s hard to justify drilling into a person’s head to take a sample. Much easier to use some iPSCs derived from skin or fat cells.Obviously iPSCs are cell models and not the actual cells you want, but they are usually better than immortalized cell lines or cadavers. reply whoisshop 9 hours agorootparentI believe the original comment wasn&#x27;t written to say that he doesn&#x27;t know how iPSCs can be useful (obviously they are very useful), but he doesn&#x27;t know how this breakthrough&#x2F;paper makes much of a difference.He&#x27;s getting at the fact that we&#x27;ve known how to induce pleuropotency for quite some time (I did some reach in this in orthopaedics in 2010), which is what the article title is misleading us to believe. reply pfisherman 8 hours agorootparentI was adding in a little bit of context to explain why people should care about iPSCs - even if they are not used as therapies. Mainly because the last paragraph in GP comment focused on the dearth of direct clinical applications.My point is that iPSCs are still quite useful in pharmaceutical research and development - a therapy adjacent area.Improved cell models are still a pretty big deal. Part of the reason for high costs and failure rates in pharma R&D is that experimental models we use to generate data are imperfect. Better models = better data = better decisions. reply vikramkr 6 hours agorootparentI was responding to the article which focused really heavily on therapeutic applications, hence my focus in the last paragraph there reply JimtheCoder 7 hours agorootparentprev\"Mainly because the last paragraph in GP comment focused on the dearth of direct clinical applications.\"I am not sure why everyone is convinced that they will not be very useful in therapies...https:&#x2F;&#x2F;www.ncbi.nlm.nih.gov&#x2F;pmc&#x2F;articles&#x2F;PMC6357081&#x2F; reply pfisherman 6 hours agorootparentWell, when one compares to other cell therapies such as CAR-Ts…https:&#x2F;&#x2F;www.nature.com&#x2F;articles&#x2F;s41571-023-00754-1 replydarkclouds 32 minutes agoparentprev> create stem cells (induced pluripotent stem cells, or iPSCs) from non-stem human cells for a while,Have some liposuction, chemically and mechanically alter some of the fat cells into iPSC&#x27;s in the test tube, that&#x27;s more like a factory process, that conjures up images of 90&#x27;s garage based Ecstasy labs, before reinjecting back into the body.Its not something the body can do itself, and its one of the things used in cancer treatments to boost the number of immune cells to compliment the chemical cocktail that you&#x27;ll never find in Wetherspoons.It should be noted that melatonin increases the release of stem cells from bone marrow, so getting plenty of sleep seems to be important, throughout life. reply tchaffee 11 hours agoprevIt seems like we are so close to some huge breakthroughs in longevity. With stem cells we can do things like this.\"The extent of change caused by a heart attack is too great for the heart to repair itself or to prevent further damage from occurring. Notably, however, cardiopoietic stem cell therapy reversed, either fully or partially, two-thirds of these disease-induced changes, such that 85% of all cellular functional categories affected by disease responded favorably to treatment,\" says Andre Terzic, M.D., Ph.D., director of Mayo Clinic&#x27;s Center for Regenerative Medicine.https:&#x2F;&#x2F;newsnetwork.mayoclinic.org&#x2F;discussion&#x2F;mayo-clinic-re... reply haldujai 10 hours agoparentWe have been “close” to some breakthrough with stem cells for at least 15 years now except every time it either doesn’t work or ends up causing cancer (e.g. tumorigenicity and immunogenicity).I’ll believe it when I see it. reply tchaffee 9 hours agorootparentWe are already there. The FDA has approved hematopoietic stem cell transplantation. And there are over 3000 clinical trials under way. We know already that we can effectively treat some blindness.The reason I mentioned heart disease is because of how widespread it is and how dramatically it might increase average lifespan. For heart disease specifically it is indeed hard to tell how far away we might be from stem cell treatment being a success.But stem cell treatment as a whole has already delivered.https:&#x2F;&#x2F;www.ncbi.nlm.nih.gov&#x2F;pmc&#x2F;articles&#x2F;PMC7367472&#x2F; reply tired-turtle 9 hours agorootparentPerhaps this is a naive question, but wouldn’t a preventative measure for heart disease (stopping obesity via, say, ozempic) do more for longevity than repairing the heart after dysfunction has taken root?Not to mention the quality of life improvements from never being sick in the first place. reply rolph 8 hours agorootparentorgan systems are interdependent, and failure or pathology can cause nonlocal effects.cardiac hepatocirrhosis is one example.https:&#x2F;&#x2F;emedicine.medscape.com&#x2F;article&#x2F;151792-overviewhttps:&#x2F;&#x2F;www.sciencedirect.com&#x2F;science&#x2F;article&#x2F;pii&#x2F;S221317791...in such a case isolated treatment of pathos may help but would not be a complete treatment, and would result in chasing subsequent sequelae, over a protracted therepeutic effort. reply steve_adams_86 4 hours agorootparentprevStopping obesity with ozempic might extend lifespan but it won’t fully correct loss of health span due to poor nutrition and lack of exercise. I don’t know if any drugs can correct for a poor lifestyle. They can correct for some major issues caused by poor lifestyle, but cardiovascular disease is only one slice of that miserable pie. reply supercheetah 6 hours agorootparentprevNot all heart disease happens due to lifestyle choices. There aren&#x27;t a lot of preventative treatment options for people who have a family history of heart disease. reply nradov 8 hours agorootparentprevProbably. Obesity also increases the risk of many types of cancers. This appears to be due to the chronic inflammation and immune system effects. In 20 years it will be interesting to see what cancer rates are in patients that have been taking GLP-1 drugs. reply Teever 6 hours agorootparentprevI think non-obese people still want effect treatments for heart disease. reply jf22 9 hours agorootparentprevWe are always \"close\" to a breakthrough. This is exactly what happens with every advancement in science and technology. reply photochemsyn 7 hours agorootparentprevI imagine that in the future what will happen is that when a child is born, their stem cells (possibly from the umbilical cord) will be cryogenetically preserved and will form a reservoir from which medical interventions can be prepared as much as 50 years later.Of course, this assumes we will put a new premium on human life not just limited to the children of the privileged few, which in turn presumes some kind of limitation on human reproduction (steady state population in which births == deaths). Implies a high degree of rationality - who gets to reproduce, and who doesn&#x27;t? It would take a lot of energy to preserve all those stem cells, after all, and energy supplies really are limited. reply SoftTalker 9 hours agoparentprevThe last thing we need right now is people living longer. reply tjlingham 9 hours agorootparentThat&#x27;s very easy to say until it&#x27;s your partner, mother&#x2F;father, or child on the other side of that assertion.If you&#x27;re curious and have time, I&#x27;d suggest the following excellent exploration of the idea of extinguishing natural death by CGP Grey. He uses an interesting analogy to help challenge the ingrained belief that natural death is just https:&#x2F;&#x2F;youtu.be&#x2F;cZYNADOHhVY?si=oCqVGD5RX9Q0Cnrk reply chrisan 9 hours agorootparent> That&#x27;s very easy to say until it&#x27;s your partner, mother&#x2F;father, or child on the other side of that assertion.There is a difference between living longer&#x2F;forever and giving a child with terminal cancer a normal full life reply Teever 8 hours agorootparentWhat is that difference? reply lelandbatey 7 hours agorootparentLiving forever and living longer shouldn&#x27;t be grouped together; living forever means unbounded existence and unbounded consumption over time. That&#x27;s a fundamental paradigm shift for our entire system of being human.Saving extending the lives of more children is unfortunately, a statistics change for our current world. Unlimited life means all models of economics, morality generally, class, etc will be affected. reply mjan22640 17 minutes agorootparentOur cells live forever, despite the support \"clumps\" they create in the process eventually die off. reply Teever 6 hours agorootparentprevBut no one is truely going to live forever. They&#x27;ll die from disease or accident or murder.Everyone dies man. reply rubinelli 8 hours agorootparentprevCGP Grey doesn&#x27;t explore what happens after death is defeated. I can&#x27;t imagine how it can lead to anything but a stagnated society, with prejudices and inequalities enshrined forever. reply seer 4 hours agorootparentWouldn’t it be the other way around? Now, since the effects of our prejudice, inequality etc, are usually borne way after we die, we don’t get to see the effects of our decisions. If we get to live a lot longer, we’ll be wiser in making better, more balanced decisions.As for stagnation, sure earth itself is quite overpopulated, but there is nothing technologically stopping humanity from colonizing the solar system.If humanity gets it shit together and becomes slightly more organized, those experiments in society will just happen in geographically different places.The “red mars, blue mars, green mars” trilogy explores this quite well, even if the science is a bit dated, the politics aspects of the books are quite interesting, tackling future colonization and longevity’s political pressures and opportunities. reply SoftTalker 9 hours agorootparentprevWe only need to look at nature to see that everything dies. It is natural, and necessary.I am not in any way saying that people should be euthanized or disease not treated or that people not live out their natural lives. But artificial extension of life will only result in those who can afford it staying in power forever. reply jdhendrickson 7 hours agorootparenthttps:&#x2F;&#x2F;effectiviology.com&#x2F;appeal-to-nature-fallacy&#x2F;#:~:text.... reply tchaffee 9 hours agorootparentprevWe only need to look to nature to find the immortal jellyfish.Much of medical science is \"artificial\" extension of life. Natural would be you dying of Smallpox at a young age. Instead you&#x27;ve artificially extended your life with a vaccine.https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Turritopsis_dohrnii reply ftxbro 8 hours agorootparentprev> That&#x27;s very easy to say until it&#x27;s your partner, mother&#x2F;father, or child on the other side of that assertion.The idea isn&#x27;t that poor people will get life extension, it&#x27;s that families of billionaires will get it. And no it won&#x27;t \"trickle down\" life expectancy is actually decreasing in USA despite tech gains.EDIT: downvote me if you want, you know it&#x27;s true reply ajmurmann 7 hours agorootparentDidn&#x27;t most of the additional deaths come from COVID, drug overdoses and suicides? While those are terrible and need to be addressed, those don&#x27;t seem to be related to availability of medical treatment. reply toomuchtodo 7 hours agorootparentDeaths of despair are linked to economic system configuration, pushed by the wealthy to remain static. Similar story with US healthcare.https:&#x2F;&#x2F;www.npr.org&#x2F;sections&#x2F;health-shots&#x2F;2023&#x2F;03&#x2F;25&#x2F;1164819...https:&#x2F;&#x2F;www.hsph.harvard.edu&#x2F;news&#x2F;hsph-in-the-news&#x2F;whats-beh... reply ajmurmann 5 hours agorootparent>Deaths of despair are linked to economic system configuration,[..]Sure there is a correlation between deaths of despair and poverty. However, the argument here was that healthcare advances won&#x27;t tickle down with the evidence being declining life expectancy. That&#x27;s a totally different claim. As of 2021 over 90% of Americans had health insurance coverage and AFAIK the vast majority of proven, legitimate treatments are available to those insured people. (sauce: https:&#x2F;&#x2F;www.census.gov&#x2F;library&#x2F;publications&#x2F;2022&#x2F;demo&#x2F;p60-27...).>pushed by the wealthy to remain staticWhat class war, conspiracy nonsense is this? Do you think \"the rich\" get together once a year, smoke cigars and discuss what policies to convince everyone of in order to keep the poors down because they are idiots who believe the world is a zero-sum-game? reply __MatrixMan__ 4 hours agorootparentIf each person would be better off if there were fewer people, then you&#x27;re looking at a zero sum game.If some groups have outsized resources to play that game, it wouldn&#x27;t be surprising if they found themselves playing it. There doesn&#x27;t have to be any conspiracy. Unless they take steps to interrupt the process, people&#x27;s behavior naturally aligns with whatever is best for the group they feel they&#x27;re part of.It&#x27;s how we got racism and lots of other toxic garbage. To pretend it doesn&#x27;t exist is to give it a place to hide. replyrco8786 9 hours agorootparentprevThis is not backed by evidence or statistics. The earth is not overpopulated nor in danger of being so. reply notjoemama 9 hours agorootparentI’ve read a bit on the topic too and I think I agree? One of the other obvious occurrences we’re living through is some form of population collapse. Although it’s termed “collapse” I think it’s better conveyed as “global population shrink”. As far as sustainability, I think we can all wait for generational turn over and see what shakes out. But that brings with it other problems like not having enough younger people to care for the elderly or meaningfully contribute to a tax revenue. Anyway, glad you pointed that out. In a cacophony of doom from main stream media (news, social, political, celebrities) maybe this isn’t one of the very big problems that needs global attention right now. reply throwuwu 8 hours agorootparentNot just tax and elder care. If you have fewer young people than old then when those young people take the place of their older colleagues in their various professions you wind up losing a lot of tacit knowledge. If there are 1.5 olds for every young then that young one needs to learn 150% of the skills and knowledge that they did before. In such cases the extra information often gets lost. This is how population collapse leads to civilizational collapse. reply asah 4 hours agorootparentprevClimate impact is roughly O(N) for the number of humans. Sure, some have more impact than others but reduce humans and reduce impact. reply arcticbull 9 hours agorootparentprevThe more a society develops the lower its birth rate. Most of the developed world is well below replacement rate, and the rest of the world will be there soon too. reply seer 4 hours agorootparentTo be fair I personally believe this is not a case of “rich&#x2F;educated people have fewer children”, more the case that the way society is structured in those rich&#x2F;educated places, having children is a bad deal.It used to be if you had some kids, it was a huuge investment, but you got a lot out of the deal after about 13 years.But right now, children are still a huge investment, but the parents hardly get any economic incentive for it, the country has “captured” that for its own end.If governments took this into account and “repaid” this back to the parents, I’m sure people will have way more children.If societies were structured in such a way that children made economic sense to their parents, I’m sure shrinking population would not be a thing.Now if something like this has moral problems in and off itself is a different question. I just want to point out that “developed countries are have fewer children” shouldn’t be taken as an absolute truth. It just developed countries as currently structured do not incentivize parents enough. Just look at Israel for example. reply arcticbull 4 hours agorootparentIt is indeed literally a case of rich&#x2F;educated people have fewer children. It’s called the demographic-economic paradox. [1]There’s been a lot of research on this because the effect is so pronounced.> In decreasing order of strength, fertility (TFR) correlates negatively with education, [contraceptive prevalence], and GDP per capita, and positively with religiosity. [2]If you’re educated, rich, non-religious and can bone with impunity you have somewhere between 1 and 2 kids on average, well below the replacement rate of 2.1It is absolutely a fantastic deal to have kids in Finland where you get months and months of mat and pat leave, etc, and their birth rate is 1.37Israel is only high because they’re a religious ethnostate and religiosity as the studies show is positively correlated with fertility.Respectfully I do think the data shows we should take this for granted.[1] https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Income_and_fertility[2] https:&#x2F;&#x2F;bmcpublichealth.biomedcentral.com&#x2F;articles&#x2F;10.1186&#x2F;s... reply zo1 3 hours agorootparentJust a smaller comment to a part of yours. Getting maternity&#x2F;paternity leave of months is peanuts compared to 2 decades of rearing, and I don&#x27;t think we can use that as \"proof\". Parenting is hard and we absolutely should be incentivizing it way more, not with leave, but with more financial subsidies and rewards. reply Tommstein 8 hours agorootparentprevSomehow, the people who always bitch about there being too many people never volunteer themselves to help reduce the problem. reply mensetmanusman 9 hours agorootparentprevI thought we wanted billionaires to be immortal! reply seydor 9 hours agoprev> For derivation of TNT-hiPS cells, the day 7 reprogramming intermediates were transitioned to naive medium (t2iLGoY) instead. When dome-shaped colonies were evident 5 days later, intermediate cells were collected using Accutase (Stem Cell Technologies) and reseeded onto a layer of iMEFs in naive conditions. reply photochemsyn 8 hours agoprevIt&#x27;s quite a leap to imagine that developmental processes in cells are entirely reversible, but maybe it&#x27;s possible. The main thing to look at in this study is this:> \"Professor Polo said the precise molecular mechanisms underlying the iPS epigenome aberrations and their correction were not fully known, and further research was needed to understand them.\"Think about the truly ridiculous level of programmatic fidelity involved in human (or any mammalian) reproduction. Two cells, one from the XY male and one from the XX female, merge to form a viable zygote. One cell. Somehow, that cell contains all the information necessary to develop into to a kangaroo, or a whale, or a human, or a naked mole rat. Hundreds of different cell types, expressing thousands of celluar receptor proteins, to keep it all coordinated.A lot of the developmental processes involve selective deactivation of large regions of the genome (nerve cells don&#x27;t need much of what heart cells need, and so on), but somehow it&#x27;s all coordinated. What they&#x27;re claiming is that this selective deactivation can somehow be reversed, but they don&#x27;t quite understand how, at a molecular-structural level.It all points to the 3D structure of the genome being important at many levels, but there&#x27;s no good way to experimentally analyze that yet, not really. reply hanniabu 11 hours agoprevWhat are the implications? reply rolph 11 hours agoparenta lot less work to achieve desired outcome. nonsurgical means of tissue repair, replacement, or rejuvenation. reply hanniabu 11 hours agorootparentDo you just inject stem cells into the affected area? reply haldujai 10 hours agorootparentYou would probably want to induce differentiation in vitro before injecting to make sure it turns into the right cell type but stem cell therapy hasn’t worked out particularly well.One of the easiest problems to understand is that the cellular potential for infinite replication is what causes tumors&#x2F;cancers too. reply rolph 11 hours agorootparentprevthats a simple approach, application of a pseudo tissue similar to skingrafting is another, implantation of &#x27;scaffold&#x27; protien construct, implanted with stem cells is another. e.g. &#x27;ghost&#x27; organs or tissue, grafting.a somewhat complex approach is to \"wipe\" [dedifferentiate] in situ stem cells in vivo, allowing surrounding tissue signaling to program stem cells and induce a developmental path.keep in mind i am being simple for the sake of understanding. reply orliesaurus 10 hours agorootparentCan anything go wrong with these approaches? Like what is the rejection rate, is there even a rejection rate? Curious, I know nothing! reply rolph 9 hours agorootparentto keep it simple, this is just scratching the surface of what is there.teratogenesis is a major hurdle to the tech.to a large extent it is induction of a process that is autonomously regulated.consider, the gotchas involved in reusing materials to produce structure.or the complexity involved in changing the nature of a large multinational conglomerate of corporations.the difficulty lies in &#x27;re-vectoring&#x27; an assembly to alter process that is dynamic and has many possible responses to one specific change, dependent on past event, multiplied by each cell in the respondent cohort.assembly theory, and informatic complexity apply here, overtop the biological phenomenon.============================rejection rate is ideally not a consequence when these stem cells originate from the recipient.the tech of topic deals with genetic manipulation, and is simplistic as DNA is not the only component having influence. cytoplasmic factors, as well as the state, and point of process are informatic and determinative. reply orliesaurus 8 hours agorootparentThank you for explaining it to me! reply moffkalast 10 hours agorootparentprevApply stem cells directly to the forehead. reply 29athrowaway 11 hours agoparentprevImmortal trillionaires. reply wheelerof4te 10 hours agorootparentHey, only if they stay trillionaires!Of course, it will be Stem Cells as a Service. Or SCaaS. reply woleium 8 hours agorootparentStem Cells as a Medical Service, or SCaaMS reply PradeetPatel 10 hours agorootparentprevAlthough that may be a sound business model, one must question the ethical implications surrounding it.With that said, that&#x27;s not too different from existing cancer treatment drugs. reply selcuka 10 hours agorootparentprevEveryone can be a trillionaire if they are immortal. reply zo1 3 hours agorootparentI think the concept of money will change drastically if we ever achieve immortality for any meaningful portion of society. reply 29athrowaway 6 hours agorootparentprevOr anyone, in Zimbabwean dollars. reply xwdv 10 hours agorootparentprevNot really. Anyone could but not everyone. You need people to uphold the Ponzi scheme of capitalism to funnel money to the trillionaires.Edit: I’d really love to know what these damn down voters are thinking. You literally think everyone can just be a trillionaire? Where is the value being produced? Where is the money coming from? Trillionaires passing each other money around??? reply smeej 8 hours agorootparentPrint enough money and everyone&#x27;s a trillionaire!(I say that in jest, but it&#x27;s awfully typical of how governments do seem to solve problems. \"Trillionaires can buy whatever they want, so let&#x27;s print enough money for everyone to be a trillionaire!\" is awfully similar to \"People with college degrees have higher lifetime earnings, so let&#x27;s make college free so everyone can have a college degree!\") reply wait_a_minute 9 hours agorootparentprevCapitalism has lifted billions out of poverty. It is not a zero sum game. People will invent new things and new industries. There are infinite possibilities to discover and all of those are new products and services and experiences to build.All the commodities humans need for huge increases in per capita wealth are plentiful throughout the universe. NASA wants to explore an asteroid that just by itself is worth $10 quintillion because of all the precious metals in it. That isn’t even the biggest one discovered. There are going to be endless asteroids and entire planets like these.And there will be endless planets that can be settled and colonized and terraformed. reply smeej 8 hours agorootparentI do wonder about that valuation, though. Unless they only manage to extract the value so slowly it doesn&#x27;t flood the market, wouldn&#x27;t the \"precious\" medals just become less precious? At least the ones where the value largely comes from scarcity?This example has nothing to do with this specific asteroid, but it makes the general point: If the amount of gold available doubles over 50 years, the market could probably handle it. But if it goes up 2x per year for 50 years? The price craters. reply wait_a_minute 8 hours agorootparentYes the prices would plummet but that means wealth per capita increases in real terms. Producing the goods and services that depend on those cheaper commodities will become much cheaper. If we get to a world where everything of value today costs $1 to produce tomorrow, that’s a much wealthier (non zero sum) world. replyidopmstuff 12 hours agoprevTop of the front page and no comments? I take it this is being upvoted by lots of folks like myself that are relative laymen but hopeful that this is a meaningful advance. Won&#x27;t someone explain the practical significance? reply qup 11 hours agoparentLayperson here: Stem cells are like clay. They&#x27;re very useful.Figuring out all these fine details are likely to lead us to be able to reset our bodies and either drastically extend our lifetimes, or give us a better body in our later years.This one step might not be part of your medical treatment anytime soon, but we&#x27;re unlocking fundamental knowledge that we will be wielding, and we don&#x27;t yet know how powerful that will be.I believe this (human aging and longevity, biomed) is the most important work. reply vikramkr 11 hours agoparentprevTried to provide a rough summary, hopefully it&#x27;s helpful: https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=37287128 reply rolph 10 hours agorootparentyes helpful. Developmental biology is a very sophisticated discipline, most people require years of post doc study, in order to attain a global understanding of the topic. reply gravelc 11 hours agoparentprevAs usual, the manuscript itself is a bit more discrete than the press release, but this sentence in the conclusion shows the potential benefits - scalable and practical resetting of somatic stem cells, which has been a barrier in translation to actual therapies:- \"Our work shows that TNT reprogramming is a practical and scalable approach to overcome these intrinsic characteristics of hiPS cells, which is important for the clinical delivery of this technology.\" reply dboreham 11 hours agoparentprevIf you have a stem cell then in theory you can program it to differentiate into any kind of cell, allowing things like tissue regrowth, repair injuries, make a new lung or liver etc. reply eb0la 11 hours agorootparentStem cell research has a lot of controversy due to the fact some years ago you could only get stem cells from embryos. For some people (like the Catholic Church) that was a huge ethical issue. Now it is not. reply smeej 8 hours agorootparentEmbryonic stem cell research has always been problematic for the Catholic Church, yes, and it will remain so (although there&#x27;s also a strong argument even from Catholic ethicists that developing things like vaccines from stem cell lines where the contributing embryo died in the 1970s can be licit, because the participation in the death of the embryo is so remote and the benefit potentially so high).Research on adult stem cells or induced pluripotent stem cells already didn&#x27;t face the same objections.It sounds like this is more about an improvement in the technique of inducing pluripotency that could reduce negative complications, rather than a whole new unobjectionable procedure that hadn&#x27;t existed before. reply NoZebra120vClip 7 hours agorootparentCorrect me if I&#x27;m wrong, but ESCs have been more or less 100% hype and \"future promise\" with no actual current uses coming to fruition. In contrast, adult stem cells have been used for a lot of treatments and a lot of uses. For me, this casts doubt on the whole push to eliminate restrictions on ESCs. reply dmvdoug 8 hours agorootparentprevBit much to say ESC research was “always” problematic. The notion that life begins at conception was not one that, e.g., St. Thomas Aquinas agreed with. Analyze the ethical issues using his views about life beginning with quickening and you might reach different conclusions than those of the Church today. reply rolph 11 hours agoparentprevstem cells are pluripotent, meaning they have more than one developmental fate. further on they become putative, meaning the possibilities are narrowed to a particular cell type.stem cell therapies used to involve extensive selection processes, to harvest cells that develop according to therapeutic goals.wiping out determined fate, means far less process required, and produces an effectively universal [or near so] stem cell that will be fate determined by surrounding tissue and diffusive signals. reply brap 10 hours agoprev [–] It kinda sucks that when they finally find a way to stop aging, I’ll probably be in my 90s anyway. reply DennisP 9 hours agoparent [–] Luckily they&#x27;re also working on reversing aging. It could turn out that periodically repairing the damage is easier than stopping it from happening at all. replyGuidelinesFAQListsAPISecurityLegalApply to YCContact Search:",
    "originSummary": [
      "Australian scientists have developed a new method called TNT reprogramming to make human cells act more like embryonic stem cells.",
      "The method aims to erase the cell's memory and reduce differences between induced pluripotent stem (iPS) cells and embryonic stem (ES) cells.",
      "This breakthrough could advance cell therapies and biomedical research, according to the researchers."
    ],
    "commentSummary": [
      "Researchers have devised a new method to reprogram human cells, making them more similar to embryonic stem cells and potentially improving induced pluripotent stem cells (iPSCs) for research purposes.",
      "The conversation delves into the possibility of using drugs to address health issues resulting from unhealthy lifestyles, as well as the impact of obesity on cancer rates.",
      "There is a discussion about preserving stem cells for medical interventions, extending human life, and ongoing research on halting aging and reversing its effects."
    ],
    "points": 354,
    "commentCount": 82,
    "retryCount": 0,
    "time": 1693172269
  },
  {
    "id": 37283860,
    "title": "Where do fonts come from? Monotype, mostly",
    "originLink": "https://thehustle.co/where-do-fonts-come-from/",
    "originBody": "News Daily Headlines Hustle Originals Newsletter Latest Newsletter Newsletter Archive Podcasts The Hustle Daily Show My First Million YouTube Trends HubSpot Join Free Home › Where do fonts come from? This one business, mostly Where do fonts come from? This one business, mostly Creators say they struggle to gain a foothold in a font market dominated by Monotype Sara Friedman August 25, 2023 Ten years ago, Cindy Thomason was walking down the stairs at home when she heard her phone ring. On the other end was an executive from Warner Bros. Entertainment, calling to let her know that a font she designed would be featured in the upcoming blockbuster adaptation of The Great Gatsby. “I had to sit down,” Thomason says. “I’m just somebody who decided to design a font on a whim.” A nurse in suburban Virginia, Thomason began tinkering with fonts in her free time using a software package she bought for $100. She’d listed the font, which she named Grandhappy, on an online marketplace called MyFonts. That’s where producers from Warner Bros. found it, and bought it to use as Jay Gatsby’s handwriting in the 2013 film. It should have been a dream come true, a big break for a hobbyist font designer. But Thomason’s cut for her design’s feature-film cameo was a whopping $12 — not even enough to recoup what she paid for her design software. Alternate letters designed by Thomason for her Grandhappy font (Cindy Thomason) Thomason’s story isn’t an anomaly: Fonts are a ubiquitous commodity. Every font you see — on your computer screen, a street sign, a T-shirt, or your car’s dashboard — has been crafted by a designer. With 4.5k independent artists selling on MyFonts today, many struggle to attract customers and to make a living in an oversaturated market. It’s only getting harder, as designers must compete with and abide by the terms of one company that’s approaching behemoth status: Monotype. The company owns not only many of the world’s most popular fonts but also exchanges like MyFonts where font designers bring their work to market. The industry is inching toward a monopoly, and it’s leaving independent designers with fewer places to go. Written history In 1440, when Johannes Gutenberg invented the printing press in order to mass-produce Bibles, his books came with another innovation: the first font. For the next several centuries, countless foundries sprung up to mimic the characters forged on Gutenberg’s metal plates, experimenting with typefaces and new fonts (a typeface is the umbrella category for a uniquely designed set of letters, such as Times New Roman; a font is a specific variation of a typeface, such as Times New Roman in 16 point bold). Monotype arrived at the end of the 19th century. The company was founded in Philadelphia by Tolbert Lanston, whose monotype machine invention allowed for increased speed and efficiency when producing type. Over the next few decades, Monotype, by then with branches in the US and the UK, developed popular typefaces such as Gill Sans, Perpetua, and Times New Roman. A type-casting machine patent filed by Monotype founder Tolbert Lanston. (US Patent and Trademark Office) In the last half of the 20th century, the font industry, always volatile and rife with mergers and acquisitions, went through rapid change. The mechanized process of Monotype’s signature machine faded out, replaced by phototypesetting and then digital typesetting, bringing fonts to screens. Monotype endured financial difficulties and restructurings, eventually being acquired by the Boston private equity firm TA Associates in 2004 and going public with stock-ticker name TYPE in 2007. The retooled Monotype saw its annual revenues climb from $107m in 2010 to $247m in 2018 and became a powerhouse: In 2006, it purchased Linotype, a major competitor since the 19th century, bringing Helvetica, Avenir, and ~6k other typefaces into its fold. It bought Ascender Corporation, a digital typeface foundry, in 2010 and FontShop, which owned more than 2.5k typefaces, in 2014. In 2019, private equity firm HGGC bought Monotype for $825m, acquiring its roster of typefaces and setting it up for even more acquisitions. The company has since purchased URW Foundry and Hoefler & Co., a renowned independent foundry. According to Quartz, Monotype has claimed its purchases made life better for customers, who only have to navigate a licensing agreement from one company to access a bevy of fonts. But one font designer believed the acquisition of Hoefler & Co. felt like “a kraken eating up the industry.” “A market with one very large player and a lot of smaller players is not a healthy market,” Gerry Leonidas, professor of typography at the University of Reading, told The Hustle. “It essentially stifles the competition and makes it difficult for alternative models to grow.” A man uses a monotype machine in 1938. (Getty Images/Kurt Hutton) While boutique foundries still exist and do work for big companies, Monotype owns most major fonts: Arial, Helvetica, Gotham, Times New Roman. Its main competitors are Adobe Fonts and Google Fonts, the latter of which gives away fonts for free. In addition to the giants, there are thousands of other designers, some hobbyists and some full-time font makers, who try to sell their typefaces. Most of them have to go through — you guessed it — Monotype. Competing with Monotype In 2012, Monotype made one of its most noteworthy acquisitions. It paid $50m for the parent company of MyFonts, the website where Cindy Thomason and other independent designers and foundries hope to sell their fonts to the likes of independent graphic designers, ad agencies shopping for client projects, or major brands. The MyFonts marketplace features 4.5k foundries selling more than 250k typefaces. Other marketplaces like Creative Market and Etsy feature 82k and 5k+ fonts, respectively. Foundries set their own prices. The average font costs $29 and sells per use or in perpetuity, depending on licensing agreements. Monotype tells The Hustle that of the thousands of foundries selling on MyFonts, about 55% say their earnings provide passive income, while 45% report earning a living selling fonts. Much of their earnings go back to Monotype, which takes a 50% cut of every sale on its site. (Creative Market similarly takes a 50% commission fee, while Etsy charges 20 cents per listing and takes a 6.5% fee for every sale.) Although other marketplaces take smaller cuts, MyFonts is known in the industry for being the gold standard for audience reach. Ellen Luff, who runs Ellen Luff Type Foundry and whose Larken font (starting at $42) is a MyFonts bestseller, told The Hustle there’s little choice but to use the site. “When you’re independent, you’ve got your freedom, which is great. But then you have to balance being overlooked, and trying to beat [MyFonts] because they are a monster,” she said. “They are huge.” The power of Monotype and MyFonts isn’t the only obstacle for independents. Luff has spotted her fonts being used by corporations such as Apple and NASA, sometimes without her permission. Luff says half of her clients come from retrospective licensing agreements made after she’s found her designs being used illegally. But going up against large companies is no easy feat for independent designers who have no legal teams to support them in negotiations. A display of old type at Monotype’s offices in Woburn, Massachusetts. (Getty Images/Boston Globe) For designers who partner with Monotype, though, the company puts its power into handling infringement issues. That’s why, for many designers, MyFonts pays off. Sam Parrett, typeface designer and owner of Set Sail Studios, has a bestseller on MyFonts, La Luxes, priced at $29 for a pack of two fonts. On average, Parrett makes $7k per month through MyFonts sales after the site’s 50% fee. He says custom work made up just under 6% of his income in 2022, and he takes on about four custom projects per year while he focuses on creating fonts for marketplaces. And Parrett’s fonts, which he first draws by hand, pop up everywhere: Scrawled across actor Gillian Anderson’s naked body and plastered on a billboard for a Peta campaign. On the covers of Diana Ross, Katy Perry, and Cardi B albums. As logos for multiple Netflix series. “I drive my wife mad because everywhere I go I’m like, ‘That’s my font!’” Parrett said. “It’s so crazy because it’s just me in my spare bedroom writing these letters.” Designer Sam Parrett sketching fonts by hand (Sam Parrett) Paulo Goode, who started out as a hobbyist type designer, says the MyFonts platform helped him launch his career. “I decided to go full time as an independent type designer less than 18 months after my first release at MyFonts,” he said. “I haven’t looked back since.” Goode eventually sold the majority of his font portfolio to Monotype. Is AI coming for font designers? This month, Monotype plans to introduce a new program that will shift the MyFonts marketplace toward a subscription model. Rather than coming to the site, finding a font, and figuring out which licensing to pay for, customers can instead opt to pay for a Monotype subscription where the licensing is pre-covered for a larger variety of fonts. Royalties will be calculated by taking into account a foundry’s percentage of all ecommerce revenue as well as how often its fonts are used by customers in prototyping and production stages, potentially compensating foundries for use cases that previously went unpaid. Those metrics are then multiplied by the amount Monotype bills all its customers for the quarter, and lastly by a foundry’s royalty rate. Foundries have the option to opt into the Monotype Fonts subscription program in addition to normal licensing. Mary Catherine Pflug, Monotype’s director of partner product and operations, says she believes the plan will help designers earn more by offering payments every time a font is used rather than just for a final product. Plus, she says foundries will have access to more immediate data on their fonts, allowing them to make informed business and design decisions. Leonidas, the typography professor, says the issue is that Monotype itself owns many of the most popularly licensed fonts and will disproportionately benefit from a subscription structure. “These things work very well if you are Helvetica — you’ll get quite a lot of money from this. If you have a very good typeface that is used for music publishing or poetry, you might get nothing,” he said. “They’re putting money back in their own pockets.” Some font designers told The Hustle they fear the move will force them to put more trust into Monotype, surrendering the control that comes with clear payments for each sale and instead relying on the company’s internal calculations. A wall of Monotype logos. (Getty Images/Boston Globe) “[Monotype] keeps saying, ‘We are going to simplify it for the customers and get you more business,’ but you’re not getting us more business,” Luff said. “It’s a way of them cutting the pie differently but not necessarily in anyone else’s favor.” Pflug is resolute that the program will bring positive change. “The biggest struggle facing indie foundries today is getting their work discovered by and into the hands of creatives, and in handling the challenging nuances of font licensing. We are not competing with foundries — we’re a channel for foundries to reach more customers.” To add to the complexities, artificial intelligence may put pressure on the already crowded industry. For now, Parrett feels his job is safe from AI. “There are people saying it’s going to happen at some point, that it’s just a matter of when,” he said. “But it’s a handcrafted artisan industry — AI can’t get the precision right.” A green sign featuring Monotype’s old stock ticker symbol at its offices in Woburn, Massachusetts. (Getty Images/Boston Globe). That optimism, however, will likely be tested as Monotype begins dabbling with AI. The company already owns WhatTheFont, an app that uses deep learning to identify fonts from photographs, and it’s added an AI-powered font-pairing feature. Monotype says it plans to use machine learning and AI to improve how users discover new fonts on its platform — an innovation that will undoubtedly affect foundries, though it remains to be seen exactly how. Even amid Monotype’s takeover, an influx of free fonts, and the growing threat of AI, there will always be a need for font makers with an appreciation for the craft. “I think half of what makes art is the story and meaning behind it,” Luff said. “Although AI will be able to make beautiful curves and replicate trends, it won’t have the story. People are looking for the human relation to the words.” Get the 5-minute roundup you’ll actually read in your inbox Business and tech news in 5 minutes or less 100% free. We don’t spam. Unsubscribe whenever. RECENT POSTS When TikTok says ‘jump,’ restaurants fling themselves right off a cliff By Lestraundra Alfred / August 24, 2023 READ MORE Microsoft’s Satya Nadella: A solid first pick in any fantasy CEO draft By Ben Berkley / August 23, 2023 READ MORE Do dating apps decide who we get to date? By Juliet Bennett Rylah / August 23, 2023 READ MORE Will the Bay Area get a new city? By Juliet Bennett Rylah / August 28, 2023 READ MORE A summer without peaches sucks, but the Peach State has a lot more going for it By Ben Berkley / August 28, 2023 READ MORE Buying homes with family money, Fyre Festival II, and more newsy numbers By Ben Berkley / August 28, 2023 READ MORE Where do fonts come from? This one business, mostly By Sara Friedman / August 25, 2023 READ MORE Don’t stress, our anxiety is big business By Sara Friedman / August 25, 2023 READ MORE Where there’s smoke, there’s an autonomous vehicle blocking a fire By Ben Berkley / August 25, 2023 READ MORE Meta vs. Canada is a long pattern of dismantling news By Juliet Bennett Rylah / August 24, 2023 READ MORE When TikTok says ‘jump,’ restaurants fling themselves right off a cliff By Lestraundra Alfred / August 24, 2023 READ MORE Microsoft’s Satya Nadella: A solid first pick in any fantasy CEO draft By Ben Berkley / August 23, 2023 READ MORE Do dating apps decide who we get to date? By Juliet Bennett Rylah / August 23, 2023 READ MORE Will the Bay Area get a new city? By Juliet Bennett Rylah / August 28, 2023 READ MORE A summer without peaches sucks, but the Peach State has a lot more going for it By Ben Berkley / August 28, 2023 READ MORE Buying homes with family money, Fyre Festival II, and more newsy numbers By Ben Berkley / August 28, 2023 READ MORE TRENDING ORIGINALS The man who won the lottery 14 times Why nobody got paid for one of the most sampled sounds in hip-hop Why the world’s best vanilla is so easy to steal The jobs most (and least) likely to land you on ‘The Bachelorette’ How one man created a multimillion-dollar resale market for Buc-ee’s snacks Never Miss What’s Happening In Business and Tech Trusted By 2.5M+ Readers Vetted business ideas you can launch in a weekend Get 1,000+ Ideas “Entertaining, informative, keeps you coming back for more...” The Hustle Daily Show Listen on Apple Podcast Listen on Castro Listen on Spotify Daily Headlines Hustle Originals Today’s Newsletter Podcast Trends HubSpot Copyright © 2023 HubSpot, Inc. Privacy Policy Terms of Use We use cookies to make the Hustle website a better place. Cookies help to provide a more personalized experience and relevant advertising for you, and web analytics for us. To learn more about the different cookies we're using, check out our Cookie Settings. For further information, check out our Cookie Policy & our Privacy Policy. DeclineAllow Cookies",
    "commentLink": "https://news.ycombinator.com/item?id=37283860",
    "commentBody": "Where do fonts come from? Monotype, mostlyHacker NewspastloginWhere do fonts come from? Monotype, mostly (thehustle.co) 313 points by kansaswriter 18 hours ago| hidepastfavorite157 comments hannob 16 hours agoI find this misleading.Today, most fonts in practical use are open source fonts. When someone chooses a font for a web project, they typically pick something from Google fonts, which are all open source licensed. Android, the most common OS, uses open source fonts like Roboto by default which are also open source.The article does not mention open source at all, it has one mention of Google Fonts which is kinda misleading (\"the latter of which gives away fonts for free\" - well, not really, many of these fonts are not from google and were already free, google is just providing a font hosting service).An accurate statement would be one company dominates the proprietary font market, which is however only a small share of overall font use. reply omnimus 15 hours agoparentThis is not true. We would have to define \"practical use\" but if you are looking at most used typefaces - things people see in around them the most it is dominated by commercial typefaces. It will be Helveticas, Arials, Times New Romans of the world. What people use in Word and Windows - all proprietary typefaces. Anything Apple - proprietary. Anything branded - brands usually typeface and that typeface is going to be proprietary - even on web.Only platform that uses open-source typeface is Android with roboto&#x2F;noto. If you are looking at webapps not marketing sites then yes you might get lot of Inter but trend is moving towards using system-ui font stack which is proprietary (except linux&#x2F;android).So no open-source typefaces are definitely not most used in practical use. Btw majority of the super popular ones are owned by Monotype the company this article is about. reply barbariangrunge 8 hours agorootparentThe graphic designers I know all own a personal library of expensive fonts they’ve purchased over the years. Fonts being good matters a lot more than them being free reply whatisyour 1 hour agorootparentIn era of reproducible science, fonts being reproducible by people matters a lot more. And free fonts can be very good as well. reply Terr_ 14 hours agorootparentprev> things people see in around them the most it is dominated by commercial typefacesI agree, but I think that says more about how the market for OS-software evolved (with the assumption that the OS should provide core fonts \"for free\") as opposed to an indication of monopoly or lock-in.The average person probably doesn&#x27;t notice (nor care) about the subtle differences between those major (OS-company supplied) fonts versus open-source equivalents or their competitors&#x27; proprietary ones. reply bitwize 12 hours agorootparentDo you know anyone who works in design?I do.And quite franky, all of them would laugh in your face if you told them that fonts are something that ought to be provided \"for free\". Fonts come from designers, designers work hard and should be paid for their work. Accordingly, real professional designers pay for fonts -- by the hundreds or thousands, sometimes, so many fonts their computers slow down if they don&#x27;t use special software to manage them all.This is also why the strongest, healthiest software ecosystem exists on macOS. Because macOS still has that cultural creative core of its user base, a culture which believes that people who create things should be paid for their efforts. Accordingly, you can still release a commercial proprietary program on macOS and expect to make significant money -- even from a small user base. That&#x27;s certainly not true on Linux and it increasingly isn&#x27;t true on Windows -- except, maybe, for gaming.As for the average person, we&#x27;re not even talking about the digital world. Everything in print, everything written on television, uses fonts. And if they employ professional designers, those are going to be commercial fonts. The real deal, the ones that were first set in hot type by Swiss or Austrian guys a hundred years ago or more. Open source substitutes are no substitute at all. reply Terr_ 11 hours agorootparent> [designers] would laugh in your face if you told them that fonts are something that ought to be provided \"for free\"That&#x27;s a big *whoosh* or else you just felt like attacking a strawman.Like I already said, I&#x27;m referring to how all major operating systems (including desktop Linux distros) bundle dozens of fonts to cover common needs. No average consumer is expected to spend additional money gaining the ability to see Greek math symbols or pseudo-handwriting or whatever.It isn&#x27;t the 1990s where you might see a retail-display box for Microsoft Windows 3.x adjacent to Microsoft TrueType Font Pack for Windows and Adobe Type Basics.Similarly, disk-defragmentation tools are now in there \"for free\", and a TCP&#x2F;IP stack is there \"for free\", etc. reply whatisyour 1 hour agorootparentprevWell yes, but in era of reproducible science, we need fonts which can be reproduced by the people who recompile the scientific data and regenerate the reports. Proprietary fonts are kind of a bottleneck in that respect. reply creata 11 hours agorootparentprev> This is also why the strongest, healthiest software ecosystem exists on macOS.What do you mean by \"strongest\" and \"healthiest\"?In my experience, most software is very cross-platform these days, and most platform-exclusive software is Windows-only. reply fijiaarone 11 hours agorootparentprevInternet trolls work hard and they deserve to be paid for their work. reply somsak2 13 hours agoparentprevI think your comment is misleading. Most fonts in use on the web today are actually proprietary and not open source. https:&#x2F;&#x2F;jichu4n.com&#x2F;posts&#x2F;the-most-popular-fonts-on-the-web-... -- Arial, Verdana, Tahoma, Georgia, Helvetica are all proprietary. reply jay_kyburz 11 hours agorootparentProprietary, but also free because they are bundled with our OS.The topic at hand is fonts you have to buy a license to use from Monotype, and fonts you can use freely. reply nwallin 10 hours agoparentprev> Today, most fonts in practical use are open source fonts. When someone chooses a font for a web project,I think you&#x27;ve got your HN blinders on. There are two types of projects: Projects where the font doesn&#x27;t matter, and projects where the font is proprietary. Proprietary fonts utterly dominate the market whenever there&#x27;s a paid graphic designer involved. reply ncruces 10 hours agorootparentYou seem to think all open-source fonts&#x27; graphic designers worked for free, which is as laughable as saying there is no money in open-source software development.Most fonts in wide use are likely contract work, whatever license ends up being used for their distribution. reply gorgoiler 16 hours agoprevHow come these old typefaces like Helvetica and Gill Sans not in the public domain? The article mentions Helvetica being rolled in with one of Monotype’s purchases yet Helvetica is from the 1940s?Hard copies of Shakespeare have individual copyright because of their unique prefaces. Are these typefaces in copyright still because of the individual numerical descriptions being the work under protection, rather than the actual shape?Is it something similar to How X’s recording of Bach’s Y concerto with The Z Ensemble is in copyright, but the musical score itself is in the public domain? reply pakyr 16 hours agoparentIt looks like[0] as of the start of this year, only works made in 1927 or earlier are in the public domain. Copyright terms have regularly been extended by Congress and they are astoundingly long now.[0]https:&#x2F;&#x2F;copyrightlately.com&#x2F;public-domain-day-2023&#x2F; reply arrosenberg 16 hours agorootparentAlso known as the Mickey Mouse Protection Act - https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Copyright_Term_Extension_ActThanks to Disney, this aspect of our economy and culture is completely broken. reply secabeen 9 hours agorootparent> Copyright terms have regularly been extended by Congress and they are astoundingly long now.There has been no appetite for extending terms in recent years, and things are entering the public domain again, including _Steamboat Willie_. I think there is an understanding that the CTEA will end up as the final extension and that further extensions are unlikely. reply HideousKojima 15 hours agorootparentprevCher gets a good chunk of the blame too reply fsckboy 15 hours agorootparentSonny gets blame for the copyright extension act, but Cher&#x27;s royalties lawsuit is not unreasonable or copying rights related... or did I misunderstand or miss something? reply asmor 16 hours agoparentprevBecause you&#x27;re not buying Helvetica, but a digital variant of it. It&#x27;s like a performance of classical music. Also Helvetica specifically is from 1957, so it may not in the public domain yet (depending on location).There are actually several variants all named Helvetica, which is why it&#x27;s a really bad font to put into your CSS font stack if you&#x27;re not delivering it yourself. Newer variants tend to use other names (e.g. Neue Haas Grotesk). reply tptacek 16 hours agoparentprevThe font files themselves are copyrighted. The underlying typeface --- the shapes of the letters themselves --- are not, so you could I suppose draw your own Helvetica. But you wouldn&#x27;t be able to call it \"Helvetica\", because that&#x27;s a trademark. reply crazygringo 12 hours agorootparentI&#x27;ve still never entirely understood why nobody&#x27;s written a program to rasterize paid fonts at 10000 dpi and then run the bitmap through an automatic vectorization tool to create a legally free and redistributable version that is visually indistinguishable from the original (literally off by rounding errors).The only thing missing would be hinting, but on retina displays and modern laser printers that&#x27;s much less important than it used to be -- and you can always implement automatic hinting. And it&#x27;s easy to extract kerning pairs as well.I&#x27;m not saying this would be good for font creators or society. I&#x27;m just wondering why it hasn&#x27;t become a common thing, when it doesn&#x27;t seem like it&#x27;s actually illegal. reply tptacek 12 hours agorootparentJust a guess here:(1) It&#x27;s a lot of work.(2) You&#x27;d get sued anyways and then have to explain to a jury the distinction between your vectorized raster and the original vectors --- I agree that a graphical interpretation of, effectively, a photograph of a curve is not the same thing as that curve, but it&#x27;s a subtle point.(3) Most importantly: it just doesn&#x27;t matter enough. Universally \"important\" fonts (Helvetica, say) have widely-used liberally-licensed alternatives, but if you want Hoefler Whitney, you want the real Hoefler Whitney, for the same non-pragmatic reason that you&#x27;d want a real pair of D&G Daymasters. reply pessimizer 8 hours agorootparentprevOptifonts was doing something similar to that in the 90s. The results were generally mediocre to bad, but they were going for volume. I&#x27;ve used them in print for headlines and decorative fonts because you can adjust them manually until it looks pretty good. Both the backstory and the fonts are pretty interesting:http:&#x2F;&#x2F;abfonts.freehostia.com&#x2F;opti&#x2F;http:&#x2F;&#x2F;luc.devroye.org&#x2F;fonts-27506.html reply giraffe_lady 9 hours agorootparentprevFont&#x27;s aren&#x27;t quite just a collection of images. Though they almost are which makes it hard to see the boundaries.But a computer font (as opposed to the typeface it represents) is a specialized program, ie it has logic as well as data. Specifically, kerning tables and the conditions under which to use ligatures would be lost by the approach you&#x27;re proposing. But I&#x27;m not a typographer or font expert and I suspect other things also. Anyway that doesn&#x27;t make it completely untenable, just not a complete & automatic process.It is similar in concept to how recipes are handled by intellectual property law. A list of ingredients isn&#x27;t protected, nor is a specific result. But a list plus instructions is. You can copy a recipe by applying a different set of instructions to the same list of ingredients, resulting in an identical dish. In this the type characters are the ingredients, but you still need to provide a set of instructions to combine them into a font. You can provide ones that create an identical result, but you can&#x27;t simply copy them from the original font. reply Silhouette 9 hours agorootparentprevExcluding font designs from copyright protection is a USA-specific thing. What you describe might be restricted by IP laws in other jurisdictions so doing it commercially could be dicey. reply harles 16 hours agorootparentprevIANAL, but this is what design patents are for. They’re much shorter though - 15 years it looks like for fonts [0].[0]: https:&#x2F;&#x2F;www.jdsupra.com&#x2F;legalnews&#x2F;my-word-design-patents-on-... reply sgc 14 hours agoparentprevTo specify about your Shakespeare example, the hard copies are most definitely not under copyright as a whole. At least in the US, only the new, copyrightable material in them can be copyrighted. If it is not novel enough to be copyrightable on its own (like page numbers, titles, etc), it can&#x27;t be copyrighted.Frankly there are a lot of things that people and companies claim copyright on, and other people pay them for, that are not legally under copyright at all. But it is survival of the richest out there... reply gadders 16 hours agoparentprevEric Gill is another of those situations where you need to separate the art from the artist: https:&#x2F;&#x2F;amp.theguardian.com&#x2F;artanddesign&#x2F;2017&#x2F;apr&#x2F;09&#x2F;eric-gi... reply kstrauser 16 hours agoparentprevThat last bit is my understanding: the typefaces are public domain, but the font files that describe them are protected. reply strogonoff 17 hours agoprevIn the industry of big near-monopolies, let’s support small indie type designers. I personally can’t recommend enough Matthew Butterick’s work, for example. The price is not prohibitive, the license is easy to understand, while fonts are very well made and receive occasional free updates. reply sph 16 hours agoparentMy experience with commercial fonts is not great: I have had PragmataPro in my wishlist for a decade. I then bought it, to discover, for some reason, KDE doesn&#x27;t render it correctly and it&#x27;s twice as bold as it should be. In GTK4 apps it is decent, but everywhere else it is not the same look of the official screenshots.Same with Berkeley Mono, which I got the free trial version and it is a little blurry in Emacs, that kind of peculiar blurriness of fonts that have never been tested on other OSes. Most fonts are perfect on Linux, so those commercial ones might require some tweaks to be compatible with other engines, and I don&#x27;t see any font designer taking the time to test on Linux.So while I would want to support indie font designers, because of my \"weird\" environment, I should probably stick to the free ones that I can just swap out if they don&#x27;t render correctly.It sucks to have spent €150 for a font that doesn&#x27;t render well. I don&#x27;t want to ask for a refund because it might one day work on my system and ages ago I used the pirated version, which incidentally worked just fine on Linux at the time.(Before anyone mentions my font stack is broken, I assure you it ain&#x27;t, and it the closest to macOS&#x27;: hidpi monitor, 2x scaling, grayscale aa, no hinting. Everything looks gorgeous, except those two commercial fonts) reply CharlesW 16 hours agorootparent> I have had PragmataPro in my wishlist for a decade. […] KDE doesn&#x27;t render it correctly and it&#x27;s twice as bold as it should be. In GTK4 apps it is decent, but everywhere else it is not the same look of the official screenshots.The typeface designer can&#x27;t fix broken&#x2F;inconsistent OS rendering. Still, I would&#x27;ve asked for a refund so the creator is aware and could avoid other potential customers. reply folmar 10 hours agorootparentprevMany font sellers give a small subset as a sample in the same format as the full download so that users can test.But I would still contact the designer&#x2F;seller even if only to just let them know. reply cschmidt 14 hours agoparentprevYes. If you ever find yourself buying a webfont for your latest website or logo, always see if you can buy it direct from the designer. Monotype takes a huge (like >50%) cut if I remember correctly.For example, my last project I used MD System from Mass Driver for the web fonts (https:&#x2F;&#x2F;mass-driver.com&#x2F;typefaces&#x2F;md-system) and Denton from Peregrin Studio (https:&#x2F;&#x2F;peregrinstudio.com&#x2F;work&#x2F;denton) for my logo. reply kstrauser 16 hours agoparentprevI bought Berkeley Mono largely for that reason. First, it&#x27;s a great font that I love using. Second, it&#x27;s a passion project from a small shop that cares a whole awful lot for the work and doing it right. reply strogonoff 5 hours agorootparentBerkeley Mono looks good and fairly priced (for personal development), and I like that they offer both ligature and ligature-free versions. Might add to my collection. reply toastal 7 hours agorootparentprevI really wanted to pick it up, but it lacks a lot of Unicode symbols which for some is a bit of a joke since they come in ‘ligature’ form. reply caesil 17 hours agoparentprevMyFonts is a very convenient marketplace. Perhaps the indie designers should band together and create something like that of their own. reply CharlesW 16 hours agorootparentMyFonts sells typefaces by hundreds of foundries and thousands of independent type designers.https:&#x2F;&#x2F;foundrysupport.monotype.com&#x2F;hc&#x2F;en-us&#x2F;articles&#x2F;360028... reply isanjay 17 hours agoparentprevCan you list out the fonts you like ? reply blechinger 16 hours agorootparentI often default to one of the Iosevka variants. https:&#x2F;&#x2F;typeof.net&#x2F;Iosevka&#x2F; https:&#x2F;&#x2F;github.com&#x2F;be5invis&#x2F;IosevkaI use a customized set for terminal&#x2F;IDE and like Aile for documents. Etoile is neat. Feels typewriterish. All covered by the SIL Open Font License. reply bitwize 12 hours agorootparentIt&#x27;s not Iosevka (really, what else can come close except maybe Envy Code R), but I have recently discovered Victor Mono and think it an attractive programming font: https:&#x2F;&#x2F;rubjo.github.io&#x2F;victor-mono&#x2F; reply jxf 17 hours agorootparentprevNot OP, but I like PragmataPro [0] by Fabrizio Schiavi and use it in my IDEs. I particularly appreciate his attention to glyphs in languages other than English, and how nice it looks (IMO) for console interfaces and box drawing [1].[0] https:&#x2F;&#x2F;fsd.it&#x2F;shop&#x2F;fonts&#x2F;pragmatapro&#x2F;[1] https:&#x2F;&#x2F;fsd.it&#x2F;wp-content&#x2F;uploads&#x2F;diagram.png.webp reply strogonoff 5 hours agorootparentHis licensing model is somewhat confusing to me to be honest. reply candiddevmike 17 hours agorootparentprevWhat&#x27;s the difference between app and website aside from the huge price increase? reply jxf 17 hours agorootparentYou&#x27;d have to ask Fabrizio. I assume desktop is the cheapest because it&#x27;s just you, and app&#x2F;website is more expensive because there&#x27;s some nontrivial risk you expose the font files in a way that others can get them for free. reply vbezhenar 12 hours agorootparentOf course you&#x27;ll expose them. It&#x27;s not a risk, it&#x27;s how things work. reply jxf 8 hours agorootparentI mean \"expose\" in the sense that you might expose the files in an unlicensed way, not just that the files are available. replyovervale 17 hours agorootparentprevHere are some of mine:https:&#x2F;&#x2F;mbtype.com&#x2F;https:&#x2F;&#x2F;fsd.it&#x2F;shop&#x2F;fonts&#x2F;pragmatapro&#x2F;https:&#x2F;&#x2F;tosche.net&#x2F;fontshttps:&#x2F;&#x2F;berkeleygraphics.com&#x2F;typefaces&#x2F; reply strogonoff 7 hours agorootparentprevI used his Triplicate monospace font as my main IDE&#x2F;terminal driver for about a year, and I think in a couple of logo sketches. His other fonts look good as well, if I get to do more visual design again I might get some of them too. reply cmod 10 hours agorootparentprevKLIM in New Zealand does outstanding work: https:&#x2F;&#x2F;klim.co.nz&#x2F; reply glogla 17 hours agoparentprevMB is not just a knowledgeable about typography and fonts, he also published his online book using his own software he built in Racket. Definitely a true hacker! reply mistrial9 17 hours agoparentprevthis is a great and virtuous cycle, to name and do business with small publishers and artisans (!)reality check - do not expect to survive financially yourself in the tornado of modernity without a small niche to fit somewhere and security from elsewhere reply II2II 17 hours agoprevIt appears as though the real problem is address near the end of the article under a heading that has nothing to do it: Monotype is switching to a subscription model that will likely weigh strongly in their own favor, and there is little that anyone can do about it since they are essentially a monopoly.Most of that was buried under a heading about AI.While the handful of sentences addressing AI were dismissive, my initial thoughts were directed towards the opening paragraphs of the article. They were describing a case where the creator received $12 in royalties for a font used in a major film. The irony is the font emulated handwriting, which is the sort of font that would benefit from all too human variation even if that human variation is emulated by a machine (e.g. using AI). reply bemusedthrow75 17 hours agoparentMaking a font from one&#x27;s own handwriting is an intriguing experience even if you don&#x27;t go for cursive.I decided I wanted my own (rather idiosyncratic) handwriting to use in some training materials, and an evening spent with a cheap and cheerful iPad app gained me a font to use for labels and captions. It&#x27;s slightly eerie to see it. reply thechao 16 hours agorootparentWould you mind saying which app? I&#x27;ve always wanted to do this!EDIT: especially if it supports ligatures. I have some whacky ligatures that are distinctive to my handwriting. reply bemusedthrow75 16 hours agorootparentIt was absolutely ages ago now, it might not still be around (I have a feeling it is one of the apps that didn&#x27;t make it to 64 bit iOS).Can&#x27;t remember if it did ligatures.I will look through my purchases shortly and edit this&#x2F;comment again...Edit: it was iFontMaker. And it&#x27;s still around! I might have to have another go with this, because I last used it so long ago that I was using one of those rubber-tipped Wacom passive stylus things... reply gcanyon 16 hours agorootparentprevNot OP, but a quick search found this, which is apparently not free: https:&#x2F;&#x2F;apps.apple.com&#x2F;us&#x2F;app&#x2F;fontmaker-font-keyboard-app&#x2F;id... reply Animats 15 hours agoparentprev> Monotype is switching to a subscription modelThat&#x27;s big news. You have to pay a font bill for your site every year? reply bemusedthrow75 17 hours agoprevThis is, frankly, why one should approach all the \"why should you use commercial, licensed fonts?\" blog posts with a jaded eye.There are so many \"they may have missing glyphs\", \"free fonts may breach copyright\", \"there&#x27;s no support\" stories. And they amount to FUD from blog sites that don&#x27;t talk openly about being on commission from commercial exchanges.If you want great results on a website in particular, you could use a system font stack (which is often kinder on your users) or a common readable open font for body text, and then consider paying a brand designer with experience designing fonts to design a caption&#x2F;headline typeface paired with it just for your own use. Or you could pair a system font with an existing font from an indie designer that does not use a font-serving CDN or have per-view licensing rules.But there are high quality fonts in Google fonts that you can easily extract (the Create Block Theme plugin for Wordpress will now install Google fonts locally) and there are font-pairing tools that can help you make good decisions.This is one of those things that has just moved on. There are so many ways to do this that don&#x27;t involve stolen fonts. reply jsmith99 16 hours agoparentThere are plenty of excellent open source fonts with full glyph support and perfect kerning etc. But many are overused. If you use something like Raleway or other popular fonts, visitors will have a subconscious sense of familiarity and associations which you may or may not like. If you want something distinctive it&#x27;s hard to avoid commercial fonts. reply tptacek 16 hours agorootparentOr you can just assume that distinctive letter shapes are not a problem you need to go out of your way to solve, and move on with your life, right?I think it&#x27;s good to remember that there is a species of online person call \"the font nerd\" (I know because I am one and have font nerd friends), and font nerds would very much like it to be important to select interesting type combinations, and many are not above rationalizing urgencies for that hobby. But I doubt anybody in the real world actually cares. Look at the site we&#x27;re on! reply bemusedthrow75 16 hours agorootparentA wide variety of people in the real world -- designers, brand designers, accessibility designers, book publishers, teachers, avid readers -- absolutely care about this.I am often surprised by how much considered opinion non-professionals have about font choices, about readability etc.The site we&#x27;re on: I don&#x27;t think we are going to agree that this is the real world... ;-)(Ask anyone with dyslexia about typefaces and they can tell you a lot about what they like and don&#x27;t like. Tell them about typefaces designed with dyslexia in mind and they may love you forever. I totally changed someone&#x27;s life by introducing her to OpenDyslexic.) reply tptacek 16 hours agorootparentSo: professional font nerds care. And there are pathologically bad choices to make that make pages unreadable to people with reading difficulties. I think my argument admits both of those amendments without really bending all that much. reply bemusedthrow75 16 hours agorootparent> So: professional font nerds care.I think I listed a broad enough constituency to rebut that claim. But I would agree that bad font choices (as well as bad colour contrasts) are a significant downside of all the flexibility. reply tptacek 15 hours agorootparentJust because this is fun:\"designers, brand designers, accessibility designers, book publishers\" are all professional font nerds.Teachers and \"avid readers\" might not be, but I dispute that either of those groups cares as much about font selection as font nerds wish they did. reply thereisnojesus 14 hours agorootparentprevYou sound like an artist and not a professional designer. reply bemusedthrow75 14 hours agorootparentI don&#x27;t know what this means.Are you saying professional designers don&#x27;t care about this stuff?I&#x27;m a developer with front-end skills; I&#x27;ve spent a lot of time around professional designers for 27 years and I usually implement people&#x27;s style guides.(I&#x27;m also a photographer, which should disqualify me from claiming to be an artist) reply saltcured 14 hours agorootparentprevWe could argue for purely functional, utilitarian priorities. But it seems a large fraction of humanity is very susceptible to form over function. Pretending that I think this is testable, I would wager that most people who \"care\" about fonts in the general population are driven by the same fashion mechanisms as in clothing and other product consumption.And I don&#x27;t mean that they have to be aware they are bound like this... many are driven subconsciously by fashion concerns even when they construct other rationalization for their preferences. Humans are intensely social and can turn nearly any kind of visible behavior or marking into a social signal.A very small number might actually be concerned with actual usability&#x2F;human factors of fonts, but most are in it for the tribal aspects of associating font usage with other \"brand\" or tribal identities. For the amateur producers, this can lead to cargo-cult emulation of the producers they admire. Even dissent here can fall into the same trap---consider how many times you&#x27;ve seen a LaTex document from a student who wants to be an author of a computer science paper, but doesn&#x27;t really have anything to say (yet?)... reply tptacek 14 hours agorootparentDon&#x27;t get me wrong. As I said, I&#x27;m a font nerd. My old blog has fonts I paid actual money for, which was otherwise exchangeable for goods and services in the real world.I like fonts. I get why people like fonts. I just don&#x27;t think they matter.Now, if Computer Modern was an important professional signal, and it was the case that Monotype owned its copyright and rapaciously charged for its use, that would matter quite a bit. But that&#x27;s not the case; ironically, the one font we can think of that has professional implications is under an open license.There is a battery of commonly-used fonts (the Microsoft fonts, we might as well call them) that are professionally important. But they&#x27;re also universally available; they argue against the idea that font licensing is all that meaningful, as well. reply ipaddr 15 hours agorootparentprevThe average person may not notice but they are being influenced. Fonts convey meaning and emotion like a picture. reply tptacek 15 hours agorootparentI disagree with your implication that this is really meaningful. reply bemusedthrow75 16 hours agorootparentprev> If you want something distinctive it&#x27;s hard to avoid commercial fonts.I get what you mean -- Lobster is everywhere in the summer, and it is cute but now noticeably cheap.But again I tend towards thinking that this is an over-egged pudding, because truly distinctive commercial fonts are as likely to have negative associations, surely? Unless you&#x27;re buying something that nobody else uses, and that has the same support issues as these blogs try to scare people with.If you want something truly distinctive, you can pay for someone to make a font suite for you, and you can consider your own needs.The BBC have for example been transitioning their sites for years over to their \"Reith\" font family, which has enhanced readability and rather fewer confusable pairs. ITV (the original and largest commercial TV channel in the UK) has their own typeface, \"Reem\", which is rather nice work (classier than most of their TV content).A pragmatic approach for many producers would be to pick a well-considered open-licensed sans or serif face and get a font designer to produce something distinctive (that need not be a truly complete face) to pair with it for captions, logotype, alternates etc. reply fsckboy 16 hours agorootparentprev>There are plenty of excellent open source fonts with full glyph support and perfect kerning etc.that&#x27;s not the problem, the problem is that there are 100x as many which are not excellent, have terrible kerning, etc. and sorting between them is really time consuming. Not to mention the category of \"90% of the way there\" knockoffs where you can&#x27;t (because you&#x27;re not an expert) tell till later that you&#x27;re working with something really lame. If you&#x27;re not a graphic designer, it&#x27;s really difficult to navigate.(and don&#x27;t read that as an endorsement of graphic designers, hire those and you&#x27;ve just added a lot of form bathwater, out from which the function baby will be thrown :) reply FireInsight 16 hours agorootparentprevTalk about overused, anyone else seeing Space Grotesk absolutely everywhere? reply sbuk 3 hours agorootparentThat’s what it’s called! Horrible typeface. I hate the flat decenders on the “g” and the “y”. reply bemusedthrow75 16 hours agorootparentprevNot in the UK... but maybe now I will see it everywhere! reply LinuxBender 17 hours agoprevI&#x27;ve never really thought about this. Perhaps I missed it from the article and maybe this is a dumb question but is there a font that is truly open source, royalty free and recognized &#x2F; built-in to browsers? Is there such a thing as a royalty free font family that the popular browsers would all recognize by name? Could that even become a legal battle?Monotype owns most major fonts: Arial, Helvetica, Gotham, Times New Roman. font-family:Open Sans,Arial font-family:monospaceIf I use any of those in HTML can someone claim royalties on my text? Should this concept itself become a font family? e.g. font-family:royalty-free and let the client decide on their favorites royalty-free fonts? reply bemusedthrow75 17 hours agoparentNo. The OS platforms have broad system licences for those fonts; your readers will also have those licences.The royalty is being paid in the OS licence attached to the viewer&#x27;s computer, basically.There are meta-font-families for system fonts, and you can effectively use \"monospace\", \"serif\", and \"sans serif\" and the system is going to choose the typeface that best meets those requirements. reply pakyr 16 hours agorootparent> The royalty is being paid in the OS licence attached to the viewer&#x27;s computer, basically.So who is paying for Linux? Or is Linux using open source alternatives to these fonts? reply adrian_b 16 hours agorootparentSome Linux users buy themselves whatever fonts they like, e.g. from one of the many on-line stores.Most Linux users use only free fonts, some of which are metrically equivalent with the more popular Windows fonts, so they will substitute those in documents and Web pages.Some Linux users, like also some of the users of other operating systems, may use unlicensed copies of some popular fonts. reply ars 16 hours agorootparentprevMicrosoft is. They actually made them available for anyone to use everywhere because they wanted them to be standard on the web.See: https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Core_fonts_for_the_Web reply adrian_b 16 hours agorootparentMost of those fonts donated by Microsoft are only among the fonts owned by Microsoft, e.g. Georgia and Verdana.They have included only a few fonts licensed from Monotype, e.g. Arial.Besides the fonts donated by Microsoft, there are many other free fonts that have been donated by big companies like Google, Adobe, Intel, URW, Bitstream, JetBrains and others.There are also many free fonts donated by individual creators. reply bemusedthrow75 16 hours agorootparentThe fonts in that package were not donated, but licensed -- it had an EULA.But the versions of the font files in that package are rusting at this point; there&#x27;s no compelling reason to use them anywhere, IMO. reply adrian_b 16 hours agorootparentYou are right that perhaps the word \"donate\" is not the most appropriate, because for typefaces, like for programs, the author does not normally transfer ownership but only grants certain rights for using the typeface.By \"donate\" I have meant that the typeface owners have forsaken the revenues corresponding to the licensing fees that they have stopped demanding, allowing the free use of those typefaces. It can be said that they have donated the value of the work that was needed to create those typefaces.You are also right that now this Corefonts package is mostly of historical interest, because the included fonts are very old. Unlike these, the corresponding Windows fonts have been maintained, by fixing bugs and adding new Unicode characters. reply IshKebab 16 hours agorootparentprevLinux uses free fonts like Open Sans, Roboto, etc. reply LinuxBender 16 hours agorootparentprevInteresting. That has activated more questions in my noggin. Now I am more curious than anything how much each of the OS and browser vendors are paying in royalties. Beyond that of course there are browser forks usually managed by a handful of developers volunteering their time. Are those forks a legal ticking time bomb? I would be surprised if they strip out the code for the non system fonts. reply bemusedthrow75 16 hours agorootparentThe browser will generally be relying on the system font renderer, so they kick that particular can down the road.For a time, Microsoft had a package of \"core fonts for the web\" that they made some deal with Monotype for:https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Core_fonts_for_the_WebThose are still out there because the licence for those specific files remains legitimate, though a 21 year old typeface is not necessarily a useful thing anymore.That package was used as the basis of \"nonfree\" packages in various distributions, that would download the MS archive file and unpack&#x2F;install it.I also wonder about how much Monotype charges Microsoft.Ubuntu of course paid for their own system faces to be designed (which I like but not enough to use on my desktop). And Firefox has its own core font family (Fira), for example, that it can use in its own products as an alternate (I think it was designed for the late not-much-lamented Firefox OS) reply divs1210 16 hours agorootparentprevwhat about linux? reply bemusedthrow75 16 hours agorootparentAnswered elsewhere I think. But basically there are open source fonts now (Roboto, Open Sans, Liberation, Adobe&#x27;s Source family) as well as distinctive fonts like Ubuntu, and a legacy way to get the core fonts.Linux can (with quite a bit of pain) use font alternatives to swap in Liberation Sans for Arial or whatever (at least I assume that is what is happening) reply LinuxBender 15 hours agoparentprevThe more I think about this and based on the really good answers to my silly question it feels like there is a giant gap here. Feels... It feels like there should be a universally open source, royalty free sans-like and monospace-like font that has been optimized for screen readers for vision impaired as well as developers to spend hours&#x2F;days coding in and contributed to the internet for all devices to use. I have no evidence to back this up, it&#x27;s just a feeling.Not a font to download or embed but rather a set of fonts that is already embedded in all the things so anyone could just reference it. So in CSS something like: font-family:open-free-monospace font-family:open-free-serifRather than providing a URL to download the fonts, everything already has the fonts preinstalled. OS, IoT, toasters, cars, phones. All the things. Surely there must be a set of highly artistic altruistic people that might wish to contribute such a thing to humanity. reply tomxor 16 hours agoparentprev> Is there such a thing as a royalty free font family that the popular browsers would all recognize by name?Yes \"Liberation Fonts\" [0]> [...] compatible with the most popular fonts on the Microsoft Windows operating system and the Microsoft Office software package (Monotype Corporation&#x27;s Arial, Arial Narrow, Times New Roman and Courier New, respectively), for which Liberation is intended as a free substitute.e.g The Debian package is here, which I you need to install to get sites to not look wonkey in the official Firefox package: https:&#x2F;&#x2F;packages.debian.org&#x2F;bookworm&#x2F;fonts-liberation.I suspect packaged linux browsers through snap, flatpak, and the windows&#x2F;macos equivalents, also bundle liberation fonts to avoid MS license issues.[0] https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Liberation_fonts reply nickisnoble 15 hours agoparentprevNo because the point of system fonts is that whoever made your operating system has already paid the license fee to be able to render text using that typeface.Monotype has such deals across the board. reply tptacek 17 hours agoprevSpeaking as a type nerd: there is nothing in the universe less essential than a couture typeface. So what if Monotype obtains a monopoly on all of them? reply AndriyKunitsyn 7 hours agoprevThe article fails to explain how the alleged monopoly of Monotype hurts smaller type foundries. Reads almost like a hit piece. There&#x27;s some story about an independent author not having a legal team to protect from fonts stealing... d&#x27;uh. It&#x27;s a comment on the US legal system, not on how bad Monotype is.Making fonts is technically easy. FontForge is open-source. If you don&#x27;t want to sell fonts through Monotype, nothing stops an independent artist or a company from keeping the books and dealing with payment process by themselves. And there is a lot of smaller companies who do that, not only Adobe and Google. reply qawwads 17 hours agoprevA few words toward the end for the ellusive ai menace, but zero word for the real, already existing, open source fonts. Nowaday I&#x27;ll consider IBM Plex, Mozilla Fira or even Google Roboto before Monotype Anything. reply bemusedthrow75 17 hours agoparentNot least because Fira is really beautiful.Lato is another superb open licenced face. reply j16sdiz 16 hours agoparentprevFor long text, sure.but most font are used for decorative use reply jwilk 17 hours agoprevPlease don&#x27;t editorialize submission titles. reply toyg 16 hours agoprev> Much of their earnings go back to Monotype, which takes a 50% cut of every sale on its site. (Creative Market similarly takes a 50% commission fee, while Etsy charges 20 cents per listing and takes a 6.5% fee for every sale.) This is an aspect of one (if not \"the\") major issue for capitalist economies in this century. A functioning capitalist market must have effective and fit-for-purpose anti-monopolistic measures. In the era of the web, this means:- separating content distribution (i.e. stores) from platform development (i.e. OSes, but also font-making tools, etc) and content itself (i.e. apps, fonts, movies)- capping distribution fees. Anything above 10% is obscene.Businesses should not be allowed to turn content-acquisition sprees or platform development into market-making distribution channels that result into self-reinforcing monopolies. Businesses should not be allowed to arbitrarily held entire production sectors effectively to ransom, imposing fees that in every other sector would be called exploitative and illegal.Amazon, Google, Apple, Monotype - they are all aspects of the same problem. Anyone serious about ensuring a lively competitive landscape in modern economies should try to fix this problem. Otherwise, by 2050 the economic landscape will be dominated by immovable rent-extracting giants that will hoover every cent and limit innovation. reply bradley13 16 hours agoprevModern business strategy: buy up the competition, until you are effectively a monopoly. After that, start milking you position for all its worth.This is what antitrust legislation is supposed to prevent. But the regulators and politicians are asleep (or bought off). reply zx8080 9 hours agoprevTo be honest, I don&#x27;t care much whether I see fancy proprietary rare font or the opensource one on a web site or a newspaper, or even in an app. I just need to see not awful letters to read words.You know who cares? Marketing people. Probably, ads industry is the biggest fonts purchaser. Also, big enterprises like banks and other fintech, who has behemoth apps and they like to have some unusual (-ly inconvenient) mobile apps and web sites.The regular users market just don&#x27;t need that many fonts as presented at MyFonts.Then it&#x27;s not surprising why big companies pays only $12 per font. It&#x27;s their market. Not a font designers one. reply hannes0 17 hours agoprevAt least their name is well chosen reply tptacek 17 hours agoprevThe right title for this post is \"Where do fonts come from? This one business, mostly\".https:&#x2F;&#x2F;hn.algolia.com&#x2F;?dateRange=all&page=0&prefix=true&que... reply jxf 17 hours agoparentI love when searches are also answers. reply tiffanyh 16 hours agoprevEye glasses & lens.Even bigger than fonts, one company has a virtual monopoly on all eye glasses and lens.https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Luxottica reply innocenat 16 hours agoparentI don&#x27;t know. English fonts are used pretty much everywhere in the world. Luxottica, however, doesn&#x27;t hold virtual monopoly in many regions. reply tiffanyh 15 hours agorootparentAnd Linux&#x2F;Android is the most popular OS in the world and all of its included fonts are free (not using Monotype fonts).The article is conflating “where fonts come from” to imply meaning all fonts. But it’s really meaning where all PAID fonts come from.Free fonts like Roboto, Inter, Open Sans etc are used significantly more than any single paid Monotype font.Back to eye glasses, I don’t know anyone making free frame & lens at mass scale. That industry is all paid product. reply wcerfgba 16 hours agoprevEvery major brand is owned by a minority of multinational conglomerates. 90% of the money we spend in shops and online goes to a number of companies you could count on one hand. This issue is not restricted to fonts. reply BLanen 16 hours agoprev> In 1440, when Johannes Gutenberg invented the printing pressWell, it starts wrong. We&#x27;ve been printing for quite a while already and he didn&#x27;t even invent removable lead type. reply firecall 10 hours agoprevBefore the Internet, Fonts in the DTP world were two things:1) Expensive2) A Black Market CommodityPeople would have SyQuest drives full of fonts. Carefully labeled and organised.A bad font would bring down your Mac.A friend with a well managed Font library was a very valuable friend indeed! reply zeroimpl 15 hours agoprevInteresting. I use fonts.com which apparently is also Monotype. The illusion of a competitive market. reply scoofy 15 hours agoprevI wish someone would just use ML to pump out more fonts than we could ever need, none missing any characters because they could be constantly added to, and none of them would have copyright because they are ML created.I would buy that person a beer. reply op00to 16 hours agoprevArticle was unreadable on iOS, constantly reloading. reply replwoacause 17 hours agoprevThe site is completely unusable on iOS Safari reply CharlesW 16 hours agoparentFWIW it works perfectly on iOS 17, with the caveat that I use 1Blocker and Rekt. reply kabr 17 hours agoparentprevIt helps to use the Reader View reply replwoacause 17 hours agorootparentThanks, I tried that though and it just kept force reloading the page and wouldn&#x27;t stay in Reader View for longer than a few seconds. reply gjsman-1000 17 hours agoprevI’m surprised more people here haven’t heard of them. reply PartiallyTyped 17 hours agoparentIt&#x27;s definitely a TIL moment for me, and a mind-blowing one at that. reply irrational 17 hours agoprev> Monotype endured financial difficulties and restructurings, eventually being acquired by the Boston private equity firm TA Associates in 2004> In 2019, private equity firm HGGC bought Monotype for $825m, acquiring its roster of typefaces and setting it up for even more acquisitions.Can we just make private equity firms illegal?I enjoy playing board games. There is a company called Asmodee that was bought by a private equity firm, went on a series of acquisitions and mergers, sold to a different private equity firm (who are currently looking for a new private equity firm to sell to). So many things have gone downhill for boardgaming since private equity got involved. Prices went up, they made it more difficult to get replacement parts, they killed off many products and made a shell of formerly beloved companies like FFG and so much more. Is there actually an example of private equity being a good thing (I mean, other than for the rich people that benefit from the private equity)? reply fsloth 17 hours agoparent”Private equity” in general may just mean some familys wealth -that may be managed in some unified manner.I don’t think you can outlaw buying stuff in the genral sense. Ofc there is specific legsilation to defend the market at large from monopolies.But the fact is some people collect stamps … other collect companies.In general the whole point of ownership is that you can buy and sell things.There is nothing to stop a new owner destroying a beloved IP. reply voisin 17 hours agoparentprev> Can we just make private equity firms illegal?Not without upending capitalism (which, to be clear, I’d be ok with). The thing you are against isn’t private money buying entities, it is that our capitalist system does not align interests among stakeholders and instead is focused 100% on shareholder returns. We need better consumer, employee, environmental protection and to get money out of politics. Easier said than done… reply terminous 17 hours agoprevCTRL-F for \"open source\", no hits.What a glaring omission. There are tons of open, freely licensed fonts: https:&#x2F;&#x2F;fontesk.com&#x2F;license&#x2F;ofl-gpl&#x2F; reply rapnie 17 hours agoparentHa. Nice touch, this one: https:&#x2F;&#x2F;fontesk.com&#x2F;x-company-font&#x2F; reply marc_io 16 hours agoparentprevDownloading and using fonts available on Fontesk can be a huge trap. Read it&#x27;s “Licensing” page. It&#x27;s simply not safe to use fonts downloaded there, one should really use it only for discovery, at best. reply hgs3 16 hours agoparentprevGoogle has an entire catalog of open source fonts [1].[1] https:&#x2F;&#x2F;developers.google.com&#x2F;fonts reply conkeisterdoor 16 hours agoparentprevIosevka is a fantastic open-source font that&#x27;s fully customizable. I have replaced the fixed font on all of my devices and apps to a custom Iosevka build I made, and I don&#x27;t think I&#x27;ll ever turn back.https:&#x2F;&#x2F;github.com&#x2F;be5invis&#x2F;Iosevka reply dfee 17 hours agoprevI’m going to complain about cookie pop-ups, but see me out: https:&#x2F;&#x2F;veed.io&#x2F;view&#x2F;1a675b8d-cbc2-4c24-b10f-f91f7a0b8cfeThat stuttering is me trying to scroll. When I finally can, I’ve been subject to a 10s penalty. reply pwg 17 hours agoparentWith Ublock Origin set to block all the Javascript, there are no cookie popups and no scroll breakage. reply fanatic2pope 17 hours agoparentprevSwitching to reader view fixes this kind of thing, although some sites seem to be able to block it now. reply dawnerd 17 hours agoparentprevThe site constantly reloads for me in iOS and is unusable. reply darinpantley 15 hours agorootparentI saw the same behavior in iOS, but switching to the desktop version of the site worked normally. reply wredue 17 hours agoparentprevThat’s not cookie pop ups. That’s functional programming strategies poisoning the brains of developers causing them to believe that rewriting their page on every request is preferable because otherwise they have to think about “70,000 page states”.They’re trading user experience for a mythical silver bullet of programming that some dude on medium told them was the holy grail and proved it using simple, horribly contrived anecdotes. reply poorlyknit 17 hours agorootparent> rewriting their page on every requestThat&#x27;s not how virtual DOM works.EDIT: Also the concept of \"virtual DOM\" is way older than shitty websites themselves (was applied to native GUI stuff before JS was even a thing). What you&#x27;re seeing is just a shitty website. reply gedy 17 hours agorootparentprevThat page does not use React afaict, if that is what you are getting at. reply kyleyeats 16 hours agoprevIn a year you&#x27;ll be able to use a custom new font for every project. reply housemusicfan 17 hours agoprev [–] Are we supposed to be upset by this? That we&#x27;re all slaves to Big Font?It happens that many of the free fonts are crap, and part of the reason Linux on the desktop never took hold was lack of good bundled fonts. As it turns out, good fonts cost money. reply Sunspark 17 hours agoparentThere are plenty of good free fonts.What was part of the problem was patent-encumbered rendering engines for a long time.Fonts weren&#x27;t what held the desktop back, what held it back was that it just didn&#x27;t have the resources that commercial enterprises were and are able to pour into their own efforts.With commercial, you have a manager in the boardroom that says here are the whiteboards of how it should look, now go make it and have it done by next week so marketing can tell everyone this is what they wanted. With open, you have a bunch of introverts who have to agree to talk to each other and not hate the other guy&#x27;s idea too much. reply klodolph 17 hours agoparentprevYeah.Although I think part of the problem is just how much of a nightmare Fontconfig is. I dealt with fonts on Windows and macOS, and there were a ton of hoops you have to jump through if you want tight control over how you display text on-screen. But Linux was in a whole other realm altogether—you used Fontconfig to select your font, and Fontconfig is truly, truly awful.Yeah, I know what its capabilities are. But the best software which uses fonts on Linux tends to do so bypassing Fontconfig.It was slow, slow, slow getting good font rendering on Linux. reply pupppet 17 hours agoparentprevWhenever I consider Linux, I notice the shitty fonts and wonder what are its other glaring omissions. Probably an ignorant thought, but I can’t be alone. reply adrian_b 17 hours agorootparentEspecially in the past, but even also today, most Linux distributions have indeed installed by default shitty free fonts, which were the main reason why the GUI of a default Linux installation looked much uglier than that of a default Windows installation or of a default Mac OS installation.Nevertheless, the default fonts can be deleted and replaced with nice fonts, which can make any Linux look better than Windows or Mac OS.I have been using for the last 20 years only Linux on all my desktops and laptops, but since the very beginning I have never used the default Linux fonts, but I have always replaced them immediately with beautiful fonts.When I have started using Linux, it was much more difficult than today to find good free fonts, so I have bought many good typefaces from companies like Linotype, which no longer exists, because as mentioned in this article it has been bought by Monotype, or from Adobe, which appears to be the last big commercial vendor of typefaces which has not been bought yet by Monotype.Nowadays, it is much easier to find good free fonts. Especially for programming and CLI windows there are a lot of very good free fonts from which to choose.For proportional typefaces, it can be a little more difficult to find good free fonts, though there is always the solution to grab some fonts from Windows or Mac OS. I have stopped using Mac OS more than a decade ago, but I have still kept from it a Japanese typeface that I have liked and then I have continued to use on Linux, while from my last Windows I have kept Palatino Linotype for polytonic Greek.So if some people use shitty fonts on Linux, that is their fault, not of Linux, because it cannot be expected for a free product to include good licensed typefaces, like those whose price is included in that of a Windows license or Mac OS license. reply __MatrixMan__ 17 hours agorootparentprevHuh, well that&#x27;s a new one. I use linux all the time, so I guess I don&#x27;t know what non-shitty fonts look like? reply bemusedthrow75 16 hours agorootparentThe Ubuntu font for example is definitely not shitty -- it was designed at Dalton Maag and it is a considered piece of work that a lot of typographers rather like.It&#x27;s definitely rather idiosyncratic, mind you.So I don&#x27;t personally use it on Linux. I use Google&#x27;s Roboto, which is close enough to Apple&#x27;s later San Francisco (which shares some common heritage and some common modern touches) that I don&#x27;t go insane when switching between the two!Roboto is again a considered bit of work by a highly competent designer.I don&#x27;t have problems with either. If I did, I could use the Fira suite, which is lovely. reply II2II 16 hours agorootparentprevPersonally, my use of fonts are more utilitarian. In that context, the fonts shipped with a typical Linux distribution are perfectly usable and far from shitty. While I would expect someone who has more of an eye for design to have more discerning tastes, I would be surprised if many people shared an opinion as extreme as yours or mine. (I suspect that they would be more inclined to notice the quality of font rendering or missing favorite fonts than anything else.) reply JJMcJ 16 hours agorootparent> far from shittyIn a world where Arial Illegible is the standard, I don&#x27;t think we can complain too much.FOSS doesn&#x27;t as a whole pay much attention to visual aspects, one reason so much of the software just doesn&#x27;t look nice. E.g., GIMP. reply serf 16 hours agorootparentprevmy experience migrating from win98&#x2F;2k to linux was totally the opposite.linux distros were some of the first to use proper LCD hinting and anti-aliasing on the fonts, so they always looked buttery smooth and polished when compared to the Microsoft offering at the time.Funny how things shift around. reply benzin 17 hours agoparentprev [–] This is actually on my current todo list - replacing textedit with Helvetica to make notes on MacOS, with Featherpad and ??? font on Debian. Didn’t seem important but the default is so damn ugly. replyGuidelinesFAQListsAPISecurityLegalApply to YCContact Search:",
    "originSummary": [
      "Monotype, a dominant player in the font industry, is posing challenges for independent font designers who struggle to compete and make a living.",
      "Monotype's market dominance and acquisitions make it difficult for independent designers to thrive, as they take a significant portion of their earnings.",
      "Independent designers also face issues with unauthorized use of their fonts by big corporations.",
      "Monotype is planning to introduce a subscription model for its MyFonts marketplace, raising concerns that it may primarily benefit Monotype.",
      "Monotype is exploring the use of AI for font discovery, but font designers argue that AI cannot replicate the human story and meaning behind fonts."
    ],
    "commentSummary": [
      "The discussion encompasses various aspects of fonts, such as their origins, copyright concerns, and support for independent designers.",
      "Participants engage in conversations about font rendering on different operating systems and the selection and combination of fonts for design purposes.",
      "Monopolies in the font industry and the influence of private equity firms are also explored, with a focus on the availability, quality, and effectiveness of open-source and commercial fonts."
    ],
    "points": 313,
    "commentCount": 157,
    "retryCount": 0,
    "time": 1693151656
  },
  {
    "id": 37284487,
    "title": "111,111.1 meters is reliably 1 degree of latitude",
    "originLink": "https://gis.stackexchange.com/a/2964/5599",
    "originBody": "Log in Sign up Geographic Information Systems Stack Exchange is a question and answer site for cartographers, geographers and GIS professionals. It only takes a minute to sign up. Sign up to join this community Anybody can ask a question Anybody can answer The best answers are voted up and rise to the top Home PUBLIC Questions Tags Users Unanswered TEAMS Stack Overflow for Teams – Start collaborating and sharing organizational knowledge. Create a free Team Why Teams? Algorithm for offsetting a latitude/longitude by some amount of meters Ask Question Asked 12 years, 10 months ago Modified 1 year, 1 month ago Viewed 274k times 169 I'm looking for an algorithm which when given a latitude and longitude pair and a vector translation in meters in Cartesian coordinates (x,y) would give me a new coordinate. Sort of like a reverse Haversine. I could also work with a distance and a heading transformation, but this would probably be slower and not as accurate. Ideally, the algorithm should be fast as I'm working on an embedded system. Accuracy is not critical, within 10 meters would be good. coordinate-systemalgorithmspherical-geometry Share Improve this question Follow edited Jul 26, 2016 at 21:23 PolyGeo♦ 64.9k29 29 gold badges 107 107 silver badges 329 329 bronze badges asked Oct 26, 2010 at 22:43 Thomas O 1,9833 3 gold badges 14 14 silver badges 11 11 bronze badges So you'd be fine modeling the earth as a sphere? – underdark ♦ Oct 26, 2010 at 22:54 1 Yeah, that would be fine as I'm expectingCLLocationDistance { let earthRadiusInMetersAtSeaLevel = 6378137.0 let earthRadiusInMetersAtPole = 6356752.314 let r1 = earthRadiusInMetersAtSeaLevel let r2 = earthRadiusInMetersAtPole let beta = latitude let earthRadiuseAtGivenLatitude = ( ( pow(pow(r1, 2) * cos(beta), 2) + pow(pow(r2, 2) * sin(beta), 2) ) / ( pow(r1 * cos(beta), 2) + pow(r2 * sin(beta), 2) ) ) .squareRoot() return earthRadiuseAtGivenLatitude } func locationByAdding( distance: CLLocationDistance, bearing: CLLocationDegrees ) -> CLLocationCoordinate2D { let latitude = self.latitude let longitude = self.longitude let earthRadiusInMeters = self.earthRadius() let brng = bearing.degreesToRadians var lat = latitude.degreesToRadians var lon = longitude.degreesToRadians lat = asin( sin(lat) * cos(distance / earthRadiusInMeters) + cos(lat) * sin(distance / earthRadiusInMeters) * cos(brng) ) lon += atan2( sin(brng) * sin(distance / earthRadiusInMeters) * cos(lat), cos(distance / earthRadiusInMeters) - sin(lat) * sin(lat) ) let newCoordinate = CLLocationCoordinate2D( latitude: lat.radiansToDegrees, longitude: lon.radiansToDegrees ) return newCoordinate } } extension FloatingPoint { var degreesToRadians: Self { self * .pi / 180 } var radiansToDegrees: Self { self * 180 / .pi } } Share Improve this answer Follow answered Jun 28, 2021 at 11:09 hbk 1012 2 bronze badges wow how can convert the last point in degree distance relative to first point ? – Cristián Vargas Acevedo Jul 14, 2022 at 15:16 Add a comment -3 Want to improve this post? Provide detailed answers to this question, including citations and an explanation of why your answer is correct. Answers without enough detail may be edited or deleted. Vincenty's direct formula should do the job. Share Improve this answer Follow answered Jul 27, 2020 at 1:34 Gil 1 4 Welcome to GIS SE! As a new user please take the tour. A good answer should be self-contained, and include all the steps and details required. Please edit your answer to add explanation as to how to use your suggestion, and why. – Midavalo ♦ Jul 27, 2020 at 1:54 Add a comment Highly active question. Earn 10 reputation (not counting the association bonus) in order to answer this question. The reputation requirement helps protect this question from spam and non-answer activity. Not the answer you're looking for? Browse other questions tagged coordinate-systemalgorithmspherical-geometry or ask your own question. The Overflow Blog If you want to address tech debt, quantify it first Fighting comment spam at Facebook scale (Ep. 602) Featured on Meta Moderation strike: Results of negotiations Our Design Vision for Stack Overflow and the Stack Exchange network Linked 0 Calculate new Lat/Lon from initial Lat/Lon plus Cartesian X,Y 1 Increment GPS coordinates by a certain distance given in meters 0 Can you correct calculate the coordinates of a position given time and distance 12 Scale and Z factor have no effect on hillshade analysis in QGIS 10 Converting 1 meter to decimal degrees using FME 7 Method to generate points in any projection 5 Quick way to determine if facing a given lat/lon pair with a heading 6 How can I compute raster pixel width and height given raster bounds, row count, and column count? 7 PostGIS: Convert meters to arbitrary spatial reference units? 6 java vividsolutions jts wgs-84 distance to meters See more linked questions Related 5 Quick way to determine if facing a given lat/lon pair with a heading 59 Calculating Latitude/Longitude X miles from point? 2 Converting latitude longitude coordinate to x y coordinate 1 Translating latitude and longitude into \"polar coordinates\" around a point 3 Lat/Lon point transformation/offset on arbitrary segment 0 Longitude to metres ratio given a latitude for Google Maps Static API stitching? 1 Euclidean Coordinates to Lat Long Based on Reference Location in Python Hot Network Questions C++20's std::views::filter not filtering the view correctly Ask for a reduction in conference registration fees Why is there a voltage difference between these two grounds? What do the white circle and black arrow on the airport chart mean? (VOR identifier and frequency written) Why did JavaScript choose to include a void operator? How will we invite the Shekhinah? Why do I mistakenly think there's an error in this proof by Hoffman and Kunze? Forward definition of measurability How to wrap a 2D shape and Knife Project toward a cylinder axis? Finding which process is reading from disk constantly on FreeBSD Refinishing engineered wood with laminate—where to find? Training vs increasing gear ratio What type of security measure/contingent conditions could make jumping into a portal impossible inside a laboratory? Do vampires gain exhaustion during a chase? Writing multiline equation in align environment -> integrals become smaller? What is the intent of Donald Trump's $200k bond? How do strong (GM level) players visualise the board? What's the main difference between \"You are not to use the elevator.\" and \"You don't have to use the elevator\"? Can we exchange logical disjunction for UNION ALL? Why are stars made from hydrogen and helium and not other elements? Is it a canonical elementary CA rule number? How many days did it take for the Terminator to find real Sarah Connor? Mathematical motivation for supergeometry a joke in the big bang theory Question feed GEOGRAPHIC INFORMATION SYSTEMS Tour Help Chat Contact Feedback COMPANY Stack Overflow Teams Advertising Collectives Talent About Press Legal Privacy Policy Terms of Service Cookie Settings Cookie Policy STACK EXCHANGE NETWORK Technology Culture & recreation Life & arts Science Professional Business API Data Blog Facebook Twitter LinkedIn Instagram Site design / logo © 2023 Stack Exchange Inc; user contributions licensed under CC BY-SA. rev 2023.8.24.43599 Your privacy By clicking “Accept all cookies”, you agree Stack Exchange can store cookies on your device and disclose information in accordance with our Cookie Policy. Accept all cookies Necessary cookies only Customize settings",
    "commentLink": "https://news.ycombinator.com/item?id=37284487",
    "commentBody": "111,111.1 meters is reliably 1 degree of latitudeHacker Newspastlogin111,111.1 meters is reliably 1 degree of latitude (gis.stackexchange.com) 298 points by mholt 17 hours ago| hidepastfavorite209 comments delta_p_delta_x 12 hours agoThe metre was re-defined[0] in 1791 as one ten-millionth of the quarter-meridian, or ninety degrees of arc, through Paris.It then follows straightforwardly that 1° ≡ 1&#x2F;90 × 10^7 m = 111 111.111... m.It also follows straightforwardly that the circumference of Earth is approximately forty million metres, or 40 000 km.[0]: Edit: the initial definition of the metre was the length of a seconds pendulum, i.e. the length of a pendulum with a period of two seconds.Given the formula T ≈ 2π√(L&#x2F;g), letting T = 2 and L = 1, we have 1 = π√(1&#x2F;g), and 1 = π²&#x2F;g.This is also why g is so close to the value of π²—because the former is expressed in units that are defined that way. It&#x27;s also not a coincidence that 1 cm³ of water is 1 g—for a long time, that was the definition of the gram. reply purkka 9 hours agoparentGiven that the second is an older unit [0] than the redefinition of the metre, and defined based on \"nice\" subdivisions of the day, it would seem that there&#x27;s still a bit of a coincidence there.Since the metre was previously defined by the seconds pendulum, it was entirely defined by the definition of a second and the value of g. From the equations, 1 m = 1 s² × g &#x2F; π².While this makes g ≈ π² straightforward, it seems coincidental that the Earth&#x27;s circumference was close enough to 40 000 km that the redefinition of the metre was a nice power or 10 without too much change to the metre.[0]: Late 16th century, based on https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Second#Fraction_of_solar_day reply marcosdumay 8 hours agorootparentWell, it&#x27;s not much of a coincidence. There are all kinds of constants around us, and one of them is prone to be close to a round number.If the Earth&#x27;s circumference wasn&#x27;t a nice number, people would have chosen another one. reply Thorrez 6 hours agorootparentprevWas the meter based on the length of the pendulum similar to the length of the meter today? This doesn&#x27;t necessarily say they were similar:> In 1675, Tito Livio Burattini suggested the term metre for a unit of length based on a pendulum length, but then it was discovered that the length of a seconds pendulum varies from place to place.https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Metre#Pendulum_or_meridian reply purkka 1 hour agorootparentThe difference in gravity around the Earth is small enough that the pendulums would be within a couple percent. (Wikipedia claims a measured difference of 0.3% from the time.)Assuming the second was also quite accurate, the seconds pendulum wouldn&#x27;t be too far from its current definition given that g ≈ π² to within ~1 % in modern units. reply petters 3 hours agorootparentprevThe period is also not independent of the amplitude. That is only the case of you approximate sin x ≈ x in the differential equation reply saalweachter 3 hours agoparentprevNote that the meter is also basically 3 Paris feet, which comes out to about 0.97m (compared to 3 English feet, which is only around 0.91m). They weren&#x27;t working in a vacuum to derive the most principled or cosmically beautiful unit length, just trying to find a way to define the unit they already used that wasn&#x27;t \"the length of this stick we have over here\". reply aappleby 12 hours agoparentprevAnd a 32-bit integer can represent latitude or longitude to an accuracy of around 1 centimeter :D. reply OscarCunningham 11 hours agorootparentCall that a long long. reply dylan604 8 hours agorootparentThat’s up there with buffalo buffalo buffalo reply teaearlgraycold 10 hours agorootparentprevlong lon reply linkjuice4all 6 hours agorootparentAt my last job we used lon long reply ianburrell 6 hours agoparentprevI’m surprised that there isn’t GPS coordinate system which is just kilometers. Instead of 360 degrees uses 40,000 km. The real calculation would use the real distances but the approximation is close enough. This means don’t have to do any conversion to distances, at least for metric folks.One problem with degrees is that hard to convert to useful distances. This tricks help a lot, but it would be better to have no conversion. reply pezezin 5 hours agorootparenthttps:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Earth-centered,_Earth-fixed_co...In a previous life I had to implement conversions between ECEF and WGS84. If you do it, make sure to use at least 64-bit floats, the Earth is so big that 32-bit arithmetic will introduce errors on the order of meters. reply jabl 3 hours agorootparentprevThe main difficulty is that for ease of calculation you&#x27;d like a cartesian grid, which maps poorly to the spheroid shape of the earth. One solution is UTM https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Universal_Transverse_Mercator_... which divides the earth into 60 zones, and then inside each zone you have a cartesian grid with meters as the unit. So a UTM coordinate consists of the zone designator, and then distances in meters from the equator and the zone&#x27;s central meridian.There also MGRS https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Military_Grid_Reference_System , the NATO military variant of UTM. reply dharmab 6 hours agorootparentprevThe perfect sphere approximation of Earth is not at all close enough for GIS applications. Geoid data (the actual ellipsoid-ish shape with height variance) is an important factor in accurate GIS software. reply dagw 3 hours agorootparentprevThere is a &#x27;metric&#x27; coordinate system, it&#x27;s called EPSG:3857 and uses meters as its units. Although it is not valid close to the poles and can give error of up to 0.6% so it&#x27;s not useful for when you need high accuracy or to cover the entire globe.Most places in world also have local coordinate systems that reproject smaller geographic areas to cartesian coordinates with meter units for making easier to work in those areas. reply bmacho 5 hours agorootparentprevDo you have an example in mind? A problem that you may encounter, how do you calculate now, and how could you calculate with a GPS system that is just kilometers? reply jonsen 6 hours agorootparentprev> ...don’t have to do any conversion to distances...Are you advocating for the use of Manhattan distances for everything? reply ragebol 1 hour agoparentprevThis stuff why the SI units system really is a system. Rather than the collection of unrelated units that was used before. reply japanuspus 3 hours agoparentprevThe work to measure the meridian with the highest possible precision was in itself a fascinating multi-year ordeal: https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Arc_measurement_of_Delambre_an.... reply mrciacco 1 hour agorootparentA nice novel about it is Denis Guedj&#x27;s \"La Méridienne\". https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Denis_Guedj reply overengineer 2 hours agoparentprev> The metre was re-defined[0] in 1791 as one ten-millionth of the quarter-meridianDoesn&#x27;t sound like a good idea. Circumference of earth around Paris is not unchangeable. reply fsloth 2 hours agorootparentExact geographic measurements where the high technology of 18th century. Each society uses the highest precision measurements available to them. Also, plate tectonics were scifi fantasy until 1950&#x27;s.The definition has been updated after that. https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;2019_redefinition_of_the_SI_ba... reply delta_p_delta_x 2 hours agorootparentprev> Doesn&#x27;t sound like a good ideaWhich is why the CGPM changed the definition of the metre to:- the length of the International Metre (a 9:1 platinum-iridium bar) in 1889;- and then to 1650763.73 wavelengths of the orange-red emission line in the electromagnetic spectrum of the krypton-86 atom in a vacuum in 1960;- and finally to the modern definition, the length of the path travelled by light in vacuum during a time interval of 1&#x2F;299792458 of a second in 1983.This means the realisation of the metre depends on the definition of the second. reply thomasahle 5 hours agoparentprevWhy did they change the definition from the length of the pendulum to the circumference of the Earth? reply Daz1 5 hours agorootparentCouple reasons 1) why use seconds when you can just measure a segment of a known distance? 2) pendulums swing faster or slower depending on altitude, 3) Problems with accurate measurement of seconds, swing time etc. reply thomasahle 5 hours agorootparentI guess for (1) I would imagine it was easier for an independent group of scientists to accurately measure a pendulum, than to travel all the way to the north pole in a straight line through Paris.But I guess they were using the stars or something so maybe it&#x27;s not as hard as I&#x27;d imagine. Also (2) and (3) are great points. reply lern_too_spel 6 hours agoparentprevThe French also applied decimalization to angle measurements, so it&#x27;s really 1 gon = 100 km, and 1 km is just 1 centigon. reply gp 12 hours agoprev1 nautical mile (~6076 ft) is exactly one minute of arc at the Earth&#x27;s equator.As a sailor, I wish that all miles were nautical miles because they have a real meaning. What good is 5280 feet? reply soligern 9 hours agoparentWhat good is a mile to begin with. Just use kms and then we have a nice round figure. Being from the US and as someone that does a lot of woodworking, I’m very used to inches but I can’t do anything beyond basic calculations in inches and always have to pull out a very specific carpenters calculator. It’s not trivial to add up 2’13&#x2F;32” + 5’11&#x2F;16”, there’s too much carrying over and doubling to equalize the denominators to do easily in your head. That’s just addition, dividing is a whole other beast. reply filmor 4 hours agorootparentNautical miles are used in sailing because they correspond (nearly) directly to an arcminute of latitude which simplifies chart navigation. reply paulddraper 8 hours agorootparentprevIDK if 2.40625 + 5.6875 is any easier :)Inches using base 2 for the fractions is useful. reply Dylan16807 6 hours agorootparent> Inches using base 2 for the fractions is useful.Why? You can&#x27;t just say that without a reason.(The numbers you cited above don&#x27;t count, because you&#x27;d instead use 6.1 and 14.4 (or maybe 14.45) centimeters) reply soligern 6 hours agorootparentprevEasier to type into any general purpose calculator. It’s also so much more accurate when trying to enter into any CAD&#x2F;CAM software.It’s also easier to add up 10 different decimal numbers than the same number of mixed numbers. reply wruza 7 hours agorootparentprev2405.25 + 5687.5 is easily 8092.75. But in both cases not using a calculator and not doing an operation on it at least twice (if it has no log) is a recipe for wtf, imo. An expensive mistake requires only one miscalculation. reply saiya-jin 2 hours agorootparentprevAre you visually or mentally impaired? I don&#x27;t mean it in any condescending way. I can add those on the spot by just looking at the numbers and tell you result immediately, that&#x27;s primary school level math in Europe. reply bialpio 7 hours agorootparentprevIt isn&#x27;t easier, but 6.112cm + 14.446cm is fairly easy. Especially if you drop thousandths, which you can only maybe get when measuring with a caliper... reply spiderice 7 hours agorootparentprevYeah, I don’t think woodworking is the best example for arguing that metric is better than imperial. In fact, it’s one of the few disciplines where the imperial system as a decent argument for superiority. reply bialpio 7 hours agorootparentSorry, I dabble with woodworking and disagree heavily. I usually don&#x27;t care for bigger precision than 1mm (so between 1&#x2F;16\" and 1&#x2F;32\"), and adding things up is a nightmare (\"umm... 7 3&#x2F;16\" + 2 1&#x2F;8\" + 5 1&#x2F;4\" is... where&#x27;s a goddamn pen & paper...\"). Same with figuring out which line is which fraction of an inch on measuring tools. Things became tolerable once I got metric measuring tape. reply foobarian 7 hours agorootparentOnce you get past the dabbling stage it starts to get pretty natural. I don&#x27;t think either system is better, the value is mostly tied up with what&#x27;s on the shelves at the local home center and how your measuring tools are marked. reply bialpio 5 hours agorootparentIt&#x27;s already natural when using metric, so I&#x27;ll stick to it. reply mitthrowaway2 6 hours agorootparentprevThe stuff on the shelves is rarely sized precisely enough for the units to matter. I&#x27;ve bought 1&#x2F;4\" ply that measured much closer to 6.0 mm than to 1&#x2F;4\". reply jjoonathan 7 hours agorootparentprevSure, if tools are dirt cheap you can just sacrifice to Benford&#x27;s Law and use base 10. If tools are not cheap, you&#x27;ll learn to use base 2, one way or another. reply kozak 7 hours agorootparentprevMetric woodworking just uses integer millimeters for everything. reply ggm 7 hours agorootparentprevWoodworking measurement has two forms: lumber, which is notional, pre drying, shrinkage and rough handling, and cut, which is required to be beautiful. Sometimes, it isn&#x27;t about feet and inches as much as \"the same\" reply bialpio 7 hours agorootparentPlumbing is another example where imperial works and is even used in Europe. It doesn&#x27;t matter that a pipe is 3\", it may as well be called \"type B\", since all you care about is if it&#x27;s big enough for the purpose (you look that up in building code) and if the parts match together. The moment you need to perform calculations is when imperial becomes a total PITA to use. reply ggm 7 hours agorootparentMinimum radius is much more important in plumbing I think than metric&#x2F;Imperial. And screw-thread. reply bialpio 7 hours agorootparentWDYM by minimum radius? Are you referring to the part of my post where I wrote that you just look it up in the building code (as opposed to trying to calculate it), or when actually designing where the pipe runs? reply ggm 6 hours agorootparentThe intersection of both. I did a very bad job of plumbing an electric shower into my flat in York back in the 80s and working out how to route the pipe to meet both ends requirement of where I could connect it into supply, and where it had to be to deliver water to the heater, was massively confusing. I am sure a plumber would understand this innately, but I wasted 2+ m of copper pipe trying to \"route\" it, without understanding the limits of how I could bend it, or cut and use a fitting.The building code(s) only get you so far. There&#x27;s also aesthetics. reply bialpio 5 hours agorootparentAh, well, I only did PEX and ABS for my reno, very idiot-proof so I managed. ; ) reply ggm 4 hours agorootparentI made the mistake of watching (as a kid) a plumber use his own body to form the curves, and assumed \"it&#x27;s that easy\" without taking in that he was 25 years past his apprenticeship and had bent thousands of pipes, and used a former almost all the time. It&#x27;s a different game when its you, the pipe, and twenty needle-jets of water streaming out of the badly fitted olives, lack of PTFE (or too much) tools which don&#x27;t fit, pipe with ugly crinkles in them, splits along the length... replymetaphor 7 hours agorootparentprev> It’s not trivial to add up 2’13&#x2F;32” + 5’11&#x2F;16”, there’s too much carrying over and doubling to equalize the denominators to do easily in your head.Seems like straight forward arithmetic, but if using a calculator is a must, the HP 35s (RPN daily driver) handles fractional calculations elegantly without being a \"very specific carpenters calculator\": 2.13.32 [Enter] 5.11.16 [+] 8.09375...and if you wanted that decimal as fractional display instead: [-->] [FDISP] 8 3&#x2F;32 reply 9dev 3 hours agorootparentOr you add 6.112cm to 14.446cm, which probably even children can do in their head reliably. But sure, you can do it using fantasy units, too :) reply metaphor 3 hours agorootparentNow change that first number from 6.112 to 6.789 and watch that same child stumble.I&#x27;ve always found it curious how Europeans pride themselves in speaking their native tongue + English...except its always a cultural flame war-inciting impediment when the communication barrier involves a mere arithmetic unit conversion. Doubly ironic when most of the world is consciously aware of what the prevailing USD exchange rate with their native currency is without complaint, whereas the average American simply doesn&#x27;t have a clue how many Euros a US dollar gets them.Similarly, if the Brits want to reference weight in stone, or Canadians want to sell me lumber in board-foot, I don&#x27;t find that offensive in the least; I&#x27;m of the position that the impetus is on me to understand their measure, not for the one communicating to conform to my norms. reply slau 2 hours agorootparentWhy would there be any stumbling? Because it&#x27;s two 6s? Because there&#x27;s two carries? reply metaphor 2 hours agorootparentThe child would clearly have to mentally carry four times all the way down the chain: 11 11 14.446 + 6.789 -------- 21.235 reply delta_p_delta_x 1 hour agorootparentReally, this is primary school maths. I learnt about carries when I was seven.Every single thread (both here and on Reddit) I&#x27;ve seen says &#x27;oh, decimals are too hard&#x27;.This is a terrible indictment of the American schooling system if your only defence against metrication is &#x27;I can&#x27;t do decimals&#x27;. It is you lot who have to catch up. reply metaphor 1 hour agorootparent> This is a terrible indictment of the American schooling system if your only defence against metrication is &#x27;I can&#x27;t do decimals&#x27;. It is you lot who have to catch up.To the contrary, if you read into the full context of this thread, the underlying contention isn&#x27;t that we&#x27;re incompetent at decimal arithmetic, but that the rest of the world (and apparently some Americans too) believes our common fractional arithmetic is too much of a mental burden, and I don&#x27;t blame those individuals either.Indeed decimal arithmetic is trivial to most grown adults, but that wasn&#x27;t the point; the example was merely to highlight how just slightly changing a few numbers in the same sequence of operations serves as an effective counterpoint to the grandparent&#x27;s assertion that \"even children can do in their head reliably\".Americans are taught and handle metric units in compulsory school just fine, but most of us also practice imperial units on a daily basis as well. We&#x27;re just not culturally predisposed to complain when everyone else conveys measure in the SI mks&#x2F;cgs framework. reply delta_p_delta_x 1 hour agorootparent> common fractional arithmeticI agree with the current of the thread, that mixed numbers are decidedly inferior to decimals. They&#x27;re not harder, strictly speaking, but are more tedious, and this additional tedium introduces steps that people can make mistakes in. Fractions are also not easily parsed by standard desk calculators, and are not easily printed in a single line. They may even be mistaken by someone in a hurry as three separate numbers.Decimals do away with all this unnecessary pain, and this really is the key point of metrication: it is a waste of time and effort to use non-SI units and convert back and forth or deal with mixed numbers. That&#x27;s what people are complaining about: it is exasperating when Americans dredge mediæval units up in the 21st century, when we have a modern, simple, and unified system of units available. reply metaphor 45 minutes agorootparent> ...mixed numbers are decidedly inferior to decimals. They&#x27;re not harder, strictly speaking, but are more tedious, and this additional tedium introduces steps that people can make mistakes in.A counterpoint to this is the fact that there are close to a million employed carpenter tradesmen in the US whose average level of education is a high school diploma[1], and yet their trade operates almost exclusively on fractional arithmetic, most of which occurs mentally on the jobsite.The point being that tedium is a relative measure of training and experience, and it goes without saying that those trained in only decimal form are liable to struggle with unfamiliar systems.And if you think that&#x27;s bad, try purchasing lumber from any lumber yard in Canada or the US; the trade&#x27;s board-foot system[2] will really tickle your metric attachment.> it is a waste of time and effort to use non-SI units and convert back and forth.It seems the story is more like it&#x27;s a waste of time to those who find value in what Americans have to say but are unaccustomed and insistently resistant to performing conversions. I don&#x27;t disagree that there&#x27;s certainly value in having a globally common measurement framework, and indeed an American who conveys imperial units in a European setting is liable to be chastised. But old habits die hard and last time I checked, we&#x27;re not having this discussion on a .eu gTLD.Now try imagining how the typical American feels when engaging with the rest of the world: SI units, (,) and (.) symbols reversed, left-lane driving, etc. We tend to just adapt.[1] https:&#x2F;&#x2F;www.bls.gov&#x2F;ooh&#x2F;construction-and-extraction&#x2F;carpente...[2] https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Board_foot reply allarm 1 hour agorootparentprevWhat’s so difficult with that? Just use pen and paper for calculations, you’re supposed to write down the result anyway. It’s a simple math. reply metaphor 1 hour agorootparentThe goalposts set by the grandparent was reliable mental arithmetic by a notional child:> ...which probably even children can do in their head reliably.You&#x27;re moving the goalposts.An indefinite number of applications exist where we can make meaningful decisions all day without ever needing to write results down. replyp_l 2 hours agorootparentprevWas that available on 48g perhaps? reply metaphor 1 hour agorootparentUnsure with the 48g; trained myself since engineering undergrad days to not lean into graphing calculators. The feature existed since at least the 32sii, so it makes sense that successor 33s and 35s models also got it. Easily one of the most useful features that I&#x27;ve found for woodworking and converting arcmin&#x2F;sec to decimal as the most common usecases. reply p_l 1 hour agorootparentI know of sexagesimal mode in 48g and used it, but haven&#x27;t encountered anything for imperial units replyopwieurposiu 11 hours agoparentprevA mile is 5280 feet because it is 80 chains (survey chains) long. The chain&#x27;s length is a byproduct of English land tax laws which were by the acre.The roman mile was 1000 paces, or 5000 feet, which made a bit more sense.https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Gunter%27s_chain reply CapitalistCartr 11 hours agorootparentFor those of you marvelling at Romans having a five foot (1.5 m) stride, a Roman pace was two steps, counted from the left foot down to left foot down again. reply rootusrootus 10 hours agorootparentIn my experience many people define pace the same way today. We were taught in Boy Scouts how to pace off a distance measuring 5 feet per pace, or every other footfall. reply willcipriano 8 hours agorootparentMaybe because you were kids and adult paces are a single stride? reply rootusrootus 6 hours agorootparentNope. Boy scouts, not cub scouts, so a lot of us were closer to adult stride than kid. If you measure a typical adult pace (same foot to same foot) it&#x27;s probably just under 5 feet unless they&#x27;re deliberately pacing to measure something. You get a feel for what it takes for your own pace to hit 5 feet so you can repeat it. reply romwell 8 hours agorootparentprevThat&#x27;s to account for possibly different (average) left&#x2F;right steps.Averages out better. reply Pinus 6 hours agorootparentI have seen this argument before, but I&#x27;m not sure that I buy it. Even if you count every footfall, you are not magically going to somehow use, say, only your left foot. At the end of a km, you will have 600 double paces or 1199, 1200 or 1201 single paces. Well within the margin of error.My hypothesis is this: Actually try to count every foot when you’re out. If you count only every second footfall, you can mentally go \"a-one-a-two-a-three\" and so on, but counting every foot, there are just too many of them. At least I get brain overload from it. reply mcpackieh 3 hours agorootparentSame reason people count things out in twos. \"How many shells did you collect on the beach?\" \"Let&#x27;s see... two, four, six, eight.. I got nine shells\"They&#x27;re both shortcuts to count things with half as much counting. reply dullcrisp 10 hours agorootparentprevYou’ve ruined my mental image of the Romans all walking like John Cleese. reply quickthrower2 10 hours agorootparentLike the marching hammers in Pink Floyd’s The Wall music video reply closewith 7 hours agorootparentprevThat&#x27;s still how we pace in the military today, left foot to left foot and (while it differs for everyone) normally about 60 paces per 100m. reply dylan604 8 hours agorootparentprevI think more importantly would be how do pirates mark paces? reply aimor 6 hours agorootparentprevDon&#x27;t worry, we&#x27;ve come full circle and defined the Data Mile to be exactly 6,000 ft. reply burlesona 11 hours agoparentprevInterestingly, a mile was originally the less surprising 5000 feet. But in the 1500s the English changed the mile to be 8 furlongs, as that made for much easier math around the agricultural measurements of the time.https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Furlong reply delta_p_delta_x 12 hours agoparentprevMost other &#x27;mile&#x27;s are derivatives of the Roman mile which developed somewhat independently of the English units (foot, yard, inch, barleycorn, etc), ergo the weird conversion factors. The original Roman mile was 5000 Roman feet.In fact, 1 nmi ≡ 1.852 km exactly.Also from the original definition of the metre: 1&#x2F;60 × 1&#x2F;90 × 10^7 = 1851.85185185... m.Inter-convertability was a defining trait of SI (or more precisely, its predecessors, MKS and CGS) from the very outset, which is why we have 1 m ≡ 1 s ≡ 1 kg ≡ 1 N ≡ 1 Pa ≡ 1 J ≡ 1 A ≡ 1 C ≡ 1 V ≡ 1 Ω ≡ 1 F ≡ 1 W ≡ 1 Wb ≡ 1 T ≡ 1 H ≡ 1 Hz (I use &#x27;≡&#x27; loosely here to suggest conversion factors, rather than its usual meaning of equivalence).The only outliers in the SI are the kelvin, the mole, and the candela (and derived units from these). The former two are dealt with straightforwardly with the Boltzmann and Avogadro constants. I have issues with the presence of the candela in the SI. reply skissane 10 hours agorootparent> Most other &#x27;mile&#x27;s are derivatives of the Roman mile which developed somewhat independently of the English units (foot, yard, inch, barleycorn, etc), ergo the weird conversion factors. The original Roman mile was 5000 Roman feet.Pre-metric Europe was full of units with weird conversion factors, based on a shared heritage (mixture of Roman and Germanic), but with lots of divergent evolution subsequently. England didn&#x27;t really stand out; France, Spain, Italy, Germany, etc, were really no different.Then the Continent did away with most of that complexity by adopting metric, and for whatever reason the English dragged their feet on doing that, and their American offshoots even more so. But the fact that people have forgotten that the French&#x2F;Germans&#x2F;etc used to have feet&#x2F;inches&#x2F;miles&#x2F;pounds&#x2F;etc too, [0] albeit with somewhat different definitions, makes people think English units were somehow unique. They never were. The uniqueness is in the slowness in replacing them with metric, not the units themselves.[0] They still have some of these units for certain purposes. In France and Germany, the pound is still used, albeit redefined to be exactly 500 g. Nautical miles are used in maritime and aviation applications; American influence (and to a lesser degree British) led to the adoption of the Anglo-American foot as the unit of altitude in aviation – the foot French pilots use to measure altitudes is the English foot not the old French foot; etc reply delta_p_delta_x 10 hours agorootparent> American influence (and to a lesser degree British) led to the adoption of the Anglo-American foot as the unit of altitude in aviationThere are a few notes I have regarding this. The Airbus consortium initially set up the Airbus A300 cockpit entirely in SI units, but they realised this wouldn&#x27;t sell well in the US, and they switched to feet and flight levels.Airfield weather data, including pressure and temperature readings in everywhere but the US are given in hectopascals and degrees Celsius.Many post-Warsaw Pact countries (Russia, China, Uzbekistan, Belarus, Ukraine until recently) used to have a completely metric unit setup for their air traffic controls. Both Boeing and Airbus cockpits have settings to output altimeter readings in metres.> Then the Continent did away with most of that complexity by adopting metric, and for whatever reason the English dragged their feet on doing that, and their American offshoots even more so.If there&#x27;s one export of the US I despise more than anything else, it is making legacy non-SI units relevant again because of its outsize influence in traditional and social media.I live in a country that metricated half a century ago, but I have Gen Z friends who measure their heights in feet and inches, and their gym weights in pounds. What the absolute hell.The SI units are the pinnacle of standardisation and the culmination of a three-hundred-year long effort to make life easier for everyone. I have no idea why the richest country in the world can&#x27;t metricate properly.Get rid of legacy units, and we save billions in not printing the (XX fl. oz), (XX lbs), or (XX oz) on food packaging alone.It is ironic that a country that did away with colonialism, a whole lot of tea, and embraced the French and their revolution, never embraced the French units, but stuck with the English units. reply BuyMyBitcoins 7 hours agorootparentThe early US came tragically close to adopting the metric system, and on more than one occasion.I invite you to watch this amusing and relatively short video by History Maters on the subject: https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=BtKbq_zAr-A&pp=ygUWaGlzdG9yeSBtY...As an American I will say this, almost nobody genuinely thinks that our measurement system is superior. I suspect the majority of us know it’s a janky system but it’s so difficult to change.That being said, I switched over to Kilometers on my iPhone because of Pokémon Go. I’ve actually gotten to the point where I think of walking distance in metric more readily than in fractions of a mile, so metrification is making progress in unexpected and exciting ways! reply db48x 7 hours agorootparentprevIt’s not ironic, it’s economic. People had other things to worry about during the Revolutionary War, and then afterwards there was an industrial revolution. (The tax on tea might have been the straw that broke the camel’s back, but the protectionist taxes on goods manufactured in the colonies was the real killer.) Once that was in full swing changing the units was impossible.Every machine in every machine shop was geared towards manufacturing dimensions and tolerances specified in inches, tenths, and hundredths. Changing to metric would have required rebuilding or replacing all of them. England had the same problem. They had the most manufacturing capability in the world, and they weren’t about to spend all that money replacing all of that machinery.Worse, the SI system isn’t really easier. The SI units were designed to make unit conversions easier, but in practice nobody actually converts units. In the US Customary system (as in the English Imperial system before it), every common activity has it’s own units.Houses and furniture are measured in feet and inches, and you never ever convert those to miles. Why bother? Miles aren’t useful for measuring cupboards or rocking chairs.Cooking uses teaspoons, tablespoons and cups, but you never need to convert between spoons and cups let alone cups and gallons or barrels or hogsheads. It is handy to remember that a tablespoon is three teaspoons though, because that can save you some time at the holidays when you have to scale your recipes up to feed all of your relatives.The SI system is not really any different in practice. reply seszett 5 hours agorootparent> People had other things to worry about during the Revolutionary WarWell, the metric system was devised in France mostly during the Revolution, with the size of Earth surveyed while at war with most of Europe in order to get a good basis for the length of the meter.> Cooking uses teaspoons, tablespoons and cupsOr millilitres and grams, which are basically equivalent for liquids, so you only need a kitchen scale to do most cooking as long as it&#x27;s not an American recipe, and it&#x27;s extremely easy to scale recipes. reply p_l 2 hours agorootparentprevIndustrial revolution had nothing to do with it, given that the inch USA uses today is an inch created by a pissed off engineer (gauge block Inventor Carl Johansson) in European company making gauge blocks, who defined an inch to be 25.4 mm @ 20 degrees Celsius in 1912 - created by taking a reasonable metric approximation in between British and American inches.The popularity of Johansson&#x27;s blocks is Brits changed their definition of inch in 1930 and USA followed in 1933. Most countries that still used inches started to use \"industrial inch\" of 25.4mm in 1930s, the rest went metric. reply mr_toad 4 hours agorootparentprev> People had other things to worry about during the Revolutionary WarActually there are plenty of examples of countries adopting metric after a revolution or gaining independence, so perhaps the US didn’t adopt metric in spite of the revolution rather than because of it. reply pmontra 2 hours agorootparentprevI just checked and one of my tablespoons is 4 of my teaspoons, but none of them is imperial :-)On the other side, 1 liter of water is 1000 grams so if I need 100 cc I can put water in a glass and weight it. reply skissane 6 hours agorootparentprev> It’s not ironic, it’s economic.> and then afterwards there was an industrial revolution.> Every machine in every machine shop was geared towards manufacturing dimensions and tolerances specified in inches, tenths, and hundredths. Changing to metric would have required rebuilding or replacing all of them.I don&#x27;t think this argument makes anywhere near as much sense as you think it does: the part of the US which lags the most in metrication isn&#x27;t industry, it is in everyday life, K-12 education, and consumer products&#x2F;services; the US manufacturing industry is significantly ahead of US consumers in the adoption of metric. Entire industries in the US have adopted metric (most notably the US automotive design&manufacturing industry has switched to mostly metric). If the real issue were about industry, you&#x27;d expect industry to have the biggest lag, not to be ahead of consumers.I think the real reason is actually cultural. Almost every country which successfully metricated, did so with some degree of government coercion – \"you are going to start using metric now, and we aren&#x27;t giving you a choice about it\". The US cultural emphasis on individual freedom led it to refuse to go down that path, insisting that metrication be voluntary only – which is a large part of why, decades later, so little progress has been made. Similarly, the UK&#x27;s insistence on retaining miles for road distances is due to cultural and political reasons, not any practical concern – Australia successfully converted all its road distance and speed limit signs to kilometres, despite having much longer roads than the UK doesAlso, for all that US insistence on \"freedom\", it actually engages in anti-metric governmental coercion – consider the Fair Packaging and Labelling Act (FPLA), a federal law which makes metric-only packaging illegal for many categories of consumer goods.> The SI units were designed to make unit conversions easier, but in practice nobody actually converts unitsI can remember doing lots of unit conversions in science and maths classes in high school. If I&#x27;d gone on to study physical science or engineering at university, I&#x27;m sure I would have done plenty more. From an educational viewpoint, I think it is easier to teach students how to do science with SI units if they have already been taught basic metric units at the primary&#x2F;elementary level, and are used to using them in everyday life. Whereas, students in the US start out with less familiarity with basic metric units, which makes learning to use SI units in science class more work for themAnd every time I visit the US I find myself constantly trying to remember stuff like \"what is an ounce, again?\" \"what&#x27;s 60 degrees Fahrenheit in Celsius?\". If the US finally finished adopting the metric system, it would eliminate the need for many unit conversions which are now required by international visitors, immigrants&#x2F;emigrants to&#x2F;from the US, journalists, businesses engaged in product localisation, etc> Cooking uses teaspoons, tablespoons and cups, but you never need to convert between spoons and cupsSome countries (Australia I know is one, there are probably others) have defined metric cups, teaspoons and tablespoons. So this isn&#x27;t really the argument against the metric system that you think it is reply Mountain_Skies 8 hours agorootparentprevBase ten is an unfortunate numeric choice and responsible for much of the hesitation to switch to metric. Maybe someday when we have millions of O&#x27;Neill Cylinder colonies, one of them will adopt base twelve instead, at which point the main reason against metric would go away. reply skissane 6 hours agorootparent> Base ten is an unfortunate numeric choice and responsible for much of the hesitation to switch to metric. Maybe someday when we have millions of O&#x27;Neill Cylinder colonies, one of them will adopt base twelve instead, at which point the main reason against metric would go away.I&#x27;ve heard this argument many times before, but I don&#x27;t think it makes much sense. The US customary &#x2F; British imperial measurements are not consistently based on base 12. Yes, there are 12 inches to a foot; but there are 16 (not 12) ounces in a pound, and 128 (not 12 or 144) US fluid ounces in a US gallon (versus 160 UK fluid ounces in a UK gallon). Fahrenheit has 180 degrees between the freezing and boiling points of water, with water freezing at 32 degrees – none of which has much to do with base 12 either. There is no widely used unit corresponding to 12 feet or a twelfth of a mile. If you really want a system of units based on base 12, the US customary &#x2F; British imperial system ain&#x27;t what you are looking for.Also, it ignores the fact that you can metricate while keeping a foot of 12 inches, if you define a new \"metric foot\" composed of 12 \"metric inches\". This has been done before – as I mentioned in an earlier comment, many European countries kept the pound when metricating, by defining a new \"metric pound\" of 500 g. Given the current standard US-UK inch is exactly 25.4 mm, one option would be to have a metric inch of 25 mm (= 2.5 cm), twelve of which would give a metric foot of 300 mm (= 30 cm, versus 30.48 cm exactly for the standard US-UK foot). Sure, having two different foots and inches (old and new) coexisting for a while might cause some confusion; but if the confusion isn&#x27;t worth it, maybe base 12 isn&#x27;t really worth it either. And to avoid the confusion, you could always give the new metric units different names (\"moots and minches\", maybe?) reply p_l 1 hour agorootparentA lot of traditional units are based on random reference points that were an issue from antiquity - consider how pretty much every market town kept their own measure references even if they used same terminology.That said, Fahrenheit use of brine solution for 0 and his wife&#x27;s armpit for 100 remains among most WTF for me. reply skissane 1 hour agorootparent> A lot of traditional units are based on random reference points that were an issue from antiquity - consider how pretty much every market town kept their own measure references even if they used same terminology.A lot of that was because keeping the definition of units consistent across time and space was very hard in ancient and mediaeval times, even the first few centuries of the modern period. Units were defined in terms of physical artefacts (as long as this metal rod, as heavy as this particular stone), which tended over the centuries to be lost or stolen, or slowly decay. Issues such as expansion and contraction of metals at different temperatures were also not widely understood, and accurate&#x2F;reproducible thermometers didn&#x27;t exist until the 18th century. As we improved our knowledge of natural science, we became more and more aware of these issues – but the initial solution was often just to make the whole country adopt the standard of the national capital, and empires were made to adopt the standard of the imperial capital (the British don&#x27;t call their traditional units \"Imperial\" for nothing) reply mitthrowaway2 6 hours agorootparentprevWhen it comes to precision machining, even Americans seem to prefer to use \"thous\" (1&#x2F;1,000\") and \"tenths\" (1&#x2F;10,000\"). Isn&#x27;t it strange that the preferred measurements aren&#x27;t fractional: 1&#x2F;1,728\" and 1&#x2F;20,736\"? Why do you think that is?What would a machine shop say if you called out a dimension as (5,081&#x2F;20,736\")?I think they&#x27;d stare at it for a while, chuckle at your sense of humor, and then punch it into a calculator to work it out in decimals. reply mr_toad 4 hours agorootparentprevOr base 16 if the machine overlords have their way. reply saalweachter 3 hours agorootparentThe biggest argument against base 10 is that one day our descendants will have to explain to aliens, \"because the monkeys that built us had ten fingers\".Positively mortifying. reply pmontra 2 hours agorootparentAnd those aliens would shrug \"the slugs that built us had no fingers at all, that&#x27;s why we&#x27;re using binary, not because of electronics.\" replyuserbinator 8 hours agorootparentprevEnglish dragged their feet on doing thatPun intended? ;-)It&#x27;s also worth noting that English and American units also differ slightly --- one of the more common examples being that the US gallon is not the same as the Imperial gallon. reply earthboundkid 9 hours agorootparentprevAnd everyone measures TVs in inches, somewhat bizarrely. reply delta_p_delta_x 2 hours agorootparentStrictly speaking, this is also a consumer-oriented thing, using the diagonal. The diagonal is also misleading, because it gives no information about the dimensions and aspect ratio of a given panel. Consider a 15.6\" 16:9 display, versus a (now increasingly more common) 16\" 16:10 display.Panel manufacturers are all based in Asia, and measure only the edges in millimetres, as they should. Even xrandr outputs EDID data in millimetres. reply pmontra 1 hour agorootparentCRTs were 4:3 and tiny, they could fit basically everywhere. The diagonal was more than enough for consumers. Computer monitors started to have different ratios but they were not as widespread as today, even in a world of laptops and mobile devices.The last time I had to buy a TV set I was more interested in the width of the appliance (screen plus bezel) than in its diagonal because I had to fit it into a set space. I went to a shop with a tape ruler. reply pmontra 2 hours agorootparentprevGas and water pipes are often in inches too (Italy) probably because it&#x27;s an old and critical infrastructure and nobody wants to risk mistakes by trying to fit a 1 inch pipe with a 25 mm one, or 1 1&#x2F;4\" with a 32 mm. Close but not close enough.However I guess that even American engines are measured in liters or cc, cubic centimeters. reply skissane 2 hours agorootparent> Gas and water pipes are often in inches too (Italy)English inches (now 25.4 mm) or Italian inches? (“once”&#x2F;“oncia”-varied in definition between different parts of Italy, but was always at least a fraction more or less than the English one) reply skissane 6 hours agorootparentprevAre they actually designed and manufactured in inches, or only marketed in inches?Almost everyone called 90 mm floppy disks \"3.5 inch\", despite the fact the formal standard which defined their dimensions was metric. I believe the same was true of the \"5.25 inch\" disks which preceded them. (I think the original 8-inch floppy disks were non-metric though???) reply bmicraft 7 hours agorootparentprevWe do measure TVs in Zoll here in German speaking countries, which has been redefined to exactly 1 in. reply pwagland 10 hours agorootparentprevFooter to your footer. At least in the Netherlands, ounce is still used as well, it&#x27;s defined to 100g. reply wnoise 7 hours agorootparentThat&#x27;s over three times too big though. reply kergonath 4 hours agorootparentin the end, who cares? It’s just a name on a unit. There is no law of nature that puts a limit on its value. There always have been many definitions for an ounce (one of the reason for going metric in the first place); this one is just a bit on the large side. reply wkat4242 10 hours agorootparentprevIn the Netherlands we also colloquially use the &#x27;ons&#x27; (ounce) which is defined though as 100g. reply 0xFEE1DEAD 4 hours agorootparentIn Germany we&#x27;ve got &#x27;Unze&#x27; (ounce) which is defined as ~30g which we only use when talking about precious metals.What we do use is &#x27;Pfund&#x27; (pounds lbs) which is defined as 500g.I am amazed the nations of the world actually came to an agreement about what to use as base units and I can&#x27;t even fathom what shit show it must&#x27;ve been before that.I live a 30min drive away from the Netherlands and your ounce is already 230% more then my ounce. reply e12e 9 hours agorootparentprevBut \"hecto\" (gram) is not used as a synonym? reply c4mpute 9 hours agorootparentIn Germany the short \"hecto\" stands for \"hectoliter\", when ordering larger amounts of beer. reply azepoi 7 hours agorootparentprevThis is commonly used in Italy modified in the form \"etto\" reply wkat4242 8 hours agorootparentprevNo it&#x27;s not, at least not in the Netherlands. reply earthboundkid 9 hours agorootparentprevChina had their own mile. “The journey of a thousand miles begins with a single step” was actually only around 300 English miles long. reply Aerroon 5 hours agorootparentThe modern Chinese li is defined as exactly 500 meters. reply labster 6 hours agorootparentprevKilogram is also an outlier, as it is the only base unit that comes with a magnitude prefix. reply Jedd 10 hours agoparentprev> I wish that all miles were nautical miles because they have a real meaning.Could you define &#x27;real&#x27; here please?This feels like one of those &#x27;customary is better because you can&#x27;t divide 10 by 3 using only integers&#x27; claims.You seem to be asserting that once you divide a circle into 360 arcs, then at a a certain distance from the focus, one of those arcs has a certain meaning.I would say that because ~ 2 millennia ago the Greeks pinched the Babylonian&#x27;s use of 360, and the Babylonians came to that number by perfecting a rough days-in-a-year measurement used for astronomy over the previous 2 millennia, a nautical mile now has a derived &#x2F; coincidental meaning, more so than a &#x27;real&#x27; one.EDIT: And this is before contemplating the complications of living on an oblate spheroid - the NM&#x27;s length depends on where you are. reply nmilo 10 hours agorootparentEach of those arcs do have a meaning, they&#x27;re called &#x27;degrees&#x27; and any human being whose not being obtuse for the sake of argument would tell you that they&#x27;re &#x27;real&#x27;. The point of calling nautical miles &#x27;real&#x27; is that you can do easy mental math with them to express a distance in terms of latitude and longitude. reply Jedd 6 hours agorootparentI think you may have missed my point.The actual length of a nautical mile only makes sense because we have this weird way of measuring earth (based on how we measure circles).NM&#x27;s were obviously defined using that weird numbering system - 360 degrees in a circle, 60 minutes in a degree, 60 seconds in a minute - so it shouldn&#x27;t be a surprise that they &#x27;feel real&#x27; within that system.Given a quarter of the circumference of earth is ~ 10,000km, it seems ripe for using base-10 and metric units ... but for the fact, obviously, that these arc-based-at-6-thousand-km-from-the-centre measurements are highly variable and not hugely useful.> The point of calling nautical miles &#x27;real&#x27; is that you can do easy mental math with them to express a distance in terms of latitude and longitude.And that&#x27;s not true either.At best it works for latitude -- even a small way from the equator you&#x27;ll suffer the effects of longitudinal meridians converging.But at that point, why not just do your mental math in minutes rather than (yet another) mile variant? reply filmor 4 hours agorootparentThe math is not done in ones head but using a plotter on a chart. As long as latitude is defined as it is, nautical miles have meaning. reply kergonath 4 hours agorootparentprevRight, but what’s the point of arguing about the real-ness of something you’re using without verifying it ever. The equator (or the 45th parallel, or any meridian) is not a circle; nobody ever said anything like “man, it’s so much more natural that the equator is 21638.778 nmi instead of that ugly 40,075.017 km”. reply wnoise 7 hours agorootparentprevWell, latitude, or longitude at the equator. reply _dain_ 11 hours agoparentprevI wish those medieval people had defined it as 5040 feet, then it would be divisible by 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 24, 28, 30, 35, 36, 40, 42, 45, 48, 56, 60, 63, 70, 72, 80, 84, 90, 105, 112, 120, 126, 140, 144, 168, 180, 210, 240, 252, 280, 315, 336, 360, 420, 504, 560, 630, 720, 840, 1008, 1260, 1680, and 2520. reply HPsquared 10 hours agorootparentFor reference, 5280 = 2^5 × 3 × 5 × 11(8 prime factors, 4 distinct)So 5280 is better if you want to divide by 11, I guess! What a strange thing, how on earth did it end up with a factor of 11 in there...Edit: it&#x27;s complicated: https:&#x2F;&#x2F;math.ucr.edu&#x2F;home&#x2F;baez&#x2F;inches.html reply sokoloff 10 hours agorootparentThere are 11 fathoms in a chain, 10 chains in a furlong, and 8 furlongs to a mile.Going the other way, 2 yards in a fathom and 3 feet in a yard. That accounts for all the factors above. reply Tempest1981 2 hours agorootparentprevIs that why we have 90 degrees in a right angle, instead of 100?90: 2, 3, 5, 6, 9, 10, 15, 18, 30, and 45100: 2, 4, 5, 10, 20, 25, and 50If we used grads, it would be a nice even 100,000 meters per grad, vs 111,111.111 per degree. reply chungy 11 hours agorootparentprevConnecting 1 mile to 5280 feet happened many centuries after the medieval period. Such precision wasn&#x27;t really possible nor desired before the 18th century.To be specific, 5280 feet = 1 mile didn&#x27;t happen until 1959 and the United States needed higher precision and remove all the fuzziness out of the units. It might be inconvenient on some aspects, but it was also \"close enough\" to what miles were already established to be. reply _dain_ 11 hours agorootparent>To be specific, 5280 feet = 1 mile didn&#x27;t happen until 1959 and the United States needed higher precision and remove all the fuzziness out of the units. It might be inconvenient on some aspects, but it was also \"close enough\" to what miles were already established to be.uh what? are you sure you&#x27;re not mixing that up with the international geophysical year or something? the mile has been 1760 yards since before the US even existed. it&#x27;s called the imperial system because of the british empire. they couldn&#x27;t have done the great trigonometrical survey of india without an accurate mile. reply twic 11 hours agorootparent1959 must be referring to this: https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;International_yard_and_pound reply throwawaylinux 10 hours agoparentprevI&#x27;m not a sea dog (or air dog), but even absent electronic calculation and navigation devices of the last half century or so, is there any real advantage to using nm vs any other unit? Other than for the presumably niche case of traveling exactly directly along the equator, that is.nm are great because charts and speeds are in units of nm and kt of course, but what does \"real meaning\" give you exactly? reply kuhewa 7 hours agorootparentAm sea dog, I think it&#x27;s just a little bit of smugness. Because it doesn&#x27;t generally help (besides quickly estimating latitudinal distance or near-equatorial distance), unless you are actually doing dead reckoning with a chart or similar, which is rare today.The equivalency with knots is great and all but it too is just a convention reply ryandrake 10 hours agorootparentprevTo be precise, a nautical mile is always a minute of latitude, everywhere on earth. It is only a minute of longitude at the equator. reply throwawaylinux 10 hours agorootparentAh, good point. In that case expand the niche cases to traveling due north or south. reply jabl 3 hours agorootparentIn practice, when navigating by pen and paper, what you do is you measure a distance on the chart with a divider, then you put the divider (with the previously measured distance set) to the north-south scale on the side of the chart to read out the distance in nautical miles.Now, of course, in principle charts could have a separate scale for distances in km, and we could use km for navigation just fine. But, well, I&#x27;ve never seen a nautical chart with such a scale. reply wkat4242 10 hours agorootparentprevAnd, at sea level. At altitude this no longer applies either because the circumference at altitude is greater. reply pbmonster 3 hours agorootparent...by around 0.1%. Which is why nobody is bothering with it, considering how susceptible to wind speed distances and velocities are up there. reply closewith 6 hours agorootparentprevWell, it still applies in aviation, as distance and ground speed used in navigation are measured at sea level irrespective of altitude. reply yread 2 hours agorootparentprevIt fits with the other unit: 1 knot is 1 minute of latitude per hour reply ianburrell 6 hours agorootparentprevI think the only advantage is when using old navigation devices. You measure altitude of sun at noon and that is your latitude, time of noon is your longitude. It also only works when going east-west, it falls apart any other angle.These days, everybody has plotter or phone to measure position and speed and calculate distances. reply mcpackieh 3 hours agoparentprevWhat good is converting miles into feet anyway? I&#x27;ve never found a reason to perform that conversion, or reverse. A mile is just an arbitrary unit of distance that doesn&#x27;t need to be related to any other. Even in sports, swimmers may casually call a 1650 yard swim &#x27;a mile&#x27; but if you do the conversion it isn&#x27;t. That doesn&#x27;t matter to anybody though.To be perfectly honest, I never remember how many feet are in a mile and the only times I&#x27;ve looked it up have been to calculate some meaningless trivia like how many tape measures it would take to stretch across the country, or some useless nonsense like that. Even then I usually just approximate 3 feet to a meter and 1.6 km to a mile, close enough. reply Timon3 1 hour agorootparentThe most simple example is adding or subtracting distances. You might say you don&#x27;t need that, but I&#x27;d wager most people need to at some point. reply andreygrehov 7 hours agoprevrant: I live in the US for more than 10 years and I still can&#x27;t get used to the imperial system. I never will. It just doesn&#x27;t make any sense to me. The metric system is pure gold: 1cm = 10mm 1m = 100cm 1km = 1000m 1kg = 1000g 1ton = 1000kgThe imperial system is like, hold my beer: 1in = ??? 1ft = 12in 1yd = 3ft 1mile = 5280ft 1lb = 16ozJesus Christ, who the hell came up with this madness? reply thomasahle 5 hours agoparentWhat I&#x27;ve come to realize, also from living in the US, is that most Americans just don&#x27;t convert between units. Unless they really have to. That way the issue does&#x27;t really come up much.I notice it most when things here by chance are done in metric, but the units still aren&#x27;t converted. E.g. I might see something listed at 1000mL, instead of just writing 1L. Or 3500g instead of 3.5kg.Sometimes a European might say \"This way is 600m, but that way is 1.2km\", an American would never say \"This way is 800 yards, but that way is a mile\". A European might say \"I had to carry 4L of water, so my bag got 4kg heavier\". An American might say \"My bottle is 24 (fluid) oz, so it&#x27;s about 24 (weight) oz\", but if it&#x27;s a gallon, they probably just say it weights around a gallon.All I&#x27;m saying is that the conversion problem has turned out to be less of an issue than I imagined. Simple because Americans don&#x27;t run around converting their units every sentence. reply thiht 3 hours agorootparentIt seems like many Americans are really confused about weights and volumes, because of this unit system.Like if you say to use 300g of flour, the response will automatically be « How many cups is that ? ». And the answer is that you can’t measure flour correctly by volume. reply progbits 2 hours agorootparentMeasuring dry ingredients by volume is like a recipe brown M&M, at that point you know the recipe is bad and you should look for another one. reply josefx 1 hour agorootparentprev> I notice it most when things here by chance are done in metric, but the units still aren&#x27;t converted. E.g. I might see something listed at 1000mL, instead of just writing 1L. Or 3500g instead of 3.5kg.I see things like this constantly in shops in Europe. I think it is part of a dark pattern to make price comparisons less intuitive and even misleading if you just skip over the prices trying to find the cheapest. What is cheaper, the product advertised as $X per liter or the one priced $Y per 100ml? There usually isn&#x27;t a significant difference in packaging volume or usage that would otherwise explain why anyone would use different units for each. reply gield 16 minutes agorootparentIn almost every European country, stores must show the price per liter or kg. reply allarm 1 hour agorootparentprev> I see things like this constantly in shops in Europe. I think it is part of a dark pattern to make price comparisons less intuitiveIn Germany they put the price of a unit on the price tag. So that you can clearly see that 0.33 bottle of Coke is more expensive (per liter) than the 1l. reply Glawen 12 minutes agorootparentGermany is a big user of the trick \"lemme change the unit from €&#x2F;kg to €&#x2F;100g in this part of the shop\", for example at the cheese counter, which is what the parent is saying. It was the same trick used in the UK. I believe it comes from a european rules which allows such labeling if the packaging is small.In France it is always labelled in €&#x2F;kg or €&#x2F;L consistently through the shop. reply saiya-jin 2 hours agorootparentprev... which is a natural result of such an obscure system that is needlessly complex for everybody involved. If you can&#x27;t do conversions on spot as a population, you simply over time don&#x27;t do it and this state becomes natural. Just like for us literally everywhere else in the world we convert and literally everybody with even very subpar intelligence can be discussed with in such units.Suffice to say, we had tons if very similar obscure systems in medieval Europe, even my tiny eastern country had at least 6 with various absurd conversion schemes for lengths, volumes and weights. These days we go to museums or medieval wiki pages if we want to see that. The thing is, we moved to modern era and absolutely nobody looks back.I suspect with US its more an ego thing and swallowing pride that somebody else can he it simply better, rather than anything else. I mean whenever US actually needs to do some proper science and achieve great stuff, it turns quietly to metric&#x2F;liters&#x2F;kilograms. We have 10 fingers 100% of the time right in front of our face and everybody learns to count on them first, there is really nothing more natural. reply cj 7 hours agoparentprevI think there’s even a lot of people who grew up in America that don’t fully get our system.I would be surprised if more than 50% of the population knows how many ounces are in a cup of water. Same for feet per mile, etc.Thank goodness even in the US the metric system is used as standard within the science community. reply shantnutiwari 1 hour agoparentprev> Jesus Christ, who the hell came up with this madness?They made historical sense.A foot is the distance in one step (ie, a foot placed after the other). A mile was the distance a person could walk in an hour. A pound was roughly a fist worth&#x27;s of meat-- so if a piece of meat was fist sized it was roughly a pound in weight.These were intuitive units that made sense when they were invented. It was only later on when we needed more accuracy that the metric system was invented reply hanche 3 hours agoparentprevYou missed a few intermediate units, which might help somewhat to explain it:Derived from surveyors’ tools, a chain is 22 yards. (It is also 4 rods, making a rod equal to 5½ yards; go figure.) Ten chains make a furlong, and there are 8 furlongs to a mile. So there you are. Incidentally, an acre is 1 furlong × 1 chain. It may be madness, yet there’s system in ‘t. reply larsnystrom 3 hours agorootparentThis is one of those cases where I can’t tell if a comment is sarcastic or not. reply hanche 2 hours agorootparentThose cases are the best, are they not? But yeah, a large dose of sarcasm was intended. And a little bit of seriousness. reply parasti 3 hours agoparentprevAs a European having watched many house framer videos on Youtube, the imperial system of in&#x2F;ft actually somehow makes sense there. As far math, it&#x27;s pretty annoying, but as far as communicating ratios or dividing distances into halves or fourths, it seems like a better fit to the human brain. reply jeffchien 3 hours agoparentprevUnit conversions are inconvenient for sure, but I think the worst part is actually fractional length measurements. It may make sense for woodworking and handicraft, which I assume is the origin, but for any other use? Try reading 2 3&#x2F;16\" on an imperial ruler as quickly as 5.6cm. Screw sizes also get affected by this. reply db48x 7 hours agoparentprev> 1in = ???What do you need to convert those inches into? Why would you ever need to convert those inches into miles? Nothing you will ever do in life requires you to convert between inches (or feet and inches) and miles. reply mikhailfranco 3 hours agorootparentA reservoir is 3 sq miles, the level rises by 7 inches. How many acre-feet of water have been added :) reply db48x 39 minutes agorootparentThe owner of the reservoir doesn’t bother to measure it in square miles, he measures the acreage. Then the acre–feet becomes a trivial computation. Yes, if pressed he might dredge up the obscure fact that a square mile is 640 acres, but then he would have to do long division to convert it, and the whole point is to avoid that kind of complexity. reply mikhailfranco 1 hour agorootparentprevBonus point: how many cubic yards of water added? reply ajuc 1 hour agorootparentprevYou have to lay 3miles of pavement, 5 feet wide, bricks are 5x10 inches. How many bricks to buy?You have 4 square mile of land with dense forest. Trees grow 5 feet apart and are 10 inches thick on average. How many trees are there? How much wood can you expect?There&#x27;s 5 inches of snow on your 5000 square feet roof. How much does it weight? Can it break the roof? Should you clean it up or can it stay?These things are mental-math in metric and notebook-math in imperial, and that sucks.Of course you can work around that. People always avoid the bad parts of the tools they use and find workarounds. Like not using exceptions in C++ or comparisons in javascript. If it&#x27;s a widely used tool you know it has to work somehow.Thus Americans never convert between units unless absolutely necessary and write press articles like \"Asteroid the size of 3 elephants missed Earth by 1000 football stadiums\" :)But let&#x27;s not pretend it&#x27;s not a problem. reply mitthrowaway2 5 hours agorootparentprevDo you buy gravel by the cubic mile then?Weird real-life unit conversions come up all the time, often when you need to calculate a net weight or price, and you have some big surface area (eg. a road, with width in yards + feet, thickness in inches, and length in miles), and your gravel supplier prices by ton, and you look up the density in a conversion table and see something like lbs&#x2F;ft^3, and now you have a whole bunch of opportunities to make a mistake. reply db48x 5 hours agorootparentGravel is purchased by the yard, not by the cubic inch or mile. reply mitthrowaway2 5 hours agorootparentI&#x27;m certain it&#x27;s by weight, but either way, I don&#x27;t see that helping much. reply pangolinja 1 hour agorootparentprevPrinting measures go smaller than an inch. The width of printed columns is measured in “picas.” 12 “points” equal one “pica”; 6 picas equal 1 inch. We still use those in image resolution measurements. reply db48x 47 minutes agorootparentYes, this is a great example of what I mean by everything having their own set of units! reply 8organicbits 6 hours agorootparentprevDo you mean because people just use metric in those contexts, or that everyone avoids math?I assure you people regularly figure out how many small things fit in a large thing. I places where those things are measured in feet and miles, that&#x27;s what they&#x27;d use. reply db48x 21 minutes agorootparentI mean that in every context where a person would ever have to convert units or do long division, we invent a new set of units instead.Others have given other examples, such as printers who divide the inch into points and picas. They do this because it makes figuring out how many characters fit in a line of type easier than if they measured the type in fractions of an inch. It lets them work with integers instead of fractions all day. Of course these days it’s all computer–driven and it hardly matters what units printers use; the computer does the counting and could just as easily do it in fractions of an inch. reply invalidator 7 hours agoparentprev> 1in = ???25.4 mm, ever since 1959 when we redefined it. reply rmu09 1 hour agorootparentI believe an opportunity was missed some time ago in the past to define one inch to 25.6mm, which would make for much nicer conversions IMO, especially with the convention to use fractions of powers of two in the inch world (e.g. 15&#x2F;16\" would be 24mm exactly vs. 23.8125mm). reply mikhailfranco 4 hours agoparentprevAnd even the beer you are passing is a 16oz pint, not a 20oz pint, as in the UK. reply pbhjpbhj 1 hour agorootparentA &#x27;pint&#x27; in the UK is 568ml, still I think. Maybe REUL will undo that. Some places you get half-litres. reply apengwin 6 hours agoparentprevAn inch is an inch. reply hanche 3 hours agorootparentNot so quick: One inch may be 1&#x2F;12 of a foot, but a foot is not necessarily a foot. The international foot is 12×2.54 mm, but a US survey foot is 1200&#x2F;3937 m. The ratio of the definitions is 500000&#x2F;499999. reply HPsquared 11 hours agoprevAnd 1 nanosecond at light speed ≈ 1 foot reply chungy 11 hours agoparentThat&#x27;s remarkably close to reality. I&#x27;m impressed :) $ units c ft&#x2F;ns * 0.98357106 reply maxmcd 11 hours agorootparentAdmiral Grace Hopper Explains the Nanosecond: https:&#x2F;&#x2F;youtu.be&#x2F;9eyFDBPk4Yw reply dylan604 8 hours agorootparentThe first time I saw one of her demonstrations of a nanosecond, I was confused when she pulled out a length of wire. I don’t remember what class it was in or what context the video was being used, but this was 6th grade reply Mountain_Skies 8 hours agorootparentPossibly an urban legend but there&#x27;s a story about a company in India that ordered a Soviet made computer system that has an sloppy spool of wire attached to the main board. They contacted the Soviet institute that built the computer system and it was explained that the computer needed a timing delay between two components but didn&#x27;t have the proper ICs on hand so they used a precise length of wire to introduce the needed delay to make the timing correct. reply defrost 7 hours agorootparentAs a stone cold fact physical mediums with known delay timings were once used as memory storage for computers and as \"echo removal\" filters in radar installations. Although a mathematician, Turing took quite an interest in the engineering side of computer design. There was some discussion in 1947 as to whether a cheaper substance than mercury could not be found for use as an ultrasonic delay medium. Turing&#x27;s contribution to this discussion was to advocate the use of gin, which he said contained alcohol and water in just the right proportions to give a zero temperature coefficient of propagation velocity at room temperature.~ MAURICE V. WILKES 1967 A CM Turing Lecturehttps:&#x2F;&#x2F;sci-hub.ru&#x2F;10.1145&#x2F;321439.321440https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Delay-line_memoryhttps:&#x2F;&#x2F;www.theregister.com&#x2F;2013&#x2F;06&#x2F;28&#x2F;wilkes_centenary_merc... reply foobarian 6 hours agorootparentThey are still used to test networking equipment under long propagation delays. Spools of fiber hundreds of miles long. reply db48x 6 hours agorootparentprevThere were a lot of delay–line memories back in the day. It wasn’t just that they didn’t have memory chips; memory chips hadn’t been invented yet.https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=2BIx2x-Q2fE reply mikhailfranco 4 hours agorootparentprevThis is the method used to add delays for HFT to ensure fair(er) markets for all participants on the IEX exchange.Flash Boys, Michael Lewishttps:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Flash_Boys reply dylan604 7 hours agorootparentprevBack in the old days of analog video, component video was three separate cables. When we made custom cables, we had to ensure the cables were the same length to ensure the timing was within tolerance. The day we got to switch to digital SDI which also included audio as like a gift from the gods reply franky47 2 hours agorootparentThis was probably also due to impedance matching between all the lines involved.Digital signals (when using N&#x2F;P balanced lines) also have this problem, to a lesser extent. Some CAD EE design software have ways to design squiggly traces to balanced impedances in traces that have to go around corners on the PCB and end up with different lengths. reply crote 7 hours agorootparentprevThis is still a problem for modern multi-lane digital connections, like PCI Express. The solution? Make each individual lane self-timing, and compensate for it digitally in the receiver buffer. replyacidburnNSA 11 hours agorootparentprevGNU units is one of my favorite tools. reply dredmorbius 9 hours agorootparentkragen&#x27;s recent HN comment is a gold mine: reply omoikane 9 hours agorootparentprevIf you like approximations, there is also https:&#x2F;&#x2F;xkcd.com&#x2F;1047&#x2F; reply tomjakubowski 9 hours agorootparentmy favorite of these not on the xkcd is that there are pretty close to ~5e5 + (5% of 5e5) seconds in 365 24-hour days (a very naive \"year\")That&#x27;s to say, 500000 + 25000 is very nearly 525600. It&#x27;s only off by ten minutes! reply teo_zero 3 hours agorootparentSurely you mean minutes, not seconds. And it&#x27;s off by 10 hours. reply voxelghost 8 hours agorootparentprevYou need bigger feet reply earthboundkid 9 hours agoparentprevYeah, I think it would be neat to change time to be defined as 1 chrono = how long it takes for light to go 1e9 meters. 1 kilochrono is 55 minutes. Useful enough for space travel type situations where you can’t rely on solar days for units. reply jabl 3 hours agorootparentWell, nowadays the meter is defined in terms of the second, so that would be a circular definition. ;) reply p_l 1 hour agorootparentAnd second is defined based on specific properties of caesium 133, which doesn&#x27;t depend on solar time reply bgribble 11 hours agoparentprevAnd 1 millisecond at the speed of sound ≈ 1 foot as well reply haberman 6 hours agorootparentCame here to say this. It follows that light is ≈1 million times the speed of sound. reply stereo 11 hours agoparentprevAnd the number of seconds in a year is π*10^7, or close enough. reply cperciva 10 hours agorootparentEquivalent but perhaps more catchy: \"Pi seconds are a nanocentury\". reply fsckboy 7 hours agorootparentso to measure a nanocentury you should basically count 3 thousands ... if you want a few more digits of accuracy, count the 3 thousands plus (√2)&#x2F;10 reply acidburnNSA 11 hours agoparentprevAnd 1 googol femtobarns ≈ 1 square teraparsecs reply Waterluvian 10 hours agoprevBut given the Earth is an oblate spheroid won’t the actual arc length of 1 degree of latitude be variable?Or does “reliably” just mean “close enough to be useful”?Gah. I’ve been doing non-geography work for far too long. I used to know this stuff. reply mholt 7 hours agoparentReliably means close enough to be useful, but the estimation is also quite precise where most populations live.My use case which led me to discover this fact is sort of documented here: https:&#x2F;&#x2F;twitter.com&#x2F;mholt6&#x2F;status&#x2F;1695685022710477043 -- even if my use case did have whole kilometers of displacement, it wouldn&#x27;t likely be near the poles, and if it was, the answer would be, \"Meh, we get it, you&#x27;re at the pole.\" reply ragazzina 2 hours agoparentprevThe Earth diameter at the equator is 43 km larger than at the poles.It&#x27;s like the Earth orbit: we learn in school that it&#x27;s an ellipse, but we are never actually given a sense of the shape, and most of the drawings give a completely wrong idea. reply NelsonMinar 11 hours agoprevThis post also has a nice rule of thumb that 111,111 * cos(latitude) meters is 1 degree of longitude. I like the correction! In practice you can use some simple constants; 25° is about 100,000 meters. 44° is about 80,000 meters. 57° is about 60,000 meters. reply nixass 1 hour agoprev [–] How many football fields is that? replyGuidelinesFAQListsAPISecurityLegalApply to YCContact Search:",
    "originSummary": [
      "Geographic Information Systems (GIS) Stack Exchange is a platform for cartographers, geographers, and GIS professionals to ask and answer questions.",
      "A user is seeking an algorithm to offset latitude and longitude coordinates by a specific distance in meters for their work on an embedded system.",
      "Vincenty's direct formula is suggested as a potentially helpful algorithm for this purpose, as it is known for its speed and accuracy."
    ],
    "commentSummary": [
      "The discussion explores the reliability of 1 degree of latitude as a unit of measurement and the limitations of latitude and longitude coordinates.",
      "It delves into the history and redefinitions of the meter, highlighting the advantages and disadvantages of different measurement systems like metric and imperial.",
      "It addresses the resistance to metrication in the US and the confusion caused by the imperial system, while also discussing the realness and usefulness of nautical miles. Additionally, it touches on unit conversions and the complexities of measurements in different contexts."
    ],
    "points": 297,
    "commentCount": 209,
    "retryCount": 0,
    "time": 1693155631
  },
  {
    "id": 37281745,
    "title": "Overthewire.org",
    "originLink": "https://overthewire.org/wargames/",
    "originBody": "OverTheWire We're hackers, and we are good-looking. We are the 1%. Wargames Information Online Bandit Natas Leviathan Krypton Narnia Behemoth Utumno Maze Vortex Manpage Drifter FormulaOne Offline Semtex Released HES2010 Abraxas Monxla Kishi Wargames The wargames offered by the OverTheWire community can help you to learn and practice security concepts in the form of fun-filled games. To find out more about a certain wargame, just visit its page linked from the menu on the left. If you have a problem, a question or a suggestion, you can join us via chat. Suggested order to play the games in Bandit Leviathan or Natas or Krypton Narnia Behemoth Utumno Maze … Each shell game has its own SSH port Information about how to connect to each game using SSH, is provided in the top left corner of the page. Keep in mind that every game uses a different SSH port. Donate! Help!?",
    "commentLink": "https://news.ycombinator.com/item?id=37281745",
    "commentBody": "Overthewire.orgHacker NewspastloginOverthewire.org (overthewire.org) 297 points by ghostfoxgod 22 hours ago| hidepastfavorite45 comments beardedwizard 17 hours agoYou can&#x27;t talk about OTW without talking about smash the stack. The best part of all of these communities was the accompanying irc channels, which are mostly dead now. Jduck, spender, many other known names hung out and you could really learn from the best if you could handle the abuse. The scene exists in kind of a zombie state now, the games are mostly up to date but ... reply _def 14 hours agoparent> you could really learn from the best if you could handle the abuseCare to elaborate? I assume there was cliche rough tone and elitism going on, but I don&#x27;t know reply beardedwizard 13 hours agorootparentThe price for saying something ignorant was usually pretty high in the form of verbal abuse, and you had to be willing to cater to that elitist attitude in many cases. Infosec had, and continues to have a gate keeping problem. The strange thing to me is that the scene pretty much died, but these zombies live on, half alive but without a strong community talking about them.Btw not talking about spender or jduck here, just the scene overall. reply andai 10 hours agorootparent>scene pretty much diedDid they finally have kids? reply grayhatter 10 hours agorootparentprevCommunity infosec does have an asshole problem, but not a gatekeeping problem.Every single infosec community I grew up in was more than willing to share knowledge and the only requirements were a willingness to learn and ask questions. And skin thick enough to tolerate rudeness if there was any disagreement.Unless I misunderstood what you meant by gatekeeping? reply beardedwizard 5 hours agorootparentI regret to inform you these are exactly the same thing. reply pooloo 13 hours agorootparentprevThat was pretty much any IRC community reply beardedwizard 5 hours agorootparentFor sure, and still is in many cases. I&#x27;m used to it tbh, but the HN community has plenty of folks who don&#x27;t understand and have no need to tolerate or adapt to that kind of stimulus. reply psychphysic 11 hours agorootparentprevThere were always elitist channels but they&#x27;d be invite only.The rest you could lurk in however much you wanted. reply stevehawk 11 hours agorootparentlol, been in #linux in the last.. say.. twenty years? reply beardedwizard 5 hours agorootparentOr #c replylilboiluvr69 14 hours agoparentprevKnow of any modern communities with a similar spirit and ethos in the same scene? reply archgoon 14 hours agorootparentThe ctf community is fairly active.Http:&#x2F;&#x2F;ctftime.org reply asicsp 21 hours agoprevSee also:* https:&#x2F;&#x2F;linuxsurvival.com&#x2F;* https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;linuxupskillchallenge&#x2F;* https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;TUI-apps (written by me, interactive exercises for grep, sed, awk, etc) reply ghostfoxgod 20 hours agoparentThanks for sharing these. reply dang 15 hours agoprevRelated:Wargames can help you to learn and practice security concepts through games - https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=29724594 - Dec 2021 (26 comments)The Bandit Wargame - https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=29708304 - Dec 2021 (1 comment)OverTheWire: Wargames to learn and practice security concepts - https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=16252873 - Jan 2018 (23 comments)Wargames - https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=9878302 - July 2015 (17 comments) reply mrmincent 18 hours agoprevI recently completed a grad Cert in cyber security, and a large initial part of the practicals were to just go through otw and complete some of the lessons. It’s a great resource, and had I known about it before hand I probably wouldn’t have bothered paying so much for the course and just completed the otw exercises instead :&#x2F; reply asynchronous 9 hours agoparentReally I think that just speaks to the weakness of grad level certs. OTW and it’s offerings are fantastic but still entry level. reply mrmincent 9 hours agorootparentYep, I definitely wouldn’t have done the grad Cert if I knew how weak it would be, was very expensive and very disappointing. reply ghostfoxgod 17 hours agoparentprevAsking out of curiosity, have you completed otw completely? How much of it do you feel it helped you in your course?I&#x27;m already learning so much from the bandit exercises itself (which I believe are for entry level folks) So completing all of it would be so fascinating. reply mrmincent 17 hours agorootparentNice! I certainly haven’t completed all of them, just bandit, the web based one, and one of the mediumish ones, and maybe not even all of it, I can’t remember which one tbh. Definitely a fantastic learning resource, once my brain has had a bit of downtime from the course I’m planning on going back and doing more otw. reply dijit 18 hours agoprevI&#x27;ve been sort-of adjacent to a lot of these groups when they were in their infancy (hackr.org darkdevelopments.com ssgroup.org etc;) and it&#x27;s really cool how the majority of the kids who were running those sites in the 2000&#x27;s are now so keen to create better environments for others to learn.Hackthissite and websec.fr are other excellent resources from the same pedigree of people reply jedimastert 19 hours agoprevAlso adding an absolute classic (at least in my mind):https:&#x2F;&#x2F;www.hackthissite.org&#x2F; reply d1str0 18 hours agoparentI used to be a dev for them. HTS is how i got started with computer science. reply junkypuppet 18 hours agoprevSomething similar for PowerShell:https:&#x2F;&#x2F;underthewire.tech&#x2F;wargames reply jslakro 2 hours agoprevI remember the Matasano challenges around cryptography https:&#x2F;&#x2F;cryptopals.com&#x2F; reply rgovostes 15 hours agoprevCoincidentally I just found the lost sources to a binary reverse engineering challenge I wrote in 2010. Compile it without peeking (use the “modern” branch, follow README instructions for patching bomb.c).https:&#x2F;&#x2F;github.com&#x2F;RPISEC&#x2F;csci-4971-bomb reply ajolly 9 hours agoparentThat was a great exercise when I was starting out. Thanks for designing it! reply jpfr 14 hours agoprevNice. I recall there were .txt files in the filesystem where you could leave your name and a shoutout after completing a level. Mostly „Kilroy was here“ equivalents. But it felt oh so 1337 hacker to add yourself. Quite the motivation boost for a teenager. :-)Also see https:&#x2F;&#x2F;microcorruption.com. You don’t need Linux-specific knowledge. It directly goes to MSP430 assembly. A nice and compact introduction to exploiting binaries and embedded systems. reply ghostfoxgod 22 hours agoprevCame across this site which was suggested by a friend of mine. After solving few of the problems, I have reached the moment of \"wow I did not know about this at all\" and it&#x27;s exciting to learn more about Linux ecosystem in general.Would highly recommend anyone who is keen to learn and explore Linux.Shoot me a DM [1] if you wish to form a small group to solve and discuss these questions together once in a while.[1] https:&#x2F;&#x2F;twitter.com&#x2F;akashwhocodes reply runnerup 15 hours agoparentI don&#x27;t use X but I&#x27;d be interested nonetheless. Can email me at HNrunnerup@protonmail.com reply em-bee 18 hours agoprevi hate it when sites are posted with out any descriptive title ;-) then i am curious, and end up getting drawn in.now i want to run: ssh level0 command to read pw1sshpass ssh level1 command to read pw2sshpass ssh level 2 ... reply ghostfoxgod 18 hours agoparentHahaha hop aboard, I am currently ssh-ing as well ;) reply natrys 19 hours agoprevSome more: https:&#x2F;&#x2F;pwnable.kr&#x2F;play.php reply dancosta0601 14 hours agoprevI have played it some years ago, it&#x27;s very good to start learning about wargames and hacking competitions reply mettamage 18 hours agoprevI trained a lot at hackthebox.eu reply nickysielicki 11 hours agoprevIt&#x27;s cool to go through how much these challenges are irrelevant in 2023 due to things like ASLR, better compiler warnings, etc. reply grayhatter 10 hours agoparentI&#x27;m not sure I would consider any of these to be relevant... just because the exploits don&#x27;t work doesn&#x27;t mean the skills learned to complete them don&#x27;t transfer. by that argument HTML is irrelevant because everyone uses [JavaScript-Framework] now. reply nickysielicki 9 hours agorootparentDo the skills actually transfer? If your goal is to learn assembly and&#x2F;or how a computer executes code, you can probably learn that more directly by spending an afternoon on godbolt. If your goal is to learn computer security, I&#x27;m not sure there&#x27;s really much transfer to be had here. Most of the interesting computer security things to know are at a much higher elevation now.Many of these will simply not compile without explicitly disabling a compiler warning, and except in rare cases, the rop challenges are impossible.I&#x27;m just commenting on what a huge win I feel it is for the software industry that in the past 15 years these went from \"copy the binary to your local machine and it works exactly the same, gcc doesn&#x27;t even warn about this\" to \"it doesn&#x27;t realistically have this vulnerability when run on your machine, nor will it build from source on your machine.\"edit: wikipedia is claiming linux has had ASLR since 2005 so maybe I&#x27;m wrong. reply jasonladuke0311 8 hours agoparentprevI bet quite a few IoT devices would fall to these irrelevant attacks reply LordShredda 11 hours agoparentprevThey&#x27;re irrelevant until you find a hospital cutting IT funding and the devs don&#x27;t know what they&#x27;re doing. reply rs_rs_rs_rs_rs 20 hours agoprevVery good wargames! Learned a lot from them.My suggestion for those wanting more ishttps:&#x2F;&#x2F;exploit.education&#x2F; reply eqmvii 18 hours agoprevhappy to see this every time it comes around reply throw1234651234 15 hours agoprevI treat overthewire as a practical bash refresher, rather than learning how to hack. I can&#x27;t get past the easiest set of problems without spending a ton of time on it, but it&#x27;s good to remember the basics now and again. reply ghostfoxgod 18 hours agoprev [–] I&#x27;m also planning to jot down the approach and strategy into short form blogs as and when I keep solving them and publish it on my blogging site [1]. This will help me keep coming back to it and revise it more easily.[1]: https:&#x2F;&#x2F;akashrajpurohit.com&#x2F; replyGuidelinesFAQListsAPISecurityLegalApply to YCContact Search:",
    "originSummary": [
      "The OverTheWire community provides wargames to help individuals learn and practice security concepts.",
      "These games can be accessed through SSH on various ports.",
      "The community offers a chat platform for users to seek assistance, ask questions, or provide suggestions. Plus, there is a donation plea available for those interested in supporting the community."
    ],
    "commentSummary": [
      "Overthewire.org is a website that provides wargames for learning about computer security and hacking.",
      "Participants in the discussion share their experiences with the challenges and recommend other similar resources.",
      "Some participants note that these types of challenges are becoming less relevant due to advancements in security measures like ASLR and better compiler warnings."
    ],
    "points": 295,
    "commentCount": 45,
    "retryCount": 0,
    "time": 1693137236
  },
  {
    "id": 37283375,
    "title": "Some of the error messages produced by Apple's MPW C compiler (2006)",
    "originLink": "https://www.cs.cmu.edu/~jasonh/personal/humor/compile.html",
    "originBody": "These are some of the error messages produced by Apple's MPW C compiler. These are all real. (If you must know I was bored one afternoon and decompiled the String resources for the compiler.) The compiler is 324k in size so these are just an excerpt I hope. I'm not sure where I stand on the copyright issue. Tony Cunningham \"String literal too long (I let you have 512 characters, that's 3 more than ANSI said I should)\" \"...And the lord said, 'lo, there shall only be case or default labels inside a switch statement'\" \"a typedef name was a complete surprise to me at this point in your program\" \"'Volatile' and 'Register' are not miscible\" \"You can't modify a constant, float upstream, win an argument with the IRS, or satisfy this compiler\" \"This struct already has a perfectly good definition\" \"type in (cast) must be scalar; ANSI 3.3.4; page 39, lines 10-11 (I know you don't care, I'm just trying to annoy you)\" \"Can't cast a void type to type void (because the ANSI spec. says so, that's why)\" \"Huh ?\" \"can't go mucking with a 'void *'\" \"we already did this function\" \"This label is the target of a goto from outside of the block containing this label AND this block has an automatic variable with an initializer AND your window wasn't wide enough to read this whole error message\" \"Call me paranoid but finding '/*' inside this comment makes me suspicious\" \"Too many errors on one line (make fewer)\" \"Symbol table full - fatal heap error; please go buy a RAM upgrade from your local Apple dealer\"",
    "commentLink": "https://news.ycombinator.com/item?id=37283375",
    "commentBody": "Some of the error messages produced by Apple&#x27;s MPW C compiler (2006)Hacker NewspastloginSome of the error messages produced by Apple&#x27;s MPW C compiler (2006) (cmu.edu) 256 points by Asdrubalini 19 hours ago| hidepastfavorite129 comments jonhohle 18 hours agoI miss this kind of playfulness in computing.When I was at Amazon my manager told me that several years earlier he was responsible for updating the 404 page so he scanned a picture of a cat his daughter drew and made that the body of the page. In 2009 when I started, that was still the image, but at some point someone must have noticed and replaced it with a stock photo of a dog. The asset was still called kayli-kitty.jpg, though. It’s since been changed again to rotating pictures and references to the original are gone. reply varun_ch 14 hours agoparentThis is really cool! The filename on certain Amazon 404 pages (eg. https:&#x2F;&#x2F;www.amazon.co.jp&#x2F;404) is still kailey-kitty.gif (but the image has been replaced with a standard icon).I also found this comment from him on a blog: https:&#x2F;&#x2F;www.davebellous.com&#x2F;2006&#x2F;09&#x2F;25&#x2F;what-the&#x2F;#comment-290... reply hgs3 18 hours agoparentprev> The compiler is 324k in sizePlayfulness isn&#x27;t the only thing we&#x27;ve lost. Software bloat has reached comedic levels. reply retrac 18 hours agorootparentYour optimizing compiler today will actually optimize. LLVM was recently ported to the 6502 (yes, really) [1]. An example: void outchar (char c) { c = c0x80; asm volatile (\"jsr $fbfd\\n\" : : \"a\" (c): \"a\"); } void outstr (char* str) { while (*str != 0) outchar(*str++); } void main () { outstr(\"Hello, world!\\n\"); }That is compiled to this: lda #$c8 ; ASCII H0x80 jsr $fbfd lda #$e5 ; ASCII e0x80 jsr $fbfd ...Unrolled loop, over a function applied to a constant string at compile time. An assembler programmer couldn&#x27;t do better. It is the fastest way to output that string so long as you rely on the ROM routine at $fbfd. (Apple II, for the curious.) Such an optimizing transform is unremarkable today. But stuff like that was cutting edge in the 90s.[1] https:&#x2F;&#x2F;llvm-mos.org&#x2F;wiki&#x2F;Welcome reply MatthiasPortzel 15 hours agorootparentI understand your point, but LLVM-MOS is a bad example. You gain LLVM’s language optimizations, as you point out. But LLVM’s assumed architecture is so different from the 6502 that lowering the code to assembly introduces many superfluous instructions. (As an example, the 6502 has one general purpose register, but LLVM works best with many registers. So LLVM-MOS creates 16 virtual registers in the first page of memory and then generates instructions to move them into the main register as they are used.) It’s of course possible to further optimize this, but the LLVM-MOS project isn’t that mature yet. So assembly programmers can still very much do better. reply chongli 14 hours agorootparentSo LLVM-MOS creates 16 virtual registers in the first page of memory and then generates instructions to move them into the main register as they are used.Isn’t this actually good practice on the 6502? The processor treats the first page of memory (called the zero page) differently. Instructions that address the zero page are shorter because they leave out the most significant byte. Addressing any other page requires that extra byte for the MSB.Furthermore, instructions which accept a zero page address typically complete one cycle faster than absolute addressed instructions, and typically only one cycle slower than immediate addressed instructions.So if you can keep as much of your memory accesses within the zero page as possible, your code will run a lot faster. It would seem to me that treating the zero page as a table of virtual registers is a great way to do that because you can bring all your register colouring machinery to bear on the problem. reply tredre3 14 hours agorootparentprevI understand your point but the beginning of the zero page is almost always used as virtual registers by regular hand-rolled 6502 applications. So it&#x27;s pretty normal for LLVM to do the same, it&#x27;s not an example of LLVM doing something weird. reply pjmlp 15 hours agorootparentprevNot really that wonder, other that 6502 sucks for C.\"An overview of the PL.8 compiler\", circa 1976https:&#x2F;&#x2F;dl.acm.org&#x2F;doi&#x2F;abs&#x2F;10.1145&#x2F;989393.989400 reply retrocryptid 6 hours agorootparentprevWell... I mean... if you want inverse video. reply Someone 17 hours agorootparentprevDoes it end that code with a jmp $fbfd ? reply mananaysiempre 17 hours agorootparentDoubtful, given the JSR comes from an inline asm. You’d need to code the call in C (with an appropriate calling convention, which I don’t know if this port defines) for Clang to be able to optimize a tail-position call into a jump—which it is capable of doing, generally speaking. reply retrac 17 hours agorootparentprevNo. The compiler knows that trick for its own code :) not sure about introspecting into the assembly (I think LLVM doesn&#x27;t do that). But either way, standard C returns int of 0 from main on success. So: ldx #0 txa rts reply Someone 15 hours agorootparentNitpick: this isn’t standard C (it uses void main, not int main)Nitpick 2: why ldx #0 txa rts? I would think lda #0 rts is shorter and fasterBack to my question: if it can’t, the claim “an assembler programmer couldn&#x27;t do better” isn’t correct.I think an assembler programmer for the 6502 would consider doing a jmp at the end, even if it makes the function return an incorrect, possibly even unpredictable value. If that value isn’t used, why spend time setting it?A assembly programmer also would:- check whether the routine at 0xFBFD accidentally guarantees to set A to zero, or returns with the X or Y register set to zero, and shamelessly exploit that.- check whether the code at 0xFBFD preserves the value of the accumulator (unlikely, I would guess, but if it does, the two consecutive ‘l’s need only one LDA#)- consider replacing the code to output the space inside “hello world” by a call to FBF4 (move cursor right). That has the same effect if there already is a space there when the code is called.- call 0xFBF0 to output a printable character, not 0xFBFD (reading https:&#x2F;&#x2F;6502disassembly.com&#x2F;a2-rom&#x2F;APPLE2.ROM.html, I notice that is faster for letters and punctuation)On a 6502, that’s how you get your code fit into memory and make it faster. To write good code for a 6502, you can’t be concerned about calling conventions or having individually testable functions. reply tom_ 15 hours agorootparentI bet that sizeof(int)==2 - which immediately tells you everything you need to know - and the return value from a function has 8 bits in X and 8 bits in A. So ldx#0:txa is how you load a return value of (int)0.Regarding this specific unrolled loop, I would expect a 6502 programmer would just write the obvious loop, because they&#x27;re clearly optimizing for space rather than speed when calling the ROM routine. They&#x27;ll be content with the string printing taking about as long as it takes, which clearly isn&#x27;t too long, as they wouldn&#x27;t have done it that way otherwise. And the loop \"overhead\" won&#x27;t be meaningful. (Looks like it&#x27;ll be something like 7 cycles per character? I&#x27;m not familiar with the Apple II. Looks like $fbfd preserves X though.) reply Max-q 13 hours agorootparentWe did a lot of loop unrolling and self modifying code back in the day, when making demos for the C64. The branch is really expensive. For example, clearing the screen you might use 16 STA adr,x and then add 16 to X before you branch to the loop. reply tom_ 10 hours agorootparentIndeed, in some cases you want the unrolls. The 6502 is good in the twisties, but if you&#x27;re trying to do any kind of copy or fill then the percentage of meaningful cycles is disappointingly low, and the unroll may be necessary. Also, if you&#x27;re trying to keep in sync with some other piece of hardware, then just doing it step at a time can be much easier.I have done a lot of all of this sort of code and I am quite familiar with the 6502 tradeoffs. But for printing 15 chars by calling a ROM routine, I stand by my comments. reply retrac 13 hours agorootparentprevYes, I compiled with -O3 for maximum speed. That would be an unusual flag choice in most cases.I just wanted to use 6502 code (so many seem to be able to read it!) with C side by side. x86 would have worked as well. Where the fastest answer would also be the same construct, assuming the dependency on an external routine. reply messe 12 hours agorootparentprev> Nitpick: this isn’t standard C (it uses void main, not int main)You know what, I&#x27;m gonna nitpick that nitpick: void main() is fully allowed on a freestanding target, which is still standard C.Given the C standards historically generous interpretation of undefined behaviour and other miscellany, I think it&#x27;s a reasonable interpretation of the standard to pretend that a target that allows something other than int main(...) is freestanding rather than hosted, and therefore fully conforming. reply mysterymath 6 hours agorootparentYep, llvm-mos-sdk is explicitly freestanding; the libc functions in the SDK follow the hosted C standard, but they don&#x27;t add up to a hosted implementation. The only known C99 non-compliance is the lack of floating point support, which is actively being worked on. replyAurornis 15 hours agorootparentprevThere’s nothing stopping anyone from going back and using all of that old software exclusively.For some reason everyone prefers the newer software, though. Perhaps there’s more to it than binary size? reply Pannoniae 13 hours agorootparentI would love to, if things actually worked on it! Since everything is HTTPS now and you need TLS1.3 for many things, running very retro things for daily usage is next to impossible. reply TillE 15 hours agorootparentprevBinary size on a desktop OS is almost totally irrelevant in practice. Memory size matters a little more, but your OS will generally do a good job of loading what it needs (ie, huge binaries can still start quickly) and paging out what it doesn&#x27;t.People have aesthetic complaints about \"bloat\", but again this is orthogonal to the actual speed of anything. reply Max-q 13 hours agorootparentWell, the bloat has made many programs slower than they could be. Software is eating up the advances we get in hardware. Modern Word 365 is not any faster than Word 95 on a Pentium 66 in normal use. That is a ~100MHz computer with maybe 16MB RAM, and a rotating hard drive.Bloat making software bigger will in many cases also make it slower.Also, the UX on Windows 95 was consistent and easy to learn. Now, much software fail on stuff like disabling a button when you have clicked it and the computer is working.MacOS is on a steady curve to the bottom. It is not alone.The software bloat and decreasing quality is a serious issue. reply djur 6 hours agorootparentI see this sentiment again and again, but the Windows 95 experience I remember included frequent spinning hourglasses, blue screens of death from faulty drivers, everything grinding to a halt when memory is near exhaustion or files are being copied between disks, tons of third party applications (and even Microsoft applications, like Office) that disregarded the Windows UI standards, constantly having to run CHKDSK and defrag, not to mention malware&#x2F;virus vulnerability...Latency when the system is under low load was definitely better, although a big contributor to that is changes in input and display hardware. But otherwise I&#x27;d much rather have today&#x27;s \"bloated\" experience over the real world of the &#x27;90s. reply troupo 3 hours agorootparentThing is, our computers are magnitudes of orders faster than 20-30 years ago. Why isn&#x27;t our software orders of magnitudes faster? I&#x27;ll settle for just 10 times faster.If you take software from 20 years ago, and run it on modern hardware, it will be instant in most operations. reply musicale 3 hours agorootparentprev\"What hardware giveth, software taketh away.\"In the case of Apple, it&#x27;s often Apple software eating up the benefits of Apple hardware.Unfortunately subtle differences (such as improved reliability&#x2F;security or a streamlined workflow) are lost in the computing market, where people are attracted to the new and shiny rather than the old and usable. Also designers like to mess with things. reply gizajob 10 hours agorootparentprevWe need Stevesie to reincarnate and fire whoever is Scott-Forestall-ing it up this year. reply musicale 3 hours agorootparentI still think iOS was more fun in the Forstall-skeuomorphic era, and screen elements were easier to differentiate.macOS icons also used to have distinct silhouettes which made them easier to distinguish, but now everything is a square tile. Screen controls which used to be visible and targetable are now hidden and are harder to hit when they do appear.It feels like we are still under the tyranny of the (Jony Ivian?) streamlined aesthetic over usability and functionality, as if a library decided to organize books by size and color. reply NikkiA 3 hours agorootparentprevWord 95 was utter bloatware compared to 2.0c though reply musicale 3 hours agorootparentprev> Memory size matters a little more, but your OS will generally do a good job of loading what it needs (ie, huge binaries can still start quickly) and paging out what it doesn&#x27;t.And yet Electron apps often garnish that memory bloat and computational inefficiency with sluggish performance and a clunky user experience.It&#x27;s a shame when an 8GB Mac mini doesn&#x27;t have enough RAM to run apps comfortably. Of course there&#x27;s a bit of a corrupt bargain going on between bloated software and Apple since the latter wants to upsell you to a more expensive model. reply Mawr 7 hours agorootparentprevBinary size, yes, since that&#x27;s just sequentially reading bytes from an SSD. What sucks about modern software is input latency and overall responsiveness. reply hulitu 3 hours agorootparentprev> There’s nothing stopping anyone from going back and using all of that old software exclusively.You need to search for it on old ftp sites.> For some reason everyone prefers the newer software, though. Perhaps there’s more to it than binary size?The compilers have \"evolved\". Compiling old code is challenging, to say the least. I do compile old programs when the new seem to explode: xpdf, xsnow.Compiling old compilers is impossible because they rely on ancient kernel headers. reply animatethrow 15 hours agorootparentprev> There’s nothing stopping anyone from going back and using all of that old software exclusively.Monthly bills are stopping me. Can I use Apple&#x27;s MPW C compiler to build for iOS? reply xcdzvyn 8 hours agorootparentI don&#x27;t know what boxes need to be ticked, but tcc is around 200kb and supports ARM. reply bigbillheck 18 hours agorootparentprevThe clang executable on my machine is 18kb. reply catiopatio 17 hours agorootparentOn my system, where clang is statically linked, the binary is 48mb.As in megabytes.Nearly all of clang and LLVM are linked as libraries. reply AnimalMuppet 17 hours agorootparentprevI bet it forks some other executables, though... reply omoikane 18 hours agoparentprev> picture of a catI couldn&#x27;t find this elusive picture of a cat on archive.org, but I found this dog instead:https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20030113144310&#x2F;https:&#x2F;&#x2F;www.amazo...June 2016 appears to be when Amazon adopted the current error pages with the large dog images.https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20160612232820&#x2F;http:&#x2F;&#x2F;www.amazon... reply mastry 15 hours agorootparentMaybe this is it?http:&#x2F;&#x2F;telcontar.net&#x2F;Screenshots&#x2F;worldwidewonk&#x2F;Amazon-404-eh... reply hyperdimension 14 hours agorootparentWow, now that is a screenshot full of nostalgia... Nice find. reply ezequiel-garzon 14 hours agorootparentprevThanks to both of you for this heartwarming bit. How do you go about finding something like that? reply jonhohle 14 hours agorootparentprevThat’s the one! reply jonhohle 14 hours agorootparentprevI misremembered the dog, it looks like they first replaced it with a ?⃝ icon. A later snapshot has the image name[0] but not the image[1].mastry found a screenshot of the image in his sibling reply.0 - http:&#x2F;&#x2F;g-ecx.images-amazon.com&#x2F;images&#x2F;G&#x2F;01&#x2F;x-locale&#x2F;common&#x2F;k...1 - https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20071030172825&#x2F;http:&#x2F;&#x2F;www.amazon... reply bazbamduck 17 hours agoparentprevGo load www.amazon.com and check the source right after:) reply jonhohle 14 hours agorootparentThat&#x27;s wonderful to see. Also interesting to see the site performance comments around different components.Another anecdote: somewhere in that time period we (Prime) were using comments for various metadata and pre-release and post-deployment checks would verify the comments were in place. The team responsible for the edge proxies decided they were going to rewrite all the HTML going out on the fly to remove extraneous comments and whitespace in an effort to reduce page-size.In the middle of testing a release all of the tests related to a particular feature started failing and (I believe) different devs were getting different HTML on their systems (the feature wasn&#x27;t rolled out to every session). Our QA team was extremely pedantic in the best way possible and wouldn&#x27;t allow the release to continue until testing could complete, so we had to track down the responsible parties and get them to dial down their transformation. They eventually tried again without stripping comments, but I can&#x27;t imagine much was saved after compression without much of anything removed (they might have been rewriting other tags as well). reply layer8 18 hours agoparentprevMaybe the daughter sued for copyright infringement when she turned 18. ;)Serious question: Is this possible when a guardian gave consent earlier? reply jonhohle 18 hours agorootparentI know you’re joking, but she wasn’t 18 yet before they changed the picture.AFAICT, kids own the copyright to things they create[0], but guardians are responsible and can use it on the child’s interest. IANAL, consult an attorney, etc., etc.0 - https:&#x2F;&#x2F;www.copyright.gov&#x2F;help&#x2F;faq&#x2F;faq-who.html#:~:text=Can%.... reply CalRobert 15 hours agoparentprevWhere does this playfulness persist? I miss it too. reply notbeuller 6 hours agorootparentOn the other hand, I despise the mock playfulness exhibited by, eg, Slack. It’s such a frustrating environment for me - I feel like it’s not-so-subtle attempts at promoting engagement over presenting the content fill me with rage. I want my tools to fade into the background. reply jjoonathan 14 hours agorootparentprevThe punishments continued until the playfulness went away. reply beeburrt 14 hours agorootparentprevHTTP status code 418? reply ktm5j 13 hours agorootparentHaha thanks for this. There are some funny gnu error codes: https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;libc&#x2F;manual&#x2F;html_node&#x2F;Error-Cod...Including EDIED and EIEIO reply TheBrokenRail 8 hours agorootparentprevIIRC people actually tried to get rid of that. Thankfully it failed. reply khiqxj 18 hours agoparentprev> I miss this kind of playfulness in computing.it&#x27;s still right here every day when Firefox says \"gah this tab crashed\". reply AnonC 17 hours agoprev> \"Symbol table full - fatal heap error; please go buy a RAM upgrade from your local Apple dealer\"Ah, the old times when one could purchase a RAM upgrade or upgrade RAM after buying a computer. Now this would be:\"Symbol table full - fatal heap error; please go buy a new Mac with more RAM\" reply grishka 4 hours agoparentNot really. Classic Mac OS didn&#x27;t support virtual memory so everything had to fit in RAM unless a program itself offloaded data it&#x27;s not currently using to the disk. Modern OSes, however, all support swapping. Your compilation would continue, just much slower. To truly \"run out of memory\" on a modern computer, you have to fill up both the RAM and the disk. reply phendrenad2 8 hours agoparentprevYou can always use a PC if you want upgradeable RAM. reply catiopatio 17 hours agoparentprevI understand the arguments for unified RAM on a SoC, but it’s still a shame; even the new Mac Pro doesn’t have RAM slots. reply ShadowBanThis01 16 hours agorootparentThe soldered-in SSD is worse, though. The SSD WILL wear out, so then you get to throw away your Mac? reply semi-extrinsic 14 hours agorootparentBut how quickly though? Do we know the write endurance of the Mac SSDs?I&#x27;m not a Mac fanboy by any means. But SSD write endurance has become ridiculous. Even on a cheap-ish read-intensive server-class 1 TB NVMe SSD (~$300) you get around 1 petabyte total write endurance, meaning you can write essentially the entire contents of the disk every day for 5 years and still be within the warranty. That is orders of magnitude beyond what any consumer is going to subject their disk to.There is always a possibility that a part of the computer will fail. But if the SSD is less likely to fail than any other random IC on the motherboard, having it soldered on doesn&#x27;t factor significantly into the failure statistics.Of course it&#x27;s super annoying that you can&#x27;t upgrade the disk size, but that&#x27;s another point. reply tom_ 14 hours agorootparentI&#x27;ve got two Macbook Pros - a 2014 15\" (500 GB SSD) and a 2015 13\" (1 TB SSD). Both are still going. I can&#x27;t imagine newer Macs are worse. I&#x27;d be more concerned about replacing the battery! reply sp332 6 hours agorootparentThe newer ones could be worse as they move to smaller process nodes and store more bits per cell. That said, the controller logic is improving, and larger capacities mean more room for wear leveling, so it shouldn&#x27;t be too bad. reply stephen_g 13 hours agorootparentprevMy MacBook Pro (2015, 15 inch) started having some SSD issues earlier this year after a bit more than seven years of heavy use, but it does seem to be partially mechanical because it would mostly happen after it had been in my bag.Since I bought an M2 Pro to replace it, it hasn’t had the issue I think because I’m just leaving it at home and not flexing or squeezing it much. Perhaps the issue could be fixed permanently and properly with a bit of hot air to re-flow the solder balls. reply LeoPanthera 12 hours agorootparentprev> The SSD WILL wear outThis is by no means certain, certainly not enough to SHOUT about.Modern SSDs have lifetimes that make them impractical to literally wear out, short of some kind of fault. reply ShadowBanThis01 4 hours agorootparentOK BUDDY YOUR WELL-CITED CLAIMS ARE NOTED. reply xp84 15 hours agorootparentprevJust like AirPods and AirPods Pro when their 7 cents worth of batteries die! A perfect system. reply layer8 13 hours agorootparentThat will have to change in 2027 with he new EU battery regulation. reply tadfisher 13 hours agorootparentprevThat&#x27;s not even that bad if you have a hot air gun and a reball kit. What&#x27;s worse is the flash chips having some kind of cryptographic identifier that locks them to the machine, so you couldn&#x27;t replace the flash if you wanted to. reply WicWacWok 6 hours agorootparentprevIs it accessible enough it can be soldered-out, or is this one of those effectively-permanent things? reply jonhohle 14 hours agorootparentprevThe Mac Pro missing RAM slots was disappointing to me. Performance uber alles and all that, but upgradability has benefits as well. Until Apple started soldering RAM, I always did aftermarket RAM upgrades, and even recently doubled the RAM on a 12 year-old file server. reply layer8 13 hours agorootparentprevThey could still allow adding more RAM that would just be slightly slower. reply Dylan16807 3 hours agorootparentThey would need to extend the slots from the existing ram, which would slow it down even when empty, or they would need to use up a lot of silicon adding more memory channels. It really does make sense to solder on RAM for best performance. Though alternative sockets like CAMM might help in the future.But you can&#x27;t do a trade-in, the RAM they sell is extremely overpriced, and as mentioned elsewhere there&#x27;s no excuse for the SSD. reply LoganDark 16 hours agoparentprevThis is even more true today, because Apple Silicon Macs are able to store twice the amount of information in the same amount of memory, meaning that a paltry 8GB configuration can store 16GB of FizzBuzz boilerplate, 4 Google Chrome tabs, or 20% of the average node_modules. reply smoldesu 14 hours agorootparentI don&#x27;t think that feature is exclusive to Apple Silicon, or Macs. reply LoganDark 14 hours agorootparentIt&#x27;s a joke (clearly not a very good one) based on my experience that when Apple first offered only 8GB of RAM on the first ASi Macs, everyone&#x27;s response was that Apple Silicon can simply store more data in the same amount of memory or something. Back when I used macOS on Intel, 16GB was relatively comfortable, but I can&#x27;t imagine that switching to ARM would magically halve memory requirements.(Yes, the Intel Mac had memory compression as well. And my Windows 11 PC also has memory compression, but only if you also enable swap because Microsoft says \"fuck you\".) reply astrange 7 hours agorootparentThe AS memory compression is better as it&#x27;s hardware accelerated.IIRC Windows doesn&#x27;t like to overcommit memory and its allocation calls will actually fail instead, but I don&#x27;t remember the details. reply LoganDark 6 hours agorootparentI think ASi Macs also use swap by default now, because the SSDs are so fast that it&#x27;s actually a tenable solution to memory pressure. My Intel Mac never had any swap.> IIRC Windows doesn&#x27;t like to overcommit memory and its allocation calls will actually fail insteadYeah... one of the reasons why I dislike it. reply Kwpolska 2 hours agorootparentIntel Macs have swap too. You can check it in Activity Monitor: https:&#x2F;&#x2F;support.apple.com&#x2F;en-gb&#x2F;guide&#x2F;activity-monitor&#x2F;actmn... replybondolo 3 hours agoprevI used this compiler for years and eventually came to be able to “decompile” the 68k object code it produced back to C code in my head on the fly unless the function was too large. Using MacNosy I could rebuild the C source for an app in usually only a couple of hours. I had a script that converted a MacNosy file of an app into an assembler file and rsrc file and I could translate functions to C one at a time while having a buildable app equivalent to the original. I originally used the tools for hacking games but sometimes used it to fix bugs.The MPW C compiler code generation was so predictable in part because of the symmetry of the 68k instruction set. They wrote a simple compiler and it worked. For the most part effort was spent elsewhere. Since you could reasonably predict what code would be generated if you were unhappy with the code generation you fixed the source. I like that the javac compiler has a similar ethos, With similar effect. Once you know the patterns to use you can generate fairly close to optimal byte code. reply mkovach 18 hours agoprevnext [–]\"a typedef name was a complete surprise to me at this point in your program\"Ah, the joys of fun compiler messages. I miss those days. I remember getting one from a vendor compiler that was: \"No! But they&#x27;ll only let me warn you. Danger Will Robinson! Danger!\"and: \"Really! If you are fussing around with void *, just go home or at least back to your editor!\"I think the IT manager kept that as a vendor just because of the message (the SDK was meh, but also fun!). reply jimmaswell 15 hours agoparentNot much of a C programmer, what&#x27;s the context around void* being a big deal? reply zer8k 15 hours agorootparentVoid pointers refer to anything and nothing. They are everything and all encompassing. What is pointed to by the void pointer could be what you want or it could be another universe.Dereferencing a void pointer has no meaning. The compiler can do anything it wants because it doesn&#x27;t know how to interpret the memory. It could give you the correct thing, it could warp a civilization in from a distant planet, or it could open a world-ending black hole. All are equally probable. reply tyg13 14 hours agorootparentYou&#x27;re correct, although I&#x27;m fairly sure dereferencing a `void*` is a compile error on all but the most ancient and non-conforming compilers. I&#x27;m not even sure what it _could_ compile to, given that `void` has no size. reply tedunangst 14 hours agorootparentvoid * was introduced after char * had been the pre-standard way of addressing any memory. Compilers of the era would let you use void * like char *, because it made it easier to change char * into void *. reply zer8k 14 hours agorootparentprevYes most modern C compilers will stop you from dereferencing a void pointer. Still, I couldn&#x27;t help but bring up what can happen. Since I didn&#x27;t witness it I can only assume 3 mile island was someone dereferencing a void pointer and it was easier to explain with a nuclear meltdown. reply tdiff 4 hours agorootparentprevHas any civilization been warped in already? reply Quekid5 15 hours agorootparentprevIt really should be specified to specifically summon nasal demons, IMO. reply rickreynoldssf 17 hours agoprevI was programming on MacOS (the original) since it was possible. I remember many of these error messages! Especially \"Too many errors on one line (make fewer)\"....also remember 45 minute builds when a header file changed. reply w0mbat 12 hours agoparentIn those days I wrote exclusively system extensions, plug-ins and XCMDs, using a mix of 68k, C and Pascal. Each project was quite small, so compile time was never a problem and MPW was a paradise. My largest XCMD actually had bits in all 3 languages which MPW happily linked together, and some projects had various little blocks of code to stick in the same file, all of which could be automated easily.I remember these error messages coming up and laughing out loud when I saw the rare ones. Nice work, whoever did it! reply 13of40 18 hours agoprev\"Call me paranoid but finding &#x27;&#x2F;*&#x27; inside this comment makes me suspicious\"That, Sir, is none of your business. reply Wowfunhappy 16 hours agoparent...I kind of wish compilers supported nested block comments. So if there&#x27;s a &#x2F;* inside of a &#x2F;*, it would take two *&#x2F;&#x27;s to end it.Idk, maybe that would be a terrible idea in practice. But there are lots of instances where it would have saved me time. reply duskwuff 16 hours agorootparentYou&#x27;re probably looking for \"#if 0\" &#x2F; \"#endif\". reply TillE 15 hours agorootparentYeah it took me a while to adopt this common practice when I need to \"comment out\" a large block of code. Just use the preprocessor, it&#x27;s much simpler. reply billforsternz 10 hours agorootparentprevThe fact that you can&#x27;t do this with new fangled languages is one of the reasons I don&#x27;t use new fangled languages reply zzo38computer 10 hours agorootparentThat and other things I dislike about many of the new fangled languages. reply LoganDark 6 hours agorootparentI prefer using completely unfangled languages, thank you very much. reply crazygringo 10 hours agorootparentprevNot terrible at all.It&#x27;s super-useful to temporarily comment out a bit of code, and then to comment out a larger block surrounding it. Especially when debugging.Sadly I&#x27;ve never used a language that supported that. reply wavemode 7 hours agorootparentCommon Lisp has nested comments with the #| reader macro.https:&#x2F;&#x2F;www.cs.cmu.edu&#x2F;Groups&#x2F;AI&#x2F;html&#x2F;cltl&#x2F;clm&#x2F;node191.html reply kevincox 15 hours agorootparentprevthe D Language supports &#x2F;+ and +&#x2F; as a variant of &#x2F;* which supports nesting. So you can pick which you need for a given comment. reply RGBCube 12 hours agorootparentprevFYI, Rust and many other modern languages do this. reply arcanemachiner 15 hours agorootparentprevHow about explicit depth levels, specified by asterisk count?e.g. &#x27;&#x2F;*&#x27; and &#x27;*&#x2F;&#x27; would match each other, &#x27;&#x2F;**&#x27; and &#x27;**&#x2F;&#x27; would match, and so on.That way, you would have full control of the depth of the comments, removing other comments wouldn&#x27;t break the inner comments, etc.I do run into the same issue you&#x27;re describing, so I think there&#x27;s value in the idea. reply LoganDark 6 hours agorootparentLike Lua, where comments can be delimited by `--[==[`..`]==]`, where the number of equals signs can be anything but has to match in order for the comment to actually close? reply legobmw99 15 hours agorootparentprevI believe OCaml does this reply pjmlp 15 hours agorootparentprevAlready an option on Borland compilers for MS-DOS. reply zabzonk 18 hours agoprevMy favourite syntax error message produced by the Glockenspiel C++ compiler (a cfront derived piece of junk that I used in a training company in the early 90s) was simply \"core dumped\". This was slightly tricky to explain to people already struggling with C++, and who had paid us money for the course. reply unnah 17 hours agoparentThe users could simply run a debugger to get a backtrace from the core file... then with some experience, they would learn to associate different hex addresses with different kinds of errors. No harm, no foul. reply zabzonk 17 hours agorootparentI take it that you have never worked for a training company :-) reply II2II 16 hours agoprevTangential to the content of the page: I really enjoyed how many MPW utilities generated output, including error messages, in the form of commands. Your terminal was an editor buffer, so you could cursor up (or click) on the appropriate line then press something like cmd-enter to pull up the file in question (among other things). reply cschmidt 14 hours agoparentI think it was just the enter key to execute the selected text. reply II2II 14 hours agorootparentYou&#x27;re probably correct. I forgot that Apple labelled the enter key as return on the alphanumeric part of the keyboard and as enter on the numeric keypad. I recall some software (possibly MPW) treating cmd-return as enter. Or something to that effect. It has been about 20 years! reply cschmidt 13 hours agorootparentYes I think you’re right. I was talking about the standalone enter key, or you could also do some modifier and return. It has been a long time reply ilaksh 15 hours agoparentprevHm. Sounds like Plan 9. reply bemusedthrow75 16 hours agoprev\"a typedef name was a complete surprise to me at this point in your program\"I&#x27;ve seen this list so many times and this one makes me laugh out loud every single time. reply Veserv 18 hours agoprevPrevious discussion: https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=30238928To inline my comment in the previous thread:Just for some context, the MPW C compiler that produced those messages was actually not developed internally at Apple, but was rather done by Green Hills Software [1] under contract as mentioned on the wikipedia page [2] and its source [3] which is funnily enough about this exact same topic.[1] https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Green_Hills_Software[2] https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Macintosh_Programmer%27s_Wor...[3] https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20140528005901&#x2F;http:&#x2F;&#x2F;lists.appl... reply vincent-manis 11 hours agoprevMy favorite error message was produced by the Univac Fortran V compiler, circa 1970: “Warning: floating point equality tests are nugatory.” I pride myself on my vocabulary, but I had to use the dictionary. reply arnoldjm 10 hours agoparentI recall from 1965 getting an error message message something like this from the Fortran complier on a Univac 1107 system after receiving too many error messages: \"Do not attempt to learn Fortran using Monte Carlo method. Buy a manual in the user office.\" reply skipkey 13 hours agoprevThe old Clipper 5 compiler had some fun error messages. The two that I remember running into were “Ford Maverick Error”, and my personal favorite, “Carnage! Module name crushed in compilation disaster!”. I ran across both abusing its preprocessor. reply andrewf 12 hours agoparentI learned to program on various dBase languages. That Clipper 5 preprocessor was quite the thing! It reminds me of https:&#x2F;&#x2F;research.swtch.com&#x2F;shmacro but it met a real need, lowering a COBOL-like syntax to a C&#x2F;Pascal-like one.(dBase code looks like https:&#x2F;&#x2F;github.com&#x2F;harbour&#x2F;core&#x2F;blob&#x2F;master&#x2F;tests&#x2F;ntx.prg , and https:&#x2F;&#x2F;github.com&#x2F;harbour&#x2F;core&#x2F;blob&#x2F;master&#x2F;include&#x2F;std.ch is an open-source reimplementation of Clipper&#x27;s preprocessor definitions). reply monitron 11 hours agoparentprevI’m so curious, what could a Ford Maverick error possibly signify? reply skipkey 9 hours agorootparentI’m honestly not sure. I met a couple of the developers at a convention a few years later, and found out the carnage one was where a stack of tokens from the tokenizer was unexpectedly deleted, but we didn’t talk about the other one. I suspect someone probably owned a Maverick that was buggy tho, or didn’t run. reply nickt 15 hours agoprevThat whole subdirectory is full of some old school internet humour.https:&#x2F;&#x2F;www.cs.cmu.edu&#x2F;~jasonh&#x2F;personal&#x2F;humor&#x2F; reply tom_ 15 hours agoprev> \"...And the lord said, &#x27;lo, there shall only be case or default labels inside a switch statement&#x27;\"Did it seriously not let you have a goto label inside a switch?! This seems like an odd restriction, as all 3 are the same kind of thing. reply bear8642 7 minutes agoparentThey&#x27;re different enough that you can&#x27;t goto a case or default label. reply nigwil_ 8 hours agoprevMPW had an interesting About box animation too. I recorded this back in 2011 using vMac emulator. https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=aJn3qxK9Br0 reply OnlyMortal 14 hours agoprevI really loved MPW Shell.Been able to have a worksheet with random shell commands I’d built up, triple-clicking a line and hitting enter to run the selection.It was quite a thing. reply d3psi 13 hours agoprevalright, these are hilarious. i miss this playful attitude in modern-day software engineering, we need more of it.also, the note on the copyright is hilarious. reply gjvc 18 hours agoprevI had NFI what MPW was until I read this: https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Macintosh_Programmer%27s_Works... reply mistrial9 18 hours agoprevthere were also MetroWerks bindings for MPW, long ago, but Apple killed it with fire reply khiqxj 18 hours agoprev [2 more] [flagged] smoldesu 14 hours agoparent [–] Even in 2006, people knew provoking Apple&#x27;s ire was a dangerous game. replyGuidelinesFAQListsAPISecurityLegalApply to YCContact Search:",
    "originSummary": [
      "The summary consists of error messages from Apple's MPW C compiler, decompiled from the String resources.",
      "The error messages include humorous and sarcastic remarks about programming errors and limitations of the compiler.",
      "Copyright concerns are also mentioned in the summary."
    ],
    "commentSummary": [
      "The discussion on Hacker News covers various topics related to software development, including error messages from Apple's MPW C compiler in 2006 and the challenges of compiling old code.",
      "Users express nostalgia for older programs and discuss issues such as software bloat, compiler limitations, and expensive RAM prices from Apple.",
      "Other topics discussed include memory management in Apple Silicon Macs, different programming languages' comment delimiters, SSD wear, European Union's battery regulations, void pointers in C programming, and the desire for nested block comments in programming languages."
    ],
    "points": 256,
    "commentCount": 128,
    "retryCount": 0,
    "time": 1693148644
  },
  {
    "id": 37283636,
    "title": "I Can Eat Glass",
    "originLink": "https://en.wikipedia.org/wiki/I_Can_Eat_Glass",
    "originBody": "Jump to content Main menu Search Create account Log in Personal tools Contents hide (Top) References External links I Can Eat Glass 3 languages Article Talk Read Edit View history Tools From Wikipedia, the free encyclopedia The topic of this article may not meet Wikipedia's general notability guideline. Please help to demonstrate the notability of the topic by citing reliable secondary sources that are independent of the topic and provide significant coverage of it beyond a mere trivial mention. If notability cannot be shown, the article is likely to be merged, redirected, or deleted. Find sources: \"I Can Eat Glass\" – news · newspapers · books · scholar · JSTOR (March 2023) (Learn how and when to remove this template message) The phrase is used as sample text for displaying Chinese fonts in GNOME Font Viewer. This screenshot shows the Simplified Chinese translation of \"I can eat glass, it does not hurt me.\" I Can Eat Glass was a linguistic project documented on the early Web by then-Harvard student Ethan Mollick.[1] The objective was to provide speakers with translations of the phrase \"I can eat glass, it does not hurt me\" from a wide variety of languages; the phrase was chosen because of its unorthodox nature. Mollick's original page disappeared in or about June 2004.[2] As Mollick explained, visitors to a foreign country have \"an irresistible urge\" to say something in that language, and whatever they say (a cited example being along the lines of \"Where is the bathroom?\") usually marks them as tourists immediately. Saying \"I can eat glass, it does not hurt me\", however, ensures that the speaker \"will be viewed as an insane native, and treated with dignity and respect\". The project grew to considerable size since web surfers were invited to submit translations.[3] The phrase was translated into over 150 languages, including some that are fictional or invented, as well as into code from various computer languages. It became an Internet meme.[4] References[edit] ^ Finegan, Edward (2004). Language: its structure and use. Thomson Wadsworth. p. 254. ISBN 9780838407943. Retrieved 22 January 2013. ^ \"UTF-8 Sampler\". ^ Blyth, Carl S. (2000). Untangling the Web: Nonce's Guide to Language and Culture on the Internet. John Wiley & Sons. p. 48. ISBN 9780471392477. Retrieved 22 January 2013. ^ Wooten, Adam (21 October 2011). \"International Business: Potty language: Safely navigating international water closets\". Deseret News. Archived from the original on 3 March 2016. Retrieved 22 January 2013. External links[edit] Web Archive copy of I Can Eat Glass I Can Eat Glass, Harvard Immediate Gratification Players I Can Eat Glass in UTF-8, with notes by Frank da Cruz, Columbia University This Internet-related article is a stub. You can help Wikipedia by expanding it. This article about translation is a stub. You can help Wikipedia by expanding it. Categories: Internet memesTranslationInternet stubsTranslation stubs This page was last edited on 27 August 2023, at 18:45 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License 4.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Mobile view Developers Statistics Cookie statement Toggle limited content width",
    "commentLink": "https://news.ycombinator.com/item?id=37283636",
    "commentBody": "I Can Eat GlassHacker NewspastloginI Can Eat Glass (wikipedia.org) 242 points by vector_spaces 18 hours ago| hidepastfavorite85 comments OJFord 17 hours agoI haven&#x27;t come across this one before, a similar project is https:&#x2F;&#x2F;omniglot.com&#x2F;language&#x2F;phrases&#x2F;hovercraft.htm (&#x27;my hovercraft is full of eels&#x27; from Monty Python&#x27;s Flying Circus) reply dctoedt 14 hours agoparentAnd the very first cold-open sketch on the very first episode of Saturday Night Live, in October 1975: John Belushi learning to say, \"I would like to feed your fingertips to the wolverines.\"https:&#x2F;&#x2F;www.openculture.com&#x2F;2021&#x2F;03&#x2F;saturday-night-lives-ver... reply szatkus 11 hours agoparentprevThere&#x27;s even PIE and Sumerian, hilarious. reply lafar6503 16 hours agoparentprevWhere are your howitzers? reply wonger_ 14 hours agoprevOne of the external links is a page that uses translations of the phrase as a UTF-8 rendering test. It has 150 translations, including some weird ones like Old Norse: ᛖᚴ ᚷᛖᛏ ᛖᛏᛁ ᚧ ᚷᛚᛖᚱ ᛘᚾ ᚦᛖᛋᛋ ᚨᚧ ᚡᛖ ᚱᚧᚨ ᛋᚨᚱ and Inuktitut: ᐊᓕᒍᖅ ᓂᕆᔭᕌᖓᒃᑯ ᓱᕋᙱᑦᑐᓐᓇᖅᑐᖓhttp:&#x2F;&#x2F;www.columbia.edu&#x2F;~fdc&#x2F;utf8.html#glass reply thenewwazoo 14 hours agoprevWhat synchronicity! My work slack status is currently this phrase, in Swahili, translated by a recent hire with whom I connected over love of language.The one time I have been able to bust out my knowledge of Swedish (limited to this one phrase) in order to try and flirt, the focus of my attentions was... not impressed. I couldn&#x27;t tell if it was because I was not impressive, or just a cultural mismatch. In any case, it didn&#x27;t discourage me from continuing to learn. reply asabla 13 hours agoparentIt could also be that ice cream is very close to glass in Swedish. Matter in fact ice cream in Swedish is actually spelled the same as glass.So depending on how well you pronounced it, you may just have said: I can eat ice cream, it doesn&#x27;t hurtedit: added a missing word reply hnarn 13 hours agorootparentFor those wondering, single consonant means slow vowel, double consonant means fast vowel, just like “floss”. So:glass (swe) -> gláss (ice cream)glas (swe) -> glaas (glass)To make it even easier these two words also have different A-sounds, the first quick one has the one in english “tan”, the second has the one in “car”. reply darraghenright 1 hour agorootparentPlot twist, in Hiberno English that A-sound is the same in both words :)Ice cream in French is also \"glace\" which is of course spelled differently but sounds pretty much the same as glass. reply hnarn 1 hour agorootparentSwedish has a long history of importing words from French (as do many other European languages for obvious historical reasons), so I’m quite sure this is indeed the origin of the word.What usually happened though was that after importing the word, it (sometimes) got a new spelling more compatible with Swedish phonetics. Other examples of this include Swedish “trottoar” (fr: “trottoir”) reply cozzyd 4 hours agorootparentprevI sort of wonder if this was a very elaborate joke. reply Semaphor 17 hours agoprev2019, 84 comments https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=21121982Mainly anecdotes about fun language confusions ;) reply ftxbro 15 hours agoprevFor anyone who doesn&#x27;t know, the student who made the &#x27;I Can Eat Glass&#x27; project is Ethan Mollick. He&#x27;s now a professor at Wharton and in my opinion he is the best public LLM whisperer! reply dr_dshiv 11 hours agoparentHe is the best reply NoZebra120vClip 17 hours agoprevHow interesting to use a comma splice in a phrase that&#x27;s purpose-built for translations. I wonder if that was a deliberate choice.https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Comma_splice reply Alifatisk 2 hours agoparentHad no idea comma splice was considered error in english writing, has it always been like this? reply abdullahkhalids 17 hours agoparentprevSurprised this article doesn&#x27;t mention \"The king is dead, long live the king!\" reply buyx 9 hours agoprevIt&#x27;s interesting that the page says that Afrikaans was derived from Dutch in the 20th century, but the two languages are so different.Dutch: Ik kan glas eten. Het doet geen pijn. Afrikaans: Ek kan glas eet, dit maak my nie seer nieThe truth, of course, is that Afrikaans split off from Dutch centuries earlier, but it wasn&#x27;t a \"prestige language\" until the 20th century.The page comes from a more innocent time, when the internet hadn&#x27;t hit critical mass, and you could get away with stuff like that without pedants fact-checking you to death. reply sverhagen 9 hours agoparentThere&#x27;s not reliably one way to translate something, and there could be Dutch versions much closer to the one shown here in Afrikaans, such as: \"dat doet mij niet zeer\". Regardless, the Afrikaanse version is already very readable to my Dutch eyes. So much that its misleading about how close the languages really are, because as you say, they have well diverged, and while there&#x27;s a lot of similarities, there&#x27;s also plenty of space for native speakers of either language to miss the gist of what&#x27;s being said in the other language. reply buyx 7 hours agorootparentThe Afrikaans version may be comprehensible to a Dutch speaker, but the Dutch version, even the version you posted, is still very hard for this (second-language) Afrikaans reader to understand. reply sverhagen 6 hours agorootparentThank you for that insight, which, thanks to my ignorance, is surprising! reply Ballas 5 hours agorootparentAs a first language Afrikaans speaker, both sentences are perhaps somewhat difficult to parse, but also very readable to my eyes. reply reilly3000 9 hours agoparentprevOh it’s lovely though isn’t it? It’s like gravity, it seems inexorable. Being incorrect in front of enough eyes is a path towards correctness. Oft a painful one, but almost always informative. reply vic-traill 13 hours agoprev>Saying \"I can eat glass, it does not hurt me\", however, ensures that the speaker \"will be viewed as an insane native, and treated with dignity and respect\".Well, I&#x27;m not sure where Michel Lotito [0] (aka Monsieur Mangetout) fits w&#x2F; this ...[0] https:&#x2F;&#x2F;en.wikipedia.org&#x2F;&#x2F;wiki&#x2F;Michel_Lotito reply Akronymus 13 hours agoparenthuh, seems as if there slipped an addition &#x2F; in there. Which broke my redirection, but still worked. Which makes me curious as how that happened in the first place. reply russellpekala 17 hours agoprevI love this. My coworkers and I call ourselves glasseaters since we&#x27;re all so scrappy.The guy who started this translation project (per the wikipedia) was himself a startup founder https:&#x2F;&#x2F;www.linkedin.com&#x2F;in&#x2F;emollick&#x2F;. reply NoZebra120vClip 17 hours agoprevIt is strange that Wikipedia claims that this became a meme, yet knowyourmeme.com is completely unaware of its memeness. That website is typically a solid source for the dankest and&#x2F;or most obscure memes you ever met. reply mherdeg 17 hours agoparentKnowyourmeme is very late to the meme game. Entire civilizations of memes flourished and decayed on 4chan, fark, Slashdot, YTMND, and the bare metal internet long ago.Bonsai Kitten is lost to the ravages of time. reply Tao3300 12 hours agorootparent> Entire civilizations of memes flourished and decayedHalf sunk, a shattered visage lies, whose frown,And wrinkled lip, and sneer of cold command,Tell that its sculptor well those passions readWhich yet survive, stamped on these lifeless things,The hand that mocked them and the heart that fed:And on the pedestal these words appear:\"ALL YOUR BASE ARE BELONG TO US\" reply tiffanyg 10 hours agorootparentI was millimeters away from responding w&#x2F; the pure inanity of \"So can I. Once, anyway.\" But, your citation of OG meme-master Shelley inspired me to do better (18th century, and already prognosticating the rise of \"CATS\" - legend).I refrained. ;) reply bowsamic 16 hours agorootparentprev> Bonsai Kitten is lost to the ravages of time.https:&#x2F;&#x2F;knowyourmeme.com&#x2F;memes&#x2F;bonsai-kittens reply thih9 12 hours agorootparentSome external links in that article were mildly disturbing to me, bonsai babies in particular, I do not recommend clicking randomly. reply ModernMech 14 hours agorootparentprevI liked it better when the internet was made of cats. Now there are too many dogs and it&#x27;s not as fun. reply Tijdreiziger 13 hours agorootparenthttp:&#x2F;&#x2F;i0.kym-cdn.com&#x2F;entries&#x2F;icons&#x2F;facebook&#x2F;000&#x2F;007&#x2F;447&#x2F;yes... reply jprete 9 hours agorootparentprevAh, back when people believed things they saw on the Internet. reply ooterness 17 hours agorootparentprev\"Ah, you think dankness is your ally. But you merely adopted the dank; I was born in it, molded by it. I didn&#x27;t see the memes until I was already a man, by then it was nothing to me but BLINDING!\" -Fark, probably reply NoZebra120vClip 17 hours agorootparentprevI suppose if by \"lost\" you mean \"extremely well documented with 457 thousand views\" then yes, Bonsai Kittens are lost forever? reply jj999 16 hours agorootparentprevWhat is the bare metal internet? Is it a series of tubes? reply yellowapple 15 hours agorootparentAn information superhighway, if you will. reply falcor84 13 hours agorootparentIs that what it was like before it was (re-)made of cats?https:&#x2F;&#x2F;youtu.be&#x2F;zi8VTeDHjcM?si=ZSQ7tFjidj0BlZhf reply hunson_abadeer 17 hours agoparentprevI Can Eat Glass was definitely a thing, but in the late 1990s or perhaps very early 2000s. Sites such as knowyourmeme.com don&#x27;t go nearly as far back. reply NoZebra120vClip 17 hours agorootparentThe website was first picked up on the Internet Archive in 1999. I had no trouble finding memes from 1994-1996 on KYM, such as \"Dancing Baby\", \"Ate My Balls\", and \"Goodtimes Virus\".In fact, clicking that \"year:1994\" turns up 108 results, so they&#x27;re pretty comprehensive, although they only cover Web-based memes, usually with images, and not Usenet. reply themaninthedark 17 hours agorootparentprevThe Everything2 entry is dated April 12 2000. reply hamolton 15 hours agoparentprevKYM is super biased in what ends up there, as it leans heavily towards 4chan and Reddit content, with heavy amounts of Twitch and certain genres in YouTube. It&#x27;s missing a lot of memes popular among girls, especially from Tumblr. Similarly, it doesn&#x27;t have a lot of TikTok trends & tropes that I&#x27;d consider to be memes. reply Maken 15 hours agoparentprevYou can help to complete the archives. reply codezero 15 hours agoprevI used to play online games at an hour when a lot of Japanese players were online, I asked my sister who was studying Japanese for some phrases to say and this was one of them. Now I know where she got it from! I also used this phrase when I was visiting Australia and met two Japanese guys at a bar, they thought it was hilarious. reply pluijzer 17 hours agoprevThe nuance of the Dutch translation is slightly wrong, possibly implying eating glass in general doesn&#x27;t hurt. Just a heads-up for those going to the old archived website in search of medical advice. reply gattilorenz 16 hours agoparentIf you go by reported pronunciation it says “hij”, doesn’t it? Just don’t text&#x2F;write it and it will be ok. reply dr_dshiv 11 hours agoprev“Mi hermano está enfermo pero mis pantalones son rojos.”This was my favorite bombastic phrase in Spanish—for the same purpose: to be “viewed as an insane native, and treated with dignity and respect” reply janalsncm 14 hours agoprevThe Mandarin translation is incorrect. The he chose close homophones of the right words, but they have the wrong tones. You can verify this by translating the image back to English. reply Tao3300 11 hours agoparentWhat are you translating with? Google seems to get the right result by translating \"我能吞下玻璃而不伤身体\" as \"I can swallow glass without hurting myself\"Of course, that doesn&#x27;t mean Google is correct. reply janalsncm 9 hours agorootparentOn the archived page he translates it to 我克藝吃玻璃，我不毀受傷。https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20040203215138&#x2F;http:&#x2F;&#x2F;hcs.harvar...我克藝 is the wrong translation of “I can”. 我可以 is correct. They sound similar though. reply loxias 11 hours agoprevAwesome. I remember this from the early internet. I think from everything2. An older code, but it checks out. reply emodendroket 13 hours agoprevI was just thinking about this the other day; how strange to see that others remember and were thinking the same. reply LoveMortuus 15 hours agoprevI read the title as grass and got excited... reply EGreg 12 hours agoprevWhen I was in Julliard pre-college music school, there was a girl I had a crush on. She was from South Africa and I wanted to impress her. But being 14 years old, I didn’t want to say something cheesy. So I asked my Dutch friends how to say this (it is the same in Afrikaans)…Beware of the giant chicken! It will eat your hair. reply jandrese 17 hours agoprev> Saying \"I can eat glass, it does not hurt me\", however, ensures that the speaker \"will be viewed as an insane native, and treated with dignity and respect\".If there is anything rambling insane people get it is dignity and respect. reply version_five 15 hours agoparentObviously tongue in cheek but also largely true. Tourists are targets for all kinds of scams. Less so local crazies.Nobody is actually going to belive an obvious foreigner shouting a crazy phrase in accented local language is actually a local, but they still may steer clear and scam someone else (if this was meant to be taken seriously, it obviously isn&#x27;t).There&#x27;s that \"real Ghostbusters\" cartoon where the street toughs ask Egon what he&#x27;s doing and he said something about ectoplasm or whatever, and one of the toughs asks the leader why he left him alone and he says &#x27;I don&#x27;t mess with anyone weirder than me\" reply lo_zamoyski 16 hours agoparentprevI think this assumes people are more respectful to their own, at least overtly, than to guests, but this is an incomplete view. In cultures where hospitality is high, guests are treated with a hospitality and patience that is not extended to the locals. Furthermore, foreigners are more likely to be viewed as people unfamiliar with the conventions and customs of the region, and therefore some reasonable patience is shown, whereas locals are expected to be on top of such things.What insane people get isn&#x27;t dignity and true respect, but avoidance! reply kadoban 15 hours agoparentprevGiven the context, the probability of that being tongue-in-cheek has to be quite high. reply NoZebra120vClip 15 hours agorootparentOn second thought, keep your tongue away from your cheeks whilst eating glass, lest it get shredded up. reply yellow_lead 17 hours agoprev> Saying \"I can eat glass, it does not hurt me\", however, ensures that the speaker \"will be viewed as an insane native, and treated with dignity and respect\".Since context is such an important part of many languages, this almost guarantees no one will understand you unless you have perfect pronunciation reply twism 15 hours agoprevI had tons of friends who could do this literally in primary school (Nigeria) .. and it was normal. It&#x27;s funny the things you pick up as a kid in Nigeria that people look at you in amazement when you do it. For instance, the awes I get when I crack open a beer bottle with my teeth. Granted every kid in Nigeria could do this (soda bottles) since they were 6. reply MaKey 14 hours agoparent> For instance, the awes I get when I crack open a beer bottle with my teeth.People might be in awe because they are thinking about what it does to your teeth. reply twism 15 hours agoparentprevCome to think of it I&#x27;m now curious how this is possible. With cracking open bottle tops, it is all leverage (not strength, power, or some physical gift) but I would think chewing glass has got to be some special type of skill or physical ability. I didn&#x27;t have a curious mind for it then since I didn&#x27;t think it was a special skill although I did not dare try it as it seemed to me as dangerous as it sounded reply throw1234651234 15 hours agoparentprevAll fun and games until a piece lodges in your throat. A lot of professional performers mostly count on things sitting right, and then die when they don&#x27;t. E.g.:https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mirin_Dajo reply NoZebra120vClip 15 hours agorootparentThen again, there&#x27;s Stevie Starr, who&#x27;s passed the ripe old age of 60, and still going strong with swallowing and regurgitating all manner of crazy stuff: https:&#x2F;&#x2F;youtu.be&#x2F;WVVLyZKtIbI?si=sFDuCGXpdO-CbP8K reply techload 16 hours agoprevOnce I met a young man who was able to eat glass, literally. I saw, right in front of me, him break a glass with his teeth, chew the pieces until they were very fine, and swallow everything. To prove that he wasn&#x27;t hiding the pieces in his mouth, he made a point of opening his mouth wide and showing that he had indeed swallowed them. reply kemayo 16 hours agoparentGiven that you don&#x27;t mention seeing blood, this was almost certainly just someone playing a prank by eating sugar glass. It&#x27;s slightly thickened melted sugar that you&#x27;ve let set into a thin pane. Looks just like glass, but it&#x27;s really rock candy and so you can break it up and chew it.https:&#x2F;&#x2F;www.inthekitchenwithmatt.com&#x2F;edible-sugar-glass reply techload 16 hours agorootparentNo. It was a glass from the bar, and a thick walled one. There was no blood. He did this thing several times. He did not die, as I met him several years after. It is a glass like this one, common in Brazilian bars:https:&#x2F;&#x2F;youtu.be&#x2F;xwrn2h8iAdw reply augusto-moura 15 hours agorootparentYou probably mean a Copo Americano (American Glass) [1]. Also note, that eating glass is also a common magic trick, David Blaine is famous for doing it [2], I&#x27;m not sure how real is the glass though[1]: https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Copo_americano[2]: https:&#x2F;&#x2F;youtu.be&#x2F;MewROa1EU_o?si=Vysz1UfyWV44AEd_&t=83 reply kadoban 15 hours agorootparentprevI&#x27;d still think it&#x27;s more likely it was a magic trick or scam. reply Tao3300 10 hours agorootparentThere are probably some types of glass that work better for it than others. I only looked at two of the videos and they were both a guy in Brazil eating a very particular type of drinking glass, which has me thinking these guys aren&#x27;t just wolfing down pint glasses in UK pubs or something -- this is one particular glass that they &#x27;can&#x27; pull this off with.It would take a bit of finesse and the right mouth for it, but as long as you didn&#x27;t surprise your soft bits with sudden movement across or into a sharp piece... maybe? reply kadoban 8 hours agorootparentMaybe. It doesn&#x27;t sound completely physically impossible, but it&#x27;s like...even if you could do it, why wouldn&#x27;t you just use sugar glass or some other trick? Infinitely safer and more fun for the same result. reply techload 15 hours agorootparentprevThere are a lot of people who do this, amazing and unbelievable as it may seem.https:&#x2F;&#x2F;youtu.be&#x2F;WUuMybRysjEhttps:&#x2F;&#x2F;youtu.be&#x2F;O8ifaTHbMTohttps:&#x2F;&#x2F;youtu.be&#x2F;JFnGsGnlkAIhttps:&#x2F;&#x2F;www.youtube.com&#x2F;shorts&#x2F;5OdkhtMEqMo?feature=share reply kemayo 11 hours agorootparentprevWith only minor collusion with the bartender, you can just arrange to be given a glass made of sugar-glass.https:&#x2F;&#x2F;www.makeyourownmolds.com&#x2F;how-to-sugar-glass-mold&#x2F; reply NikolaNovak 15 hours agoparentprevI have seen enough amazing sleight of hand and trickery that I just always assume there&#x27;s something I&#x27;m not seeing. One would be hard pressed to prove to me alone that they are eating real broken proper glass.If,say, Penn & Teller were in the room with me witnessing the effect yp close and said \"actually I think that&#x27;s legit\" then, maybe. I&#x27;d give it some benefit of doubt. But I&#x27;ve learned my humility when it comes to limits of my observational capabilities and knowledge of magic tricks &#x2F; what to look for.So why I 100% believe that&#x27;s what you saw, I approximately 0% believe that&#x27;s what happened :-&#x2F;(that being said, if they chewed it very very very well, then.. Maybe? But basically I&#x27;d need external verification for anything that&#x27;s susceptible to sleight of hand and other trickery, especially street performances where I know I&#x27;m massively out gunned :-) reply CharlesW 15 hours agorootparent\"Eat Lightbulbs Without Getting Hurt\": https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=YbpCw5ZnP5o reply vanviegen 14 hours agoparentprevSwallowing ground glass is not actually all that dangerous. [1] The trick would be in chewing carefully, without your mouth becoming a bloody mess. Seems doable, maybe, though I don&#x27;t feel any urge to try it any time soon. :-)[1]: https:&#x2F;&#x2F;www.snopes.com&#x2F;fact-check&#x2F;ground-glass-deadly&#x2F; reply mabbo 14 hours agoprevI asked chatgpt the following: Please translate the sentence \"I can eat glass, it does not hurt me\" into 50 different languages. Include a pronunciation guide for English speakers for each.And was not disappointed at all. reply carabiner 16 hours agoprev [–] insane -> dignity, respect? reply npteljes 1 hour agoparentI think it&#x27;s supposed to be a joke. reply jj999 16 hours agoparentprevDignity and respect result from fear. Who would you fear most between the tourist and the insane? reply saghm 15 hours agoparentprevWell, yeah, that&#x27;s the joke; it&#x27;s not actually supposed to be a useful resource, but something fun and silly reply inopinatus 14 hours agoparentprev [–] Enoch Root wants to borrow your bicycle. replyGuidelinesFAQListsAPISecurityLegalApply to YCContact Search:",
    "originSummary": [
      "\"I Can Eat Glass\" was a linguistic project started by Ethan Mollick in the early days of the internet.",
      "The project aimed to translate the phrase into various languages, resulting in over 150 translations.",
      "Although the original webpage is no longer available, the project gained popularity and became an internet meme, providing humorous translations for tourists."
    ],
    "commentSummary": [
      "The article focuses on a translation project called \"I Can Eat Glass\" that explores the various translations of this phrase in different languages.",
      "The conversation includes anecdotes, historical context, and comparisons between translations, providing an entertaining and lighthearted tone.",
      "Additionally, the article touches on topics such as internet nostalgia, meme archives, and the safety of eating glass, adding depth to the discussion."
    ],
    "points": 241,
    "commentCount": 85,
    "retryCount": 0,
    "time": 1693150438
  },
  {
    "id": 37281692,
    "title": "WTFPython: Exploring and understanding Python through surprising snippets",
    "originLink": "https://github.com/satwikkansal/wtfpython",
    "originBody": "Skip to content Product Solutions Open Source Pricing Search or jump to... Sign in Sign up satwikkansal / wtfpython Public Notifications Fork 2.6k Star 33.5k Code Issues 58 Pull requests 13 Actions Projects Security Insights satwikkansal/wtfpython master 3 branches 2 tags Go to file Code Latest commit satwikkansal Merge pull request #312 from franciscouzo/master … f32e9d3 Git stats 502 commits Files Type Name Latest commit message Commit time images Add a meme irrelevant Added docstrings to several undocumented functions. wtfpython-pypi Added docstrings to several undocumented functions. .gitattributes Add .gitattributes .gitignore Ignore IDE files .travis.yml Add automated testing using Travis CI CONTRIBUTING.md Update CONTRIBUTING.md CONTRIBUTORS.md Add new snippet: banker's rounding LICENSE * Fix .gitignore issue README.md Merge pull request #312 from franciscouzo/master code-of-conduct.md Added a contributor's code of conduct. mixed_tabs_and_spaces.py * Fix .gitignore issue README.md What the f*ck Python! 😱 Exploring and understanding Python through surprising snippets. Translations: Chinese 中文Vietnamese Tiếng ViệtSpanish EspañolKorean 한국어Russian РусскийGerman DeutschAdd translation Other modes: Interactive WebsiteInteractive NotebookCLI Python, being a beautifully designed high-level and interpreter-based programming language, provides us with many features for the programmer's comfort. But sometimes, the outcomes of a Python snippet may not seem obvious at first sight. Here's a fun project attempting to explain what exactly is happening under the hood for some counter-intuitive snippets and lesser-known features in Python. While some of the examples you see below may not be WTFs in the truest sense, but they'll reveal some of the interesting parts of Python that you might be unaware of. I find it a nice way to learn the internals of a programming language, and I believe that you'll find it interesting too! If you're an experienced Python programmer, you can take it as a challenge to get most of them right in the first attempt. You may have already experienced some of them before, and I might be able to revive sweet old memories of yours! 😅 PS: If you're a returning reader, you can learn about the new modifications here (the examples marked with asterisk are the ones added in the latest major revision). So, here we go... Table of Contents Structure of the Examples ▶ Some fancy Title Usage 👀 Examples Section: Strain your brain! ▶ First things first! * ▶ Strings can be tricky sometimes ▶ Be careful with chained operations ▶ How not to use is operator ▶ Hash brownies ▶ Deep down, we're all the same. ▶ Disorder within order * ▶ Keep trying... * ▶ For what? ▶ Evaluation time discrepancy ▶ is not ... is not is (not ...) ▶ A tic-tac-toe where X wins in the first attempt! ▶ Schrödinger's variable ▶ The chicken-egg problem * ▶ Subclass relationships ▶ Methods equality and identity ▶ All-true-ation * ▶ The surprising comma ▶ Strings and the backslashes ▶ not knot! ▶ Half triple-quoted strings ▶ What's wrong with booleans? ▶ Class attributes and instance attributes ▶ yielding None ▶ Yielding from... return! * ▶ Nan-reflexivity * ▶ Mutating the immutable! ▶ The disappearing variable from outer scope ▶ The mysterious key type conversion ▶ Let's see if you can guess this? ▶ Exceeds the limit for integer string conversion Section: Slippery Slopes ▶ Modifying a dictionary while iterating over it ▶ Stubborn del operation ▶ The out of scope variable ▶ Deleting a list item while iterating ▶ Lossy zip of iterators * ▶ Loop variables leaking out! ▶ Beware of default mutable arguments! ▶ Catching the Exceptions ▶ Same operands, different story! ▶ Name resolution ignoring class scope ▶ Rounding like a banker * ▶ Needles in a Haystack * ▶ Splitsies * ▶ Wild imports * ▶ All sorted? * ▶ Midnight time doesn't exist? Section: The Hidden treasures! ▶ Okay Python, Can you make me fly? ▶ goto, but why? ▶ Brace yourself! ▶ Let's meet Friendly Language Uncle For Life ▶ Even Python understands that love is complicated ▶ Yes, it exists! ▶ Ellipsis * ▶ Inpinity ▶ Let's mangle Section: Appearances are deceptive! ▶ Skipping lines? ▶ Teleportation ▶ Well, something is fishy... Section: Miscellaneous ▶ += is faster ▶ Let's make a giant string! ▶ Slowing down dict lookups * ▶ Bloating instance dicts * ▶ Minor Ones * Contributing Acknowledgements 🎓 License Surprise your friends as well! More content like this? Structure of the Examples All the examples are structured like below: ▶ Some fancy Title # Set up the code. # Preparation for the magic... Output (Python version(s)): >>> triggering_statement Some unexpected output (Optional): One line describing the unexpected output. 💡 Explanation: Brief explanation of what's happening and why is it happening. # Set up code # More examples for further clarification (if necessary) Output (Python version(s)): >>> trigger # some example that makes it easy to unveil the magic # some justified output Note: All the examples are tested on Python 3.5.2 interactive interpreter, and they should work for all the Python versions unless explicitly specified before the output. Usage A nice way to get the most out of these examples, in my opinion, is to read them in sequential order, and for every example: Carefully read the initial code for setting up the example. If you're an experienced Python programmer, you'll successfully anticipate what's going to happen next most of the time. Read the output snippets and, Check if the outputs are the same as you'd expect. Make sure if you know the exact reason behind the output being the way it is. If the answer is no (which is perfectly okay), take a deep breath, and read the explanation (and if you still don't understand, shout out! and create an issue here). If yes, give a gentle pat on your back, and you may skip to the next example. PS: You can also read WTFPython at the command line using the pypi package, $ pip install wtfpython -U $ wtfpython 👀 Examples Section: Strain your brain! ▶ First things first! * For some reason, the Python 3.8's \"Walrus\" operator (:=) has become quite popular. Let's check it out, 1. # Python version 3.8+ >>> a = \"wtf_walrus\" >>> a 'wtf_walrus' >>> a := \"wtf_walrus\" File \"\", line 1 a := \"wtf_walrus\" ^ SyntaxError: invalid syntax >>> (a := \"wtf_walrus\") # This works though 'wtf_walrus' >>> a 'wtf_walrus' 2 . # Python version 3.8+ >>> a = 6, 9 >>> a (6, 9) >>> (a := 6, 9) (6, 9) >>> a 6 >>> a, b = 6, 9 # Typical unpacking >>> a, b (6, 9) >>> (a, b = 16, 19) # Oops File \"\", line 1 (a, b = 16, 19) ^ SyntaxError: invalid syntax >>> (a, b := 16, 19) # This prints out a weird 3-tuple (6, 16, 19) >>> a # a is still unchanged? 6 >>> b 16 💡 Explanation Quick walrus operator refresher The Walrus operator (:=) was introduced in Python 3.8, it can be useful in situations where you'd want to assign values to variables within an expression. def some_func(): # Assume some expensive computation here # time.sleep(1000) return 5 # So instead of, if some_func(): print(some_func()) # Which is bad practice since computation is happening twice # or a = some_func() if a: print(a) # Now you can concisely write if a := some_func(): print(a) Output (> 3.8): 5 5 5 This saved one line of code, and implicitly prevented invoking some_func twice. Unparenthesized \"assignment expression\" (use of walrus operator), is restricted at the top level, hence the SyntaxError in the a := \"wtf_walrus\" statement of the first snippet. Parenthesizing it worked as expected and assigned a. As usual, parenthesizing of an expression containing = operator is not allowed. Hence the syntax error in (a, b = 6, 9). The syntax of the Walrus operator is of the form NAME:= expr, where NAME is a valid identifier, and expr is a valid expression. Hence, iterable packing and unpacking are not supported which means, (a := 6, 9) is equivalent to ((a := 6), 9) and ultimately (a, 9) (where a's value is 6') >>> (a := 6, 9) == ((a := 6), 9) True >>> x = (a := 696, 9) >>> x (696, 9) >>> x[0] is a # Both reference same memory location True Similarly, (a, b := 16, 19) is equivalent to (a, (b := 16), 19) which is nothing but a 3-tuple. ▶ Strings can be tricky sometimes 1. >>> a = \"some_string\" >>> id(a) 140420665652016 >>> id(\"some\" + \"_\" + \"string\") # Notice that both the ids are same. 140420665652016 2. >>> a = \"wtf\" >>> b = \"wtf\" >>> a is b True >>> a = \"wtf!\" >>> b = \"wtf!\" >>> a is b False 3. >>> a, b = \"wtf!\", \"wtf!\" >>> a is b # All versions except 3.7.x True >>> a = \"wtf!\"; b = \"wtf!\" >>> a is b # This will print True or False depending on where you're invoking it (python shell / ipython / as a script) False # This time in file some_file.py a = \"wtf!\" b = \"wtf!\" print(a is b) # prints True when the module is invoked! 4. Output (>> 'a' * 20 is 'aaaaaaaaaaaaaaaaaaaa' True >>> 'a' * 21 is 'aaaaaaaaaaaaaaaaaaaaa' False Makes sense, right? 💡 Explanation: The behavior in first and second snippets is due to a CPython optimization (called string interning) that tries to use existing immutable objects in some cases rather than creating a new object every time. After being \"interned,\" many variables may reference the same string object in memory (saving memory thereby). In the snippets above, strings are implicitly interned. The decision of when to implicitly intern a string is implementation-dependent. There are some rules that can be used to guess if a string will be interned or not: All length 0 and length 1 strings are interned. Strings are interned at compile time ('wtf' will be interned but ''.join(['w', 't', 'f']) will not be interned) Strings that are not composed of ASCII letters, digits or underscores, are not interned. This explains why 'wtf!' was not interned due to !. CPython implementation of this rule can be found here When a and b are set to \"wtf!\" in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn't \"know\" that there's already \"wtf!\" as an object (because \"wtf!\" is not implicitly interned as per the facts mentioned above). It's a compile-time optimization. This optimization doesn't apply to 3.7.x versions of CPython (check this issue for more discussion). A compile unit in an interactive environment like IPython consists of a single statement, whereas it consists of the entire module in case of modules. a, b = \"wtf!\", \"wtf!\" is single statement, whereas a = \"wtf!\"; b = \"wtf!\" are two statements in a single line. This explains why the identities are different in a = \"wtf!\"; b = \"wtf!\", and also explain why they are same when invoked in some_file.py The abrupt change in the output of the fourth snippet is due to a peephole optimization technique known as Constant folding. This means the expression 'a'*20 is replaced by 'aaaaaaaaaaaaaaaaaaaa' during compilation to save a few clock cycles during runtime. Constant folding only occurs for strings having a length of less than 21. (Why? Imagine the size of .pyc file generated as a result of the expression 'a'*10**10). Here's the implementation source for the same. Note: In Python 3.7, Constant folding was moved out from peephole optimizer to the new AST optimizer with some change in logic as well, so the fourth snippet doesn't work for Python 3.7. You can read more about the change here. ▶ Be careful with chained operations >>> (False == False) in [False] # makes sense False >>> False == (False in [False]) # makes sense False >>> False == False in [False] # now what? True >>> True is False == False False >>> False is False is False True >>> 1 > 0 >> (1 > 0) >> 1 > (000) and (00) >> int(True) 1 >>> True + 1 #not relevant for this example, but just for fun 2 So, 1 >> a = 256 >>> b = 256 >>> a is b True >>> a = 257 >>> b = 257 >>> a is b False 2. >>> a = [] >>> b = [] >>> a is b False >>> a = tuple() >>> b = tuple() >>> a is b True 3. Output >>> a, b = 257, 257 >>> a is b True Output (Python 3.7.x specifically) >>> a, b = 257, 257 >>> a is b False 💡 Explanation: The difference between is and == is operator checks if both the operands refer to the same object (i.e., it checks if the identity of the operands matches or not). == operator compares the values of both the operands and checks if they are the same. So is is for reference equality and == is for value equality. An example to clear things up, >>> class A: pass >>> A() is A() # These are two empty objects at two different memory locations. False 256 is an existing object but 257 isn't When you start up python the numbers from -5 to 256 will be allocated. These numbers are used a lot, so it makes sense just to have them ready. Quoting from https://docs.python.org/3/c-api/long.html The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you just get back a reference to the existing object. So it should be possible to change the value of 1. I suspect the behavior of Python, in this case, is undefined. :-) >>> id(256) 10922528 >>> a = 256 >>> b = 256 >>> id(a) 10922528 >>> id(b) 10922528 >>> id(257) 140084850247312 >>> x = 257 >>> y = 257 >>> id(x) 140084850247440 >>> id(y) 140084850247344 Here the interpreter isn't smart enough while executing y = 257 to recognize that we've already created an integer of the value 257, and so it goes on to create another object in the memory. Similar optimization applies to other immutable objects like empty tuples as well. Since lists are mutable, that's why [] is [] will return False and () is () will return True. This explains our second snippet. Let's move on to the third one, Both a and b refer to the same object when initialized with same value in the same line. Output >>> a, b = 257, 257 >>> id(a) 140640774013296 >>> id(b) 140640774013296 >>> a = 257 >>> b = 257 >>> id(a) 140640774013392 >>> id(b) 140640774013488 When a and b are set to 257 in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn't \"know\" that there's already 257 as an object. It's a compiler optimization and specifically applies to the interactive environment. When you enter two lines in a live interpreter, they're compiled separately, therefore optimized separately. If you were to try this example in a .py file, you would not see the same behavior, because the file is compiled all at once. This optimization is not limited to integers, it works for other immutable data types like strings (check the \"Strings are tricky example\") and floats as well, >>> a, b = 257.0, 257.0 >>> a is b True Why didn't this work for Python 3.7? The abstract reason is because such compiler optimizations are implementation specific (i.e. may change with version, OS, etc). I'm still figuring out what exact implementation change cause the issue, you can check out this issue for updates. ▶ Hash brownies 1. some_dict = {} some_dict[5.5] = \"JavaScript\" some_dict[5.0] = \"Ruby\" some_dict[5] = \"Python\" Output: >>> some_dict[5.5] \"JavaScript\" >>> some_dict[5.0] # \"Python\" destroyed the existence of \"Ruby\"? \"Python\" >>> some_dict[5] \"Python\" >>> complex_five = 5 + 0j >>> type(complex_five) complex >>> some_dict[complex_five] \"Python\" So, why is Python all over the place? 💡 Explanation Uniqueness of keys in a Python dictionary is by equivalence, not identity. So even though 5, 5.0, and 5 + 0j are distinct objects of different types, since they're equal, they can't both be in the same dict (or set). As soon as you insert any one of them, attempting to look up any distinct but equivalent key will succeed with the original mapped value (rather than failing with a KeyError): >>> 5 == 5.0 == 5 + 0j True >>> 5 is not 5.0 is not 5 + 0j True >>> some_dict = {} >>> some_dict[5.0] = \"Ruby\" >>> 5.0 in some_dict True >>> (5 in some_dict) and (5 + 0j in some_dict) True This applies when setting an item as well. So when you do some_dict[5] = \"Python\", Python finds the existing item with equivalent key 5.0 -> \"Ruby\", overwrites its value in place, and leaves the original key alone. >>> some_dict {5.0: 'Ruby'} >>> some_dict[5] = \"Python\" >>> some_dict {5.0: 'Python'} So how can we update the key to 5 (instead of 5.0)? We can't actually do this update in place, but what we can do is first delete the key (del some_dict[5.0]), and then set it (some_dict[5]) to get the integer 5 as the key instead of floating 5.0, though this should be needed in rare cases. How did Python find 5 in a dictionary containing 5.0? Python does this in constant time without having to scan through every item by using hash functions. When Python looks up a key foo in a dict, it first computes hash(foo) (which runs in constant-time). Since in Python it is required that objects that compare equal also have the same hash value (docs here), 5, 5.0, and 5 + 0j have the same hash value. >>> 5 == 5.0 == 5 + 0j True >>> hash(5) == hash(5.0) == hash(5 + 0j) True Note: The inverse is not necessarily true: Objects with equal hash values may themselves be unequal. (This causes what's known as a hash collision, and degrades the constant-time performance that hashing usually provides.) ▶ Deep down, we're all the same. class WTF: pass Output: >>> WTF() == WTF() # two different instances can't be equal False >>> WTF() is WTF() # identities are also different False >>> hash(WTF()) == hash(WTF()) # hashes _should_ be different as well True >>> id(WTF()) == id(WTF()) True 💡 Explanation: When id was called, Python created a WTF class object and passed it to the id function. The id function takes its id (its memory location), and throws away the object. The object is destroyed. When we do this twice in succession, Python allocates the same memory location to this second object as well. Since (in CPython) id uses the memory location as the object id, the id of the two objects is the same. So, the object's id is unique only for the lifetime of the object. After the object is destroyed, or before it is created, something else can have the same id. But why did the is operator evaluate to False? Let's see with this snippet. class WTF(object): def __init__(self): print(\"I\") def __del__(self): print(\"D\") Output: >>> WTF() is WTF() I I D D False >>> id(WTF()) == id(WTF()) I D I D True As you may observe, the order in which the objects are destroyed is what made all the difference here. ▶ Disorder within order * from collections import OrderedDict dictionary = dict() dictionary[1] = 'a'; dictionary[2] = 'b'; ordered_dict = OrderedDict() ordered_dict[1] = 'a'; ordered_dict[2] = 'b'; another_ordered_dict = OrderedDict() another_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a'; class DictWithHash(dict): \"\"\" A dict that also implements __hash__ magic. \"\"\" __hash__ = lambda self: 0 class OrderedDictWithHash(OrderedDict): \"\"\" An OrderedDict that also implements __hash__ magic. \"\"\" __hash__ = lambda self: 0 Output >>> dictionary == ordered_dict # If a == b True >>> dictionary == another_ordered_dict # and b == c True >>> ordered_dict == another_ordered_dict # then why isn't c == a ?? False # We all know that a set consists of only unique elements, # let's try making a set of these dictionaries and see what happens... >>> len({dictionary, ordered_dict, another_ordered_dict}) Traceback (most recent call last): File \"\", line 1, inTypeError: unhashable type: 'dict' # Makes sense since dict don't have __hash__ implemented, let's use # our wrapper classes. >>> dictionary = DictWithHash() >>> dictionary[1] = 'a'; dictionary[2] = 'b'; >>> ordered_dict = OrderedDictWithHash() >>> ordered_dict[1] = 'a'; ordered_dict[2] = 'b'; >>> another_ordered_dict = OrderedDictWithHash() >>> another_ordered_dict[2] = 'b'; another_ordered_dict[1] = 'a'; >>> len({dictionary, ordered_dict, another_ordered_dict}) 1 >>> len({ordered_dict, another_ordered_dict, dictionary}) # changing the order 2 What is going on here? 💡 Explanation: The reason why intransitive equality didn't hold among dictionary, ordered_dict and another_ordered_dict is because of the way __eq__ method is implemented in OrderedDict class. From the docs Equality tests between OrderedDict objects are order-sensitive and are implemented as list(od1.items())==list(od2.items()). Equality tests between OrderedDict objects and other Mapping objects are order-insensitive like regular dictionaries. The reason for this equality in behavior is that it allows OrderedDict objects to be directly substituted anywhere a regular dictionary is used. Okay, so why did changing the order affect the length of the generated set object? The answer is the lack of intransitive equality only. Since sets are \"unordered\" collections of unique elements, the order in which elements are inserted shouldn't matter. But in this case, it does matter. Let's break it down a bit, >>> some_set = set() >>> some_set.add(dictionary) # these are the mapping objects from the snippets above >>> ordered_dict in some_set True >>> some_set.add(ordered_dict) >>> len(some_set) 1 >>> another_ordered_dict in some_set True >>> some_set.add(another_ordered_dict) >>> len(some_set) 1 >>> another_set = set() >>> another_set.add(ordered_dict) >>> another_ordered_dict in another_set False >>> another_set.add(another_ordered_dict) >>> len(another_set) 2 >>> dictionary in another_set True >>> another_set.add(another_ordered_dict) >>> len(another_set) 2 So the inconsistency is due to another_ordered_dict in another_set being False because ordered_dict was already present in another_set and as observed before, ordered_dict == another_ordered_dict is False. ▶ Keep trying... * def some_func(): try: return 'from_try' finally: return 'from_finally' def another_func(): for _ in range(3): try: continue finally: print(\"Finally!\") def one_more_func(): # A gotcha! try: for i in range(3): try: 1 / i except ZeroDivisionError: # Let's throw it here and handle it outside for loop raise ZeroDivisionError(\"A trivial divide by zero error\") finally: print(\"Iteration\", i) break except ZeroDivisionError as e: print(\"Zero division error occurred\", e) Output: >>> some_func() 'from_finally' >>> another_func() Finally! Finally! Finally! >>> 1 / 0 Traceback (most recent call last): File \"\", line 1, inZeroDivisionError: division by zero >>> one_more_func() Iteration 0 💡 Explanation: When a return, break or continue statement is executed in the try suite of a \"try…finally\" statement, the finally clause is also executed on the way out. The return value of a function is determined by the last return statement executed. Since the finally clause always executes, a return statement executed in the finally clause will always be the last one executed. The caveat here is, if the finally clause executes a return or break statement, the temporarily saved exception is discarded. ▶ For what? some_string = \"wtf\" some_dict = {} for i, some_dict[i] in enumerate(some_string): i = 10 Output: >>> some_dict # An indexed dict appears. {0: 'w', 1: 't', 2: 'f'} 💡 Explanation: A for statement is defined in the Python grammar as: for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite] Where exprlist is the assignment target. This means that the equivalent of {exprlist} = {next_value} is executed for each item in the iterable. An interesting example that illustrates this: for i in range(4): print(i) i = 10 Output: 0 1 2 3 Did you expect the loop to run just once? 💡 Explanation: The assignment statement i = 10 never affects the iterations of the loop because of the way for loops work in Python. Before the beginning of every iteration, the next item provided by the iterator (range(4) in this case) is unpacked and assigned the target list variables (i in this case). The enumerate(some_string) function yields a new value i (a counter going up) and a character from the some_string in each iteration. It then sets the (just assigned) i key of the dictionary some_dict to that character. The unrolling of the loop can be simplified as: >>> i, some_dict[i] = (0, 'w') >>> i, some_dict[i] = (1, 't') >>> i, some_dict[i] = (2, 'f') >>> some_dict ▶ Evaluation time discrepancy 1. array = [1, 8, 15] # A typical generator expression gen = (x for x in array if array.count(x) > 0) array = [2, 8, 22] Output: >>> print(list(gen)) # Where did the other values go? [8] 2. array_1 = [1,2,3,4] gen_1 = (x for x in array_1) array_1 = [1,2,3,4,5] array_2 = [1,2,3,4] gen_2 = (x for x in array_2) array_2[:] = [1,2,3,4,5] Output: >>> print(list(gen_1)) [1, 2, 3, 4] >>> print(list(gen_2)) [1, 2, 3, 4, 5] 3. array_3 = [1, 2, 3] array_4 = [10, 20, 30] gen = (i + j for i in array_3 for j in array_4) array_3 = [4, 5, 6] array_4 = [400, 500, 600] Output: >>> print(list(gen)) [401, 501, 601, 402, 502, 602, 403, 503, 603] 💡 Explanation In a generator expression, the in clause is evaluated at declaration time, but the conditional clause is evaluated at runtime. So before runtime, array is re-assigned to the list [2, 8, 22], and since out of 1, 8 and 15, only the count of 8 is greater than 0, the generator only yields 8. The differences in the output of g1 and g2 in the second part is due the way variables array_1 and array_2 are re-assigned values. In the first case, array_1 is bound to the new object [1,2,3,4,5] and since the in clause is evaluated at the declaration time it still refers to the old object [1,2,3,4] (which is not destroyed). In the second case, the slice assignment to array_2 updates the same old object [1,2,3,4] to [1,2,3,4,5]. Hence both the g2 and array_2 still have reference to the same object (which has now been updated to [1,2,3,4,5]). Okay, going by the logic discussed so far, shouldn't be the value of list(gen) in the third snippet be [11, 21, 31, 12, 22, 32, 13, 23, 33]? (because array_3 and array_4 are going to behave just like array_1). The reason why (only) array_4 values got updated is explained in PEP-289 Only the outermost for-expression is evaluated immediately, the other expressions are deferred until the generator is run. ▶ is not ... is not is (not ...) >>> 'something' is not None True >>> 'something' is (not None) False 💡 Explanation is not is a single binary operator, and has behavior different than using is and not separated. is not evaluates to False if the variables on either side of the operator point to the same object and True otherwise. In the example, (not None) evaluates to True since the value None is False in a boolean context, so the expression becomes 'something' is True. ▶ A tic-tac-toe where X wins in the first attempt! # Let's initialize a row row = [\"\"] * 3 #row i['', '', ''] # Let's make a board board = [row] * 3 Output: >>> board [['', '', ''], ['', '', ''], ['', '', '']] >>> board[0] ['', '', ''] >>> board[0][0] '' >>> board[0][0] = \"X\" >>> board [['X', '', ''], ['X', '', ''], ['X', '', '']] We didn't assign three \"X\"s, did we? 💡 Explanation: When we initialize row variable, this visualization explains what happens in the memory And when the board is initialized by multiplying the row, this is what happens inside the memory (each of the elements board[0], board[1] and board[2] is a reference to the same list referred by row) We can avoid this scenario here by not using row variable to generate board. (Asked in this issue). >>> board = [['']*3 for _ in range(3)] >>> board[0][0] = \"X\" >>> board [['X', '', ''], ['', '', ''], ['', '', '']] ▶ Schrödinger's variable * funcs = [] results = [] for x in range(7): def some_func(): return x funcs.append(some_func) results.append(some_func()) # note the function call here funcs_results = [func() for func in funcs] Output (Python version): >>> results [0, 1, 2, 3, 4, 5, 6] >>> funcs_results [6, 6, 6, 6, 6, 6, 6] The values of x were different in every iteration prior to appending some_func to funcs, but all the functions return 6 when they're evaluated after the loop completes. >>> powers_of_x = [lambda x: x**i for i in range(10)] >>> [f(2) for f in powers_of_x] [512, 512, 512, 512, 512, 512, 512, 512, 512, 512] 💡 Explanation: When defining a function inside a loop that uses the loop variable in its body, the loop function's closure is bound to the variable, not its value. The function looks up x in the surrounding context, rather than using the value of x at the time the function is created. So all of the functions use the latest value assigned to the variable for computation. We can see that it's using the x from the surrounding context (i.e. not a local variable) with: >>> import inspect >>> inspect.getclosurevars(funcs[0]) ClosureVars(nonlocals={}, globals={'x': 6}, builtins={}, unbound=set()) Since x is a global value, we can change the value that the funcs will lookup and return by updating x: >>> x = 42 >>> [func() for func in funcs] [42, 42, 42, 42, 42, 42, 42] To get the desired behavior you can pass in the loop variable as a named variable to the function. Why does this work? Because this will define the variable inside the function's scope. It will no longer go to the surrounding (global) scope to look up the variables value but will create a local variable that stores the value of x at that point in time. funcs = [] for x in range(7): def some_func(x=x): return x funcs.append(some_func) Output: >>> funcs_results = [func() for func in funcs] >>> funcs_results [0, 1, 2, 3, 4, 5, 6] It is not longer using the x in the global scope: >>> inspect.getclosurevars(funcs[0]) ClosureVars(nonlocals={}, globals={}, builtins={}, unbound=set()) ▶ The chicken-egg problem * 1. >>> isinstance(3, int) True >>> isinstance(type, object) True >>> isinstance(object, type) True So which is the \"ultimate\" base class? There's more to the confusion by the way, 2. >>> class A: pass >>> isinstance(A, A) False >>> isinstance(type, type) True >>> isinstance(object, object) True 3. >>> issubclass(int, object) True >>> issubclass(type, object) True >>> issubclass(object, type) False 💡 Explanation type is a metaclass in Python. Everything is an object in Python, which includes classes as well as their objects (instances). class type is the metaclass of class object, and every class (including type) has inherited directly or indirectly from object. There is no real base class among object and type. The confusion in the above snippets is arising because we're thinking about these relationships (issubclass and isinstance) in terms of Python classes. The relationship between object and type can't be reproduced in pure python. To be more precise the following relationships can't be reproduced in pure Python, class A is an instance of class B, and class B is an instance of class A. class A is an instance of itself. These relationships between object and type (both being instances of each other as well as themselves) exist in Python because of \"cheating\" at the implementation level. ▶ Subclass relationships Output: >>> from collections import Hashable >>> issubclass(list, object) True >>> issubclass(object, Hashable) True >>> issubclass(list, Hashable) False The Subclass relationships were expected to be transitive, right? (i.e., if A is a subclass of B, and B is a subclass of C, the A should a subclass of C) 💡 Explanation: Subclass relationships are not necessarily transitive in Python. Anyone is allowed to define their own, arbitrary __subclasscheck__ in a metaclass. When issubclass(cls, Hashable) is called, it simply looks for non-Falsey \"__hash__\" method in cls or anything it inherits from. Since object is hashable, but list is non-hashable, it breaks the transitivity relation. More detailed explanation can be found here. ▶ Methods equality and identity class SomeClass: def method(self): pass @classmethod def classm(cls): pass @staticmethod def staticm(): pass Output: >>> print(SomeClass.method is SomeClass.method) True >>> print(SomeClass.classm is SomeClass.classm) False >>> print(SomeClass.classm == SomeClass.classm) True >>> print(SomeClass.staticm is SomeClass.staticm) True Accessing classm twice, we get an equal object, but not the same one? Let's see what happens with instances of SomeClass: o1 = SomeClass() o2 = SomeClass() Output: >>> print(o1.method == o2.method) False >>> print(o1.method == o1.method) True >>> print(o1.method is o1.method) False >>> print(o1.classm is o1.classm) False >>> print(o1.classm == o1.classm == o2.classm == SomeClass.classm) True >>> print(o1.staticm is o1.staticm is o2.staticm is SomeClass.staticm) True Accessing classm or method twice, creates equal but not same objects for the same instance of SomeClass. 💡 Explanation Functions are descriptors. Whenever a function is accessed as an attribute, the descriptor is invoked, creating a method object which \"binds\" the function with the object owning the attribute. If called, the method calls the function, implicitly passing the bound object as the first argument (this is how we get self as the first argument, despite not passing it explicitly). >>> o1.method > Accessing the attribute multiple times creates a method object every time! Therefore o1.method is o1.method is never truthy. Accessing functions as class attributes (as opposed to instance) does not create methods, however; so SomeClass.method is SomeClass.method is truthy. >>> SomeClass.methodclassmethod transforms functions into class methods. Class methods are descriptors that, when accessed, create a method object which binds the class (type) of the object, instead of the object itself. >>> o1.classm > Unlike functions, classmethods will create a method also when accessed as class attributes (in which case they bind the class, not to the type of it). So SomeClass.classm is SomeClass.classm is falsy. >>> SomeClass.classm > A method object compares equal when both the functions are equal, and the bound objects are the same. So o1.method == o1.method is truthy, although not the same object in memory. staticmethod transforms functions into a \"no-op\" descriptor, which returns the function as-is. No method objects are ever created, so comparison with is is truthy. >>> o1.staticm>>> SomeClass.staticmHaving to create new \"method\" objects every time Python calls instance methods and having to modify the arguments every time in order to insert self affected performance badly. CPython 3.7 solved it by introducing new opcodes that deal with calling methods without creating the temporary method objects. This is used only when the accessed function is actually called, so the snippets here are not affected, and still generate methods :) ▶ All-true-ation * >>> all([True, True, True]) True >>> all([True, True, False]) False >>> all([]) True >>> all([[]]) False >>> all([[[]]]) True Why's this True-False alteration? 💡 Explanation: The implementation of all function is equivalent to def all(iterable): for element in iterable: if not element: return False return True all([]) returns True since the iterable is empty. all([[]]) returns False because the passed array has one element, [], and in python, an empty list is falsy. all([[[]]]) and higher recursive variants are always True. This is because the passed array's single element ([[...]]) is no longer empty, and lists with values are truthy. ▶ The surprising comma Output (>> def f(x, y,): ... print(x, y) ... >>> def g(x=4, y=5,): ... print(x, y) ... >>> def h(x, **kwargs,): File \"\", line 1 def h(x, **kwargs,): ^ SyntaxError: invalid syntax >>> def h(*args,): File \"\", line 1 def h(*args,): ^ SyntaxError: invalid syntax 💡 Explanation: Trailing comma is not always legal in formal parameters list of a Python function. In Python, the argument list is defined partially with leading commas and partially with trailing commas. This conflict causes situations where a comma is trapped in the middle, and no rule accepts it. Note: The trailing comma problem is fixed in Python 3.6. The remarks in this post discuss in brief different usages of trailing commas in Python. ▶ Strings and the backslashes Output: >>> print(\"\\\"\") \" >>> print(r\"\\\"\") \\\" >>> print(r\"\\\") File \"\", line 1 print(r\"\\\") ^ SyntaxError: EOL while scanning string literal >>> r'\\'' == \"\\\\'\" True 💡 Explanation In a usual python string, the backslash is used to escape characters that may have a special meaning (like single-quote, double-quote, and the backslash itself). >>> \"wt\\\"f\" 'wt\"f' In a raw string literal (as indicated by the prefix r), the backslashes pass themselves as is along with the behavior of escaping the following character. >>> r'wt\\\"f' == 'wt\\\\\"f' True >>> print(repr(r'wt\\\"f') 'wt\\\\\"f' >>> print(\"\\n\") >>> print(r\"\\\\n\") '\\\\n' This means when a parser encounters a backslash in a raw string, it expects another character following it. And in our case (print(r\"\\\")), the backslash escaped the trailing quote, leaving the parser without a terminating quote (hence the SyntaxError). That's why backslashes don't work at the end of a raw string. ▶ not knot! x = True y = False Output: >>> not x == y True >>> x == not y File \"\", line 1 x == not y ^ SyntaxError: invalid syntax 💡 Explanation: Operator precedence affects how an expression is evaluated, and == operator has higher precedence than not operator in Python. So not x == y is equivalent to not (x == y) which is equivalent to not (True == False) finally evaluating to True. But x == not y raises a SyntaxError because it can be thought of being equivalent to (x == not) y and not x == (not y) which you might have expected at first sight. The parser expected the not token to be a part of the not in operator (because both == and not in operators have the same precedence), but after not being able to find an in token following the not token, it raises a SyntaxError. ▶ Half triple-quoted strings Output: >>> print('wtfpython''') wtfpython >>> print(\"wtfpython\"\"\") wtfpython >>> # The following statements raise `SyntaxError` >>> # print('''wtfpython') >>> # print(\"\"\"wtfpython\") File \"\", line 3 print(\"\"\"wtfpython\") ^ SyntaxError: EOF while scanning triple-quoted string literal 💡 Explanation: Python supports implicit string literal concatenation, Example, >>> print(\"wtf\" \"python\") wtfpython >>> print(\"wtf\" \"\") # or \"wtf\"\"\" wtf ''' and \"\"\" are also string delimiters in Python which causes a SyntaxError because the Python interpreter was expecting a terminating triple quote as delimiter while scanning the currently encountered triple quoted string literal. ▶ What's wrong with booleans? 1. # A simple example to count the number of booleans and # integers in an iterable of mixed data types. mixed_list = [False, 1.0, \"some_string\", 3, True, [], False] integers_found_so_far = 0 booleans_found_so_far = 0 for item in mixed_list: if isinstance(item, int): integers_found_so_far += 1 elif isinstance(item, bool): booleans_found_so_far += 1 Output: >>> integers_found_so_far 4 >>> booleans_found_so_far 0 2. >>> some_bool = True >>> \"wtf\" * some_bool 'wtf' >>> some_bool = False >>> \"wtf\" * some_bool '' 3. def tell_truth(): True = False if True == False: print(\"I have lost faith in truth!\") Output (>> tell_truth() I have lost faith in truth! 💡 Explanation: bool is a subclass of int in Python >>> issubclass(bool, int) True >>> issubclass(int, bool) False And thus, True and False are instances of int >>> isinstance(True, int) True >>> isinstance(False, int) True The integer value of True is 1 and that of False is 0. >>> int(True) 1 >>> int(False) 0 See this StackOverflow answer for the rationale behind it. Initially, Python used to have no bool type (people used 0 for false and non-zero value like 1 for true). True, False, and a bool type was added in 2.x versions, but, for backward compatibility, True and False couldn't be made constants. They just were built-in variables, and it was possible to reassign them Python 3 was backward-incompatible, the issue was finally fixed, and thus the last snippet won't work with Python 3.x! ▶ Class attributes and instance attributes 1. class A: x = 1 class B(A): pass class C(A): pass Output: >>> A.x, B.x, C.x (1, 1, 1) >>> B.x = 2 >>> A.x, B.x, C.x (1, 2, 1) >>> A.x = 3 >>> A.x, B.x, C.x # C.x changed, but B.x didn't (3, 2, 3) >>> a = A() >>> a.x, A.x (3, 3) >>> a.x += 1 >>> a.x, A.x (4, 3) 2. class SomeClass: some_var = 15 some_list = [5] another_list = [5] def __init__(self, x): self.some_var = x + 1 self.some_list = self.some_list + [x] self.another_list += [x] Output: >>> some_obj = SomeClass(420) >>> some_obj.some_list [5, 420] >>> some_obj.another_list [5, 420] >>> another_obj = SomeClass(111) >>> another_obj.some_list [5, 111] >>> another_obj.another_list [5, 420, 111] >>> another_obj.another_list is SomeClass.another_list True >>> another_obj.another_list is some_obj.another_list True 💡 Explanation: Class variables and variables in class instances are internally handled as dictionaries of a class object. If a variable name is not found in the dictionary of the current class, the parent classes are searched for it. The += operator modifies the mutable object in-place without creating a new object. So changing the attribute of one instance affects the other instances and the class attribute as well. ▶ yielding None some_iterable = ('a', 'b') def some_func(val): return \"something\" Output (>> [x for x in some_iterable] ['a', 'b'] >>> [(yield x) for x in some_iterable]at 0x7f70b0a4ad58> >>> list([(yield x) for x in some_iterable]) ['a', 'b'] >>> list((yield x) for x in some_iterable) ['a', None, 'b', None] >>> list(some_func((yield x)) for x in some_iterable) ['a', 'something', 'b', 'something'] 💡 Explanation: This is a bug in CPython's handling of yield in generators and comprehensions. Source and explanation can be found here: https://stackoverflow.com/questions/32139885/yield-in-list-comprehensions-and-generator-expressions Related bug report: https://bugs.python.org/issue10544 Python 3.8+ no longer allows yield inside list comprehension and will throw a SyntaxError. ▶ Yielding from... return! * 1. def some_func(x): if x == 3: return [\"wtf\"] else: yield from range(x) Output (> 3.3): >>> list(some_func(3)) [] Where did the \"wtf\" go? Is it due to some special effect of yield from? Let's validate that, 2. def some_func(x): if x == 3: return [\"wtf\"] else: for i in range(x): yield i Output: >>> list(some_func(3)) [] The same result, this didn't work either. 💡 Explanation: From Python 3.3 onwards, it became possible to use return statement with values inside generators (See PEP380). The official docs say that, \"... return expr in a generator causes StopIteration(expr) to be raised upon exit from the generator.\" In the case of some_func(3), StopIteration is raised at the beginning because of return statement. The StopIteration exception is automatically caught inside the list(...) wrapper and the for loop. Therefore, the above two snippets result in an empty list. To get [\"wtf\"] from the generator some_func we need to catch the StopIteration exception, try: next(some_func(3)) except StopIteration as e: some_string = e.value >>> some_string [\"wtf\"] ▶ Nan-reflexivity * 1. a = float('inf') b = float('nan') c = float('-iNf') # These strings are case-insensitive d = float('nan') Output: >>> a inf >>> b nan >>> c -inf >>> float('some_other_string') ValueError: could not convert string to float: some_other_string >>> a == -c # inf==inf True >>> None == None # None == None True >>> b == d # but nan!=nan False >>> 50 / a 0.0 >>> a / a nan >>> 23 + b nan 2. >>> x = float('nan') >>> y = x / x >>> y is y # identity holds True >>> y == y # equality fails of y False >>> [y] == [y] # but the equality succeeds for the list containing y True 💡 Explanation: 'inf' and 'nan' are special strings (case-insensitive), which, when explicitly typecast-ed to float type, are used to represent mathematical \"infinity\" and \"not a number\" respectively. Since according to IEEE standards NaN != NaN, obeying this rule breaks the reflexivity assumption of a collection element in Python i.e. if x is a part of a collection like list, the implementations like comparison are based on the assumption that x == x. Because of this assumption, the identity is compared first (since it's faster) while comparing two elements, and the values are compared only when the identities mismatch. The following snippet will make things clearer, >>> x = float('nan') >>> x == x, [x] == [x] (False, True) >>> y = float('nan') >>> y == y, [y] == [y] (False, True) >>> x == y, [x] == [y] (False, False) Since the identities of x and y are different, the values are considered, which are also different; hence the comparison returns False this time. Interesting read: Reflexivity, and other pillars of civilization ▶ Mutating the immutable! This might seem trivial if you know how references work in Python. some_tuple = (\"A\", \"tuple\", \"with\", \"values\") another_tuple = ([1, 2], [3, 4], [5, 6]) Output: >>> some_tuple[2] = \"change this\" TypeError: 'tuple' object does not support item assignment >>> another_tuple[2].append(1000) #This throws no error >>> another_tuple ([1, 2], [3, 4], [5, 6, 1000]) >>> another_tuple[2] += [99, 999] TypeError: 'tuple' object does not support item assignment >>> another_tuple ([1, 2], [3, 4], [5, 6, 1000, 99, 999]) But I thought tuples were immutable... 💡 Explanation: Quoting from https://docs.python.org/3/reference/datamodel.html Immutable sequences An object of an immutable sequence type cannot change once it is created. (If the object contains references to other objects, these other objects may be mutable and may be modified; however, the collection of objects directly referenced by an immutable object cannot change.) += operator changes the list in-place. The item assignment doesn't work, but when the exception occurs, the item has already been changed in place. There's also an explanation in official Python FAQ. ▶ The disappearing variable from outer scope e = 7 try: raise Exception() except Exception as e: pass Output (Python 2.x): >>> print(e) # prints nothing Output (Python 3.x): >>> print(e) NameError: name 'e' is not defined 💡 Explanation: Source: https://docs.python.org/3/reference/compound_stmts.html#except When an exception has been assigned using as target, it is cleared at the end of the except clause. This is as if except E as N: foo was translated into except E as N: try: foo finally: del N This means the exception must be assigned to a different name to be able to refer to it after the except clause. Exceptions are cleared because, with the traceback attached to them, they form a reference cycle with the stack frame, keeping all locals in that frame alive until the next garbage collection occurs. The clauses are not scoped in Python. Everything in the example is present in the same scope, and the variable e got removed due to the execution of the except clause. The same is not the case with functions that have their separate inner-scopes. The example below illustrates this: def f(x): del(x) print(x) x = 5 y = [5, 4, 3] Output: >>> f(x) UnboundLocalError: local variable 'x' referenced before assignment >>> f(y) UnboundLocalError: local variable 'x' referenced before assignment >>> x 5 >>> y [5, 4, 3] In Python 2.x, the variable name e gets assigned to Exception() instance, so when you try to print, it prints nothing. Output (Python 2.x): >>> e Exception() >>> print e # Nothing is printed! ▶ The mysterious key type conversion class SomeClass(str): pass some_dict = {'s': 42} Output: >>> type(list(some_dict.keys())[0]) str >>> s = SomeClass('s') >>> some_dict[s] = 40 >>> some_dict # expected: Two different keys-value pairs {'s': 40} >>> type(list(some_dict.keys())[0]) str 💡 Explanation: Both the object s and the string \"s\" hash to the same value because SomeClass inherits the __hash__ method of str class. SomeClass(\"s\") == \"s\" evaluates to True because SomeClass also inherits __eq__ method from str class. Since both the objects hash to the same value and are equal, they are represented by the same key in the dictionary. For the desired behavior, we can redefine the __eq__ method in SomeClass class SomeClass(str): def __eq__(self, other): return ( type(self) is SomeClass and type(other) is SomeClass and super().__eq__(other) ) # When we define a custom __eq__, Python stops automatically inheriting the # __hash__ method, so we need to define it as well __hash__ = str.__hash__ some_dict = {'s':42} Output: >>> s = SomeClass('s') >>> some_dict[s] = 40 >>> some_dict {'s': 40, 's': 42} >>> keys = list(some_dict.keys()) >>> type(keys[0]), type(keys[1]) (__main__.SomeClass, str) ▶ Let's see if you can guess this? a, b = a[b] = {}, 5 Output: >>> a {5: ({...}, 5)} 💡 Explanation: According to Python language reference, assignment statements have the form (target_list \"=\")+ (expression_listyield_expression) and An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right. The + in (target_list \"=\")+ means there can be one or more target lists. In this case, target lists are a, b and a[b] (note the expression list is exactly one, which in our case is {}, 5). After the expression list is evaluated, its value is unpacked to the target lists from left to right. So, in our case, first the {}, 5 tuple is unpacked to a, b and we now have a = {} and b = 5. a is now assigned to {}, which is a mutable object. The second target list is a[b] (you may expect this to throw an error because both a and b have not been defined in the statements before. But remember, we just assigned a to {} and b to 5). Now, we are setting the key 5 in the dictionary to the tuple ({}, 5) creating a circular reference (the {...} in the output refers to the same object that a is already referencing). Another simpler example of circular reference could be >>> some_list = some_list[0] = [0] >>> some_list [[...]] >>> some_list[0] [[...]] >>> some_list is some_list[0] True >>> some_list[0][0][0][0][0][0] == some_list True Similar is the case in our example (a[b][0] is the same object as a) So to sum it up, you can break the example down to a, b = {}, 5 a[b] = a, b And the circular reference can be justified by the fact that a[b][0] is the same object as a >>> a[b][0] is a True ▶ Exceeds the limit for integer string conversion >>> # Python 3.10.6 >>> int(\"2\" * 5432) >>> # Python 3.10.8 >>> int(\"2\" * 5432) Output: >>> # Python 3.10.6 222222222222222222222222222222222222222222222222222222222222222... >>> # Python 3.10.8 Traceback (most recent call last): ... ValueError: Exceeds the limit (4300) for integer string conversion: value has 5432 digits; use sys.set_int_max_str_digits() to increase the limit. 💡 Explanation: This call to int() works fine in Python 3.10.6 and raises a ValueError in Python 3.10.8. Note that Python can still work with large integers. The error is only raised when converting between integers and strings. Fortunately, you can increase the limit for the allowed number of digits when you expect an operation to exceed it. To do this, you can use one of the following: The -X int_max_str_digits command-line flag The set_int_max_str_digits() function from the sys module The PYTHONINTMAXSTRDIGITS environment variable Check the documentation for more details on changing the default limit if you expect your code to exceed this value. Section: Slippery Slopes ▶ Modifying a dictionary while iterating over it x = {0: None} for i in x: del x[i] x[i+1] = None print(i) Output (Python 2.7- Python 3.5): 0 1 2 3 4 5 6 7 Yes, it runs for exactly eight times and stops. 💡 Explanation: Iteration over a dictionary that you edit at the same time is not supported. It runs eight times because that's the point at which the dictionary resizes to hold more keys (we have eight deletion entries, so a resize is needed). This is actually an implementation detail. How deleted keys are handled and when the resize occurs might be different for different Python implementations. So for Python versions other than Python 2.7 - Python 3.5, the count might be different from 8 (but whatever the count is, it's going to be the same every time you run it). You can find some discussion around this here or in this StackOverflow thread. Python 3.7.6 onwards, you'll see RuntimeError: dictionary keys changed during iteration exception if you try to do this. ▶ Stubborn del operation class SomeClass: def __del__(self): print(\"Deleted!\") Output: 1. >>> x = SomeClass() >>> y = x >>> del x # this should print \"Deleted!\" >>> del y Deleted! Phew, deleted at last. You might have guessed what saved __del__ from being called in our first attempt to delete x. Let's add more twists to the example. 2. >>> x = SomeClass() >>> y = x >>> del x >>> y # check if y exists>>> del y # Like previously, this should print \"Deleted!\" >>> globals() # oh, it didn't. Let's check all our global variables and confirm Deleted! {'__builtins__': , 'SomeClass': , '__package__': None, '__name__': '__main__', '__doc__': None} Okay, now it's deleted 😕 💡 Explanation: del x doesn’t directly call x.__del__(). When del x is encountered, Python deletes the name x from current scope and decrements by 1 the reference count of the object x referenced. __del__() is called only when the object's reference count reaches zero. In the second output snippet, __del__() was not called because the previous statement (>>> y) in the interactive interpreter created another reference to the same object (specifically, the _ magic variable which references the result value of the last non None expression on the REPL), thus preventing the reference count from reaching zero when del y was encountered. Calling globals (or really, executing anything that will have a non None result) caused _ to reference the new result, dropping the existing reference. Now the reference count reached 0 and we can see \"Deleted!\" being printed (finally!). ▶ The out of scope variable 1. a = 1 def some_func(): return a def another_func(): a += 1 return a 2. def some_closure_func(): a = 1 def some_inner_func(): return a return some_inner_func() def another_closure_func(): a = 1 def another_inner_func(): a += 1 return a return another_inner_func() Output: >>> some_func() 1 >>> another_func() UnboundLocalError: local variable 'a' referenced before assignment >>> some_closure_func() 1 >>> another_closure_func() UnboundLocalError: local variable 'a' referenced before assignment 💡 Explanation: When you make an assignment to a variable in scope, it becomes local to that scope. So a becomes local to the scope of another_func, but it has not been initialized previously in the same scope, which throws an error. To modify the outer scope variable a in another_func, we have to use the global keyword. def another_func() global a a += 1 return a Output: >>> another_func() 2 In another_closure_func, a becomes local to the scope of another_inner_func, but it has not been initialized previously in the same scope, which is why it throws an error. To modify the outer scope variable a in another_inner_func, use the nonlocal keyword. The nonlocal statement is used to refer to variables defined in the nearest outer (excluding the global) scope. def another_func(): a = 1 def another_inner_func(): nonlocal a a += 1 return a return another_inner_func() Output: >>> another_func() 2 The keywords global and nonlocal tell the python interpreter to not declare new variables and look them up in the corresponding outer scopes. Read this short but an awesome guide to learn more about how namespaces and scope resolution works in Python. ▶ Deleting a list item while iterating list_1 = [1, 2, 3, 4] list_2 = [1, 2, 3, 4] list_3 = [1, 2, 3, 4] list_4 = [1, 2, 3, 4] for idx, item in enumerate(list_1): del item for idx, item in enumerate(list_2): list_2.remove(item) for idx, item in enumerate(list_3[:]): list_3.remove(item) for idx, item in enumerate(list_4): list_4.pop(idx) Output: >>> list_1 [1, 2, 3, 4] >>> list_2 [2, 4] >>> list_3 [] >>> list_4 [2, 4] Can you guess why the output is [2, 4]? 💡 Explanation: It's never a good idea to change the object you're iterating over. The correct way to do so is to iterate over a copy of the object instead, and list_3[:] does just that. >>> some_list = [1, 2, 3, 4] >>> id(some_list) 139798789457608 >>> id(some_list[:]) # Notice that python creates new object for sliced list. 139798779601192 Difference between del, remove, and pop: del var_name just removes the binding of the var_name from the local or global namespace (That's why the list_1 is unaffected). remove removes the first matching value, not a specific index, raises ValueError if the value is not found. pop removes the element at a specific index and returns it, raises IndexError if an invalid index is specified. Why the output is [2, 4]? The list iteration is done index by index, and when we remove 1 from list_2 or list_4, the contents of the lists are now [2, 3, 4]. The remaining elements are shifted down, i.e., 2 is at index 0, and 3 is at index 1. Since the next iteration is going to look at index 1 (which is the 3), the 2 gets skipped entirely. A similar thing will happen with every alternate element in the list sequence. Refer to this StackOverflow thread explaining the example See also this nice StackOverflow thread for a similar example related to dictionaries in Python. ▶ Lossy zip of iterators * >>> numbers = list(range(7)) >>> numbers [0, 1, 2, 3, 4, 5, 6] >>> first_three, remaining = numbers[:3], numbers[3:] >>> first_three, remaining ([0, 1, 2], [3, 4, 5, 6]) >>> numbers_iter = iter(numbers) >>> list(zip(numbers_iter, first_three)) [(0, 0), (1, 1), (2, 2)] # so far so good, let's zip the remaining >>> list(zip(numbers_iter, remaining)) [(4, 3), (5, 4), (6, 5)] Where did element 3 go from the numbers list? 💡 Explanation: From Python docs, here's an approximate implementation of zip function, def zip(*iterables): sentinel = object() iterators = [iter(it) for it in iterables] while iterators: result = [] for it in iterators: elem = next(it, sentinel) if elem is sentinel: return result.append(elem) yield tuple(result) So the function takes in arbitrary number of iterable objects, adds each of their items to the result list by calling the next function on them, and stops whenever any of the iterable is exhausted. The caveat here is when any iterable is exhausted, the existing elements in the result list are discarded. That's what happened with 3 in the numbers_iter. The correct way to do the above using zip would be, >>> numbers = list(range(7)) >>> numbers_iter = iter(numbers) >>> list(zip(first_three, numbers_iter)) [(0, 0), (1, 1), (2, 2)] >>> list(zip(remaining, numbers_iter)) [(3, 3), (4, 4), (5, 5), (6, 6)] The first argument of zip should be the one with fewest elements. ▶ Loop variables leaking out! 1. for x in range(7): if x == 6: print(x, ': for x inside loop') print(x, ': x in global') Output: 6 : for x inside loop 6 : x in global But x was never defined outside the scope of for loop... 2. # This time let's initialize x first x = -1 for x in range(7): if x == 6: print(x, ': for x inside loop') print(x, ': x in global') Output: 6 : for x inside loop 6 : x in global 3. Output (Python 2.x): >>> x = 1 >>> print([x for x in range(5)]) [0, 1, 2, 3, 4] >>> print(x) 4 Output (Python 3.x): >>> x = 1 >>> print([x for x in range(5)]) [0, 1, 2, 3, 4] >>> print(x) 1 💡 Explanation: In Python, for-loops use the scope they exist in and leave their defined loop-variable behind. This also applies if we explicitly defined the for-loop variable in the global namespace before. In this case, it will rebind the existing variable. The differences in the output of Python 2.x and Python 3.x interpreters for list comprehension example can be explained by following change documented in What’s New In Python 3.0 changelog: \"List comprehensions no longer support the syntactic form [... for var in item1, item2, ...]. Use [... for var in (item1, item2, ...)] instead. Also, note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a list() constructor, and in particular, the loop control variables are no longer leaked into the surrounding scope.\" ▶ Beware of default mutable arguments! def some_func(default_arg=[]): default_arg.append(\"some_string\") return default_arg Output: >>> some_func() ['some_string'] >>> some_func() ['some_string', 'some_string'] >>> some_func([]) ['some_string'] >>> some_func() ['some_string', 'some_string', 'some_string'] 💡 Explanation: The default mutable arguments of functions in Python aren't really initialized every time you call the function. Instead, the recently assigned value to them is used as the default value. When we explicitly passed [] to some_func as the argument, the default value of the default_arg variable was not used, so the function returned as expected. def some_func(default_arg=[]): default_arg.append(\"some_string\") return default_arg Output: >>> some_func.__defaults__ #This will show the default argument values for the function ([],) >>> some_func() >>> some_func.__defaults__ (['some_string'],) >>> some_func() >>> some_func.__defaults__ (['some_string', 'some_string'],) >>> some_func([]) >>> some_func.__defaults__ (['some_string', 'some_string'],) A common practice to avoid bugs due to mutable arguments is to assign None as the default value and later check if any value is passed to the function corresponding to that argument. Example: def some_func(default_arg=None): if default_arg is None: default_arg = [] default_arg.append(\"some_string\") return default_arg ▶ Catching the Exceptions some_list = [1, 2, 3] try: # This should raise an ``IndexError`` print(some_list[4]) except IndexError, ValueError: print(\"Caught!\") try: # This should raise a ``ValueError`` some_list.remove(4) except IndexError, ValueError: print(\"Caught again!\") Output (Python 2.x): Caught! ValueError: list.remove(x): x not in list Output (Python 3.x): File \"\", line 3 except IndexError, ValueError: ^ SyntaxError: invalid syntax 💡 Explanation To add multiple Exceptions to the except clause, you need to pass them as parenthesized tuple as the first argument. The second argument is an optional name, which when supplied will bind the Exception instance that has been raised. Example, some_list = [1, 2, 3] try: # This should raise a ``ValueError`` some_list.remove(4) except (IndexError, ValueError), e: print(\"Caught again!\") print(e) Output (Python 2.x): Caught again! list.remove(x): x not in list Output (Python 3.x): File \"\", line 4 except (IndexError, ValueError), e:^ IndentationError: unindent does not match any outer indentation level Separating the exception from the variable with a comma is deprecated and does not work in Python 3; the correct way is to use as. Example, some_list = [1, 2, 3] try: some_list.remove(4) except (IndexError, ValueError) as e: print(\"Caught again!\") print(e) Output: Caught again! list.remove(x): x not in list ▶ Same operands, different story! 1. a = [1, 2, 3, 4] b = a a = a + [5, 6, 7, 8] Output: >>> a [1, 2, 3, 4, 5, 6, 7, 8] >>> b [1, 2, 3, 4] 2. a = [1, 2, 3, 4] b = a a += [5, 6, 7, 8] Output: >>> a [1, 2, 3, 4, 5, 6, 7, 8] >>> b [1, 2, 3, 4, 5, 6, 7, 8] 💡 Explanation: a += b doesn't always behave the same way as a = a + b. Classes may implement the op= operators differently, and lists do this. The expression a = a + [5,6,7,8] generates a new list and sets a's reference to that new list, leaving b unchanged. The expression a += [5,6,7,8] is actually mapped to an \"extend\" function that operates on the list such that a and b still point to the same list that has been modified in-place. ▶ Name resolution ignoring class scope 1. x = 5 class SomeClass: x = 17 y = (x for i in range(10)) Output: >>> list(SomeClass.y)[0] 5 2. x = 5 class SomeClass: x = 17 y = [x for i in range(10)] Output (Python 2.x): >>> SomeClass.y[0] 17 Output (Python 3.x): >>> SomeClass.y[0] 5 💡 Explanation Scopes nested inside class definition ignore names bound at the class level. A generator expression has its own scope. Starting from Python 3.X, list comprehensions also have their own scope. ▶ Rounding like a banker * Let's implement a naive function to get the middle element of a list: def get_middle(some_list): mid_index = round(len(some_list) / 2) return some_list[mid_index - 1] Python 3.x: >>> get_middle([1]) # looks good 1 >>> get_middle([1,2,3]) # looks good 2 >>> get_middle([1,2,3,4,5]) # huh? 2 >>> len([1,2,3,4,5]) / 2 # good 2.5 >>> round(len([1,2,3,4,5]) / 2) # why? 2 It seems as though Python rounded 2.5 to 2. 💡 Explanation: This is not a float precision error, in fact, this behavior is intentional. Since Python 3.0, round() uses banker's rounding where .5 fractions are rounded to the nearest even number: >>> round(0.5) 0 >>> round(1.5) 2 >>> round(2.5) 2 >>> import numpy # numpy does the same >>> numpy.round(0.5) 0.0 >>> numpy.round(1.5) 2.0 >>> numpy.round(2.5) 2.0 This is the recommended way to round .5 fractions as described in IEEE 754. However, the other way (round away from zero) is taught in school most of the time, so banker's rounding is likely not that well known. Furthermore, some of the most popular programming languages (for example: JavaScript, Java, C/C++, Ruby, Rust) do not use banker's rounding either. Therefore, this is still quite special to Python and may result in confusion when rounding fractions. See the round() docs or this stackoverflow thread for more information. Note that get_middle([1]) only returned 1 because the index was round(0.5) - 1 = 0 - 1 = -1, returning the last element in the list. ▶ Needles in a Haystack * I haven't met even a single experience Pythonist till date who has not come across one or more of the following scenarios, 1. x, y = (0, 1) if True else None, None Output: >>> x, y # expected (0, 1) ((0, 1), None) 2. t = ('one', 'two') for i in t: print(i) t = ('one') for i in t: print(i) t = () print(t) Output: one two o n e tuple() 3. ten_words_list = [ \"some\", \"very\", \"big\", \"list\", \"that\" \"consists\", \"of\", \"exactly\", \"ten\", \"words\" ] Output >>> len(ten_words_list) 9 4. Not asserting strongly enough a = \"python\" b = \"javascript\" Output: # An assert statement with an assertion failure message. >>> assert(a == b, \"Both languages are different\") # No AssertionError is raised 5. some_list = [1, 2, 3] some_dict = { \"key_1\": 1, \"key_2\": 2, \"key_3\": 3 } some_list = some_list.append(4) some_dict = some_dict.update({\"key_4\": 4}) Output: >>> print(some_list) None >>> print(some_dict) None 6. def some_recursive_func(a): if a[0] == 0: return a[0] -= 1 some_recursive_func(a) return a def similar_recursive_func(a): if a == 0: return a a -= 1 similar_recursive_func(a) return a Output: >>> some_recursive_func([5, 0]) [0, 0] >>> similar_recursive_func(5) 4 💡 Explanation: For 1, the correct statement for expected behavior is x, y = (0, 1) if True else (None, None). For 2, the correct statement for expected behavior is t = ('one',) or t = 'one', (missing comma) otherwise the interpreter considers t to be a str and iterates over it character by character. () is a special token and denotes empty tuple. In 3, as you might have already figured out, there's a missing comma after 5th element (\"that\") in the list. So by implicit string literal concatenation, >>> ten_words_list ['some', 'very', 'big', 'list', 'thatconsists', 'of', 'exactly', 'ten', 'words'] No AssertionError was raised in 4th snippet because instead of asserting the individual expression a == b, we're asserting entire tuple. The following snippet will clear things up, >>> a = \"python\" >>> b = \"javascript\" >>> assert a == b Traceback (most recent call last): File \"\", line 1, inAssertionError >>> assert (a == b, \"Values are not equal\") :1: SyntaxWarning: assertion is always true, perhaps remove parentheses? >>> assert a == b, \"Values are not equal\" Traceback (most recent call last): File \"\", line 1, inAssertionError: Values are not equal As for the fifth snippet, most methods that modify the items of sequence/mapping objects like list.append, dict.update, list.sort, etc. modify the objects in-place and return None. The rationale behind this is to improve performance by avoiding making a copy of the object if the operation can be done in-place (Referred from here). Last one should be fairly obvious, mutable object (like list) can be altered in the function, and the reassignment of an immutable (a -= 1) is not an alteration of the value. Being aware of these nitpicks can save you hours of debugging effort in the long run. ▶ Splitsies * >>> 'a'.split() ['a'] # is same as >>> 'a'.split(' ') ['a'] # but >>> len(''.split()) 0 # isn't the same as >>> len(''.split(' ')) 1 💡 Explanation: It might appear at first that the default separator for split is a single space ' ', but as per the docs If sep is not specified or is None, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns []. If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, '1,,2'.split(',') returns ['1', '', '2']). Splitting an empty string with a specified separator returns ['']. Noticing how the leading and trailing whitespaces are handled in the following snippet will make things clear, >>> ' a '.split(' ') ['', 'a', ''] >>> ' a '.split() ['a'] >>> ''.split(' ') [''] ▶ Wild imports * # File: module.py def some_weird_name_func_(): print(\"works!\") def _another_weird_name_func(): print(\"works!\") Output >>> from module import * >>> some_weird_name_func_() \"works!\" >>> _another_weird_name_func() Traceback (most recent call last): File \"\", line 1, inNameError: name '_another_weird_name_func' is not defined 💡 Explanation: It is often advisable to not use wildcard imports. The first obvious reason for this is, in wildcard imports, the names with a leading underscore don't get imported. This may lead to errors during runtime. Had we used from ... import a, b, c syntax, the above NameError wouldn't have occurred. >>> from module import some_weird_name_func_, _another_weird_name_func >>> _another_weird_name_func() works! If you really want to use wildcard imports, then you'd have to define the list __all__ in your module that will contain a list of public objects that'll be available when we do wildcard imports. __all__ = ['_another_weird_name_func'] def some_weird_name_func_(): print(\"works!\") def _another_weird_name_func(): print(\"works!\") Output >>> _another_weird_name_func() \"works!\" >>> some_weird_name_func_() Traceback (most recent call last): File \"\", line 1, inNameError: name 'some_weird_name_func_' is not defined ▶ All sorted? * >>> x = 7, 8, 9 >>> sorted(x) == x False >>> sorted(x) == sorted(x) True >>> y = reversed(x) >>> sorted(y) == sorted(y) False 💡 Explanation: The sorted method always returns a list, and comparing lists and tuples always returns False in Python. >>> [] == tuple() False >>> x = 7, 8, 9 >>> type(x), type(sorted(x)) (tuple, list) Unlike sorted, the reversed method returns an iterator. Why? Because sorting requires the iterator to be either modified in-place or use an extra container (a list), whereas reversing can simply work by iterating from the last index to the first. So during comparison sorted(y) == sorted(y), the first call to sorted() will consume the iterator y, and the next call will just return an empty list. >>> x = 7, 8, 9 >>> y = reversed(x) >>> sorted(y), sorted(y) ([7, 8, 9], []) ▶ Midnight time doesn't exist? from datetime import datetime midnight = datetime(2018, 1, 1, 0, 0) midnight_time = midnight.time() noon = datetime(2018, 1, 1, 12, 0) noon_time = noon.time() if midnight_time: print(\"Time at midnight is\", midnight_time) if noon_time: print(\"Time at noon is\", noon_time) Output (>> from __future__ import barry_as_FLUFL >>> \"Ruby\" != \"Python\" # there's no doubt about it File \"some_file.py\", line 1 \"Ruby\" != \"Python\" ^ SyntaxError: invalid syntax >>> \"Ruby\"\"Python\" True There we go. 💡 Explanation: This is relevant to PEP-401 released on April 1, 2009 (now you know, what it means). Quoting from the PEP-401 Recognized that the != inequality operator in Python 3.0 was a horrible, finger-pain inducing mistake, the FLUFL reinstates thediamond operator as the sole spelling. There were more things that Uncle Barry had to share in the PEP; you can read them here. It works well in an interactive environment, but it will raise a SyntaxError when you run via python file (see this issue). However, you can wrap the statement inside an eval or compile to get it working, from __future__ import barry_as_FLUFL print(eval('\"Ruby\"\"Python\"')) ▶ Even Python understands that love is complicated import this Wait, what's this? this is love ❤ Output: The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! It's the Zen of Python! >>> love = this >>> this is love True >>> love is True False >>> love is False False >>> love is not True or False True >>> love is not True or False; love is love # Love is complicated True 💡 Explanation: this module in Python is an easter egg for The Zen Of Python (PEP 20). And if you think that's already interesting enough, check out the implementation of this.py. Interestingly, the code for the Zen violates itself (and that's probably the only place where this happens). Regarding the statement love is not True or False; love is love, ironic but it's self-explanatory (if not, please see the examples related to is and is not operators). ▶ Yes, it exists! The else clause for loops. One typical example might be: def does_exists_num(l, to_find): for num in l: if num == to_find: print(\"Exists!\") break else: print(\"Does not exist\") Output: >>> some_list = [1, 2, 3, 4, 5] >>> does_exists_num(some_list, 4) Exists! >>> does_exists_num(some_list, -1) Does not exist The else clause in exception handling. An example, try: pass except: print(\"Exception occurred!!!\") else: print(\"Try block executed successfully...\") Output: Try block executed successfully... 💡 Explanation: The else clause after a loop is executed only when there's no explicit break after all the iterations. You can think of it as a \"nobreak\" clause. else clause after a try block is also called \"completion clause\" as reaching the else clause in a try statement means that the try block actually completed successfully. ▶ Ellipsis * def some_func(): Ellipsis Output >>> some_func() # No output, No Error >>> SomeRandomString Traceback (most recent call last): File \"\", line 1, inNameError: name 'SomeRandomString' is not defined >>> Ellipsis Ellipsis 💡 Explanation In Python, Ellipsis is a globally available built-in object which is equivalent to .... >>> ... Ellipsis Ellipsis can be used for several purposes, As a placeholder for code that hasn't been written yet (just like pass statement) In slicing syntax to represent the full slices in remaining direction >>> import numpy as np >>> three_dimensional_array = np.arange(8).reshape(2, 2, 2) array([ [ [0, 1], [2, 3] ], [ [4, 5], [6, 7] ] ]) So our three_dimensional_array is an array of array of arrays. Let's say we want to print the second element (index 1) of all the innermost arrays, we can use Ellipsis to bypass all the preceding dimensions >>> three_dimensional_array[:,:,1] array([[1, 3], [5, 7]]) >>> three_dimensional_array[..., 1] # using Ellipsis. array([[1, 3], [5, 7]]) Note: this will work for any number of dimensions. You can even select slice in first and last dimension and ignore the middle ones this way (n_dimensional_array[firs_dim_slice, ..., last_dim_slice]) In type hinting to indicate only a part of the type (like (Callable[..., int] or Tuple[str, ...])) You may also use Ellipsis as a default function argument (in the cases when you want to differentiate between the \"no argument passed\" and \"None value passed\" scenarios). ▶ Inpinity The spelling is intended. Please, don't submit a patch for this. Output (Python 3.x): >>> infinity = float('infinity') >>> hash(infinity) 314159 >>> hash(float('-inf')) -314159 💡 Explanation: Hash of infinity is 10⁵ x π. Interestingly, the hash of float('-inf') is \"-10⁵ x π\" in Python 3, whereas \"-10⁵ x e\" in Python 2. ▶ Let's mangle 1. class Yo(object): def __init__(self): self.__honey = True self.bro = True Output: >>> Yo().bro True >>> Yo().__honey AttributeError: 'Yo' object has no attribute '__honey' >>> Yo()._Yo__honey True 2. class Yo(object): def __init__(self): # Let's try something symmetrical this time self.__honey__ = True self.bro = True Output: >>> Yo().bro True >>> Yo()._Yo__honey__ Traceback (most recent call last): File \"\", line 1, inAttributeError: 'Yo' object has no attribute '_Yo__honey__' Why did Yo()._Yo__honey work? 3. _A__variable = \"Some value\" class A(object): def some_func(self): return __variable # not initialized anywhere yet Output: >>> A().__variable Traceback (most recent call last): File \"\", line 1, inAttributeError: 'A' object has no attribute '__variable' >>> A().some_func() 'Some value' 💡 Explanation: Name Mangling is used to avoid naming collisions between different namespaces. In Python, the interpreter modifies (mangles) the class member names starting with __ (double underscore a.k.a \"dunder\") and not ending with more than one trailing underscore by adding _NameOfTheClass in front. So, to access __honey attribute in the first snippet, we had to append _Yo to the front, which would prevent conflicts with the same name attribute defined in any other class. But then why didn't it work in the second snippet? Because name mangling excludes the names ending with double underscores. The third snippet was also a consequence of name mangling. The name __variable in the statement return __variable was mangled to _A__variable, which also happens to be the name of the variable we declared in the outer scope. Also, if the mangled name is longer than 255 characters, truncation will happen. Section: Appearances are deceptive! ▶ Skipping lines? Output: >>> value = 11 >>> valuе = 32 >>> value 11 Wut? Note: The easiest way to reproduce this is to simply copy the statements from the above snippet and paste them into your file/shell. 💡 Explanation Some non-Western characters look identical to letters in the English alphabet but are considered distinct by the interpreter. >>> ord('е') # cyrillic 'e' (Ye) 1077 >>> ord('e') # latin 'e', as used in English and typed using standard keyboard 101 >>> 'е' == 'e' False >>> value = 42 # latin e >>> valuе = 23 # cyrillic 'e', Python 2.x interpreter would raise a `SyntaxError` here >>> value 42 The built-in ord() function returns a character's Unicode code point, and different code positions of Cyrillic 'e' and Latin 'e' justify the behavior of the above example. ▶ Teleportation # `pip install numpy` first. import numpy as np def energy_send(x): # Initializing a numpy array np.array([float(x)]) def energy_receive(): # Return an empty numpy array return np.empty((), dtype=np.float).tolist() Output: >>> energy_send(123.456) >>> energy_receive() 123.456 Where's the Nobel Prize? 💡 Explanation: Notice that the numpy array created in the energy_send function is not returned, so that memory space is free to reallocate. numpy.empty() returns the next free memory slot without reinitializing it. This memory spot just happens to be the same one that was just freed (usually, but not always). ▶ Well, something is fishy... def square(x): \"\"\" A simple function to calculate the square of a number by addition. \"\"\" sum_so_far = 0 for counter in range(x): sum_so_far = sum_so_far + x return sum_so_far Output (Python 2.x): >>> square(10) 10 Shouldn't that be 100? Note: If you're not able to reproduce this, try running the file mixed_tabs_and_spaces.py via the shell. 💡 Explanation Don't mix tabs and spaces! The character just preceding return is a \"tab\", and the code is indented by multiple of \"4 spaces\" elsewhere in the example. This is how Python handles tabs: First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eightSo the \"tab\" at the last line of square function is replaced with eight spaces, and it gets into the loop. Python 3 is kind enough to throw an error for such cases automatically. Output (Python 3.x): TabError: inconsistent use of tabs and spaces in indentation Section: Miscellaneous ▶ += is faster # using \"+\", three strings: >>> timeit.timeit(\"s1 = s1 + s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100) 0.25748300552368164 # using \"+=\", three strings: >>> timeit.timeit(\"s1 += s2 + s3\", setup=\"s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000\", number=100) 0.012188911437988281 💡 Explanation: += is faster than + for concatenating more than two strings because the first string (example, s1 for s1 += s2 + s3) is not destroyed while calculating the complete string. ▶ Let's make a giant string! def add_string_with_plus(iters): s = \"\" for i in range(iters): s += \"xyz\" assert len(s) == 3*iters def add_bytes_with_plus(iters): s = b\"\" for i in range(iters): s += b\"xyz\" assert len(s) == 3*iters def add_string_with_format(iters): fs = \"{}\"*iters s = fs.format(*([\"xyz\"]*iters)) assert len(s) == 3*iters def add_string_with_join(iters): l = [] for i in range(iters): l.append(\"xyz\") s = \"\".join(l) assert len(s) == 3*iters def convert_list_to_string(l, iters): s = \"\".join(l) assert len(s) == 3*iters Output: # Executed in ipython shell using %timeit for better readability of results. # You can also use the timeit module in normal python shell/scriptm=, example usage below # timeit.timeit('add_string_with_plus(10000)', number=1000, globals=globals()) >>> NUM_ITERS = 1000 >>> %timeit -n1000 add_string_with_plus(NUM_ITERS) 124 µs ± 4.73 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) >>> %timeit -n1000 add_bytes_with_plus(NUM_ITERS) 211 µs ± 10.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) >>> %timeit -n1000 add_string_with_format(NUM_ITERS) 61 µs ± 2.18 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) >>> %timeit -n1000 add_string_with_join(NUM_ITERS) 117 µs ± 3.21 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) >>> l = [\"xyz\"]*NUM_ITERS >>> %timeit -n1000 convert_list_to_string(l, NUM_ITERS) 10.1 µs ± 1.06 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) Let's increase the number of iterations by a factor of 10. >>> NUM_ITERS = 10000 >>> %timeit -n1000 add_string_with_plus(NUM_ITERS) # Linear increase in execution time 1.26 ms ± 76.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) >>> %timeit -n1000 add_bytes_with_plus(NUM_ITERS) # Quadratic increase 6.82 ms ± 134 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) >>> %timeit -n1000 add_string_with_format(NUM_ITERS) # Linear increase 645 µs ± 24.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) >>> %timeit -n1000 add_string_with_join(NUM_ITERS) # Linear increase 1.17 ms ± 7.25 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) >>> l = [\"xyz\"]*NUM_ITERS >>> %timeit -n1000 convert_list_to_string(l, NUM_ITERS) # Linear increase 86.3 µs ± 2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 💡 Explanation You can read more about timeit or %timeit on these links. They are used to measure the execution time of code pieces. Don't use + for generating long strings — In Python, str is immutable, so the left and right strings have to be copied into the new string for every pair of concatenations. If you concatenate four strings of length 10, you'll be copying (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 characters instead of just 40 characters. Things get quadratically worse as the number and size of the string increases (justified with the execution times of add_bytes_with_plus function) Therefore, it's advised to use .format. or % syntax (however, they are slightly slower than + for very short strings). Or better, if already you've contents available in the form of an iterable object, then use ''.join(iterable_object) which is much faster. Unlike add_bytes_with_plus because of the += optimizations discussed in the previous example, add_string_with_plus didn't show a quadratic increase in execution time. Had the statement been s = s + \"x\" + \"y\" + \"z\" instead of s += \"xyz\", the increase would have been quadratic. def add_string_with_plus(iters): s = \"\" for i in range(iters): s = s + \"x\" + \"y\" + \"z\" assert len(s) == 3*iters >>> %timeit -n100 add_string_with_plus(1000) 388 µs ± 22.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) >>> %timeit -n100 add_string_with_plus(10000) # Quadratic increase in execution time 9 ms ± 298 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) So many ways to format and create a giant string are somewhat in contrast to the Zen of Python, according to which, There should be one-- and preferably only one --obvious way to do it. ▶ Slowing down dict lookups * some_dict = {str(i): 1 for i in range(1_000_000)} another_dict = {str(i): 1 for i in range(1_000_000)} Output: >>> %timeit some_dict['5'] 28.6 ns ± 0.115 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each) >>> some_dict[1] = 1 >>> %timeit some_dict['5'] 37.2 ns ± 0.265 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each) >>> %timeit another_dict['5'] 28.5 ns ± 0.142 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each) >>> another_dict[1] # Trying to access a key that doesn't exist Traceback (most recent call last): File \"\", line 1, inKeyError: 1 >>> %timeit another_dict['5'] 38.5 ns ± 0.0913 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each) Why are same lookups becoming slower? 💡 Explanation: CPython has a generic dictionary lookup function that handles all types of keys (str, int, any object ...), and a specialized one for the common case of dictionaries composed of str-only keys. The specialized function (named lookdict_unicode in CPython's source) knows all existing keys (including the looked-up key) are strings, and uses the faster & simpler string comparison to compare keys, instead of calling the __eq__ method. The first time a dict instance is accessed with a non-str key, it's modified so future lookups use the generic function. This process is not reversible for the particular dict instance, and the key doesn't even have to exist in the dictionary. That's why attempting a failed lookup has the same effect. ▶ Bloating instance dicts * import sys class SomeClass: def __init__(self): self.some_attr1 = 1 self.some_attr2 = 2 self.some_attr3 = 3 self.some_attr4 = 4 def dict_size(o): return sys.getsizeof(o.__dict__) Output: (Python 3.8, other Python 3 versions may vary a little) >>> o1 = SomeClass() >>> o2 = SomeClass() >>> dict_size(o1) 104 >>> dict_size(o2) 104 >>> del o1.some_attr1 >>> o3 = SomeClass() >>> dict_size(o3) 232 >>> dict_size(o1) 232 Let's try again... In a new interpreter: >>> o1 = SomeClass() >>> o2 = SomeClass() >>> dict_size(o1) 104 # as expected >>> o1.some_attr5 = 5 >>> o1.some_attr6 = 6 >>> dict_size(o1) 360 >>> dict_size(o2) 272 >>> o3 = SomeClass() >>> dict_size(o3) 232 What makes those dictionaries become bloated? And why are newly created objects bloated as well? 💡 Explanation: CPython is able to reuse the same \"keys\" object in multiple dictionaries. This was added in PEP 412 with the motivation to reduce memory usage, specifically in dictionaries of instances - where keys (instance attributes) tend to be common to all instances. This optimization is entirely seamless for instance dictionaries, but it is disabled if certain assumptions are broken. Key-sharing dictionaries do not support deletion; if an instance attribute is deleted, the dictionary is \"unshared\", and key-sharing is disabled for all future instances of the same class. Additionaly, if the dictionary keys have been resized (because new keys are inserted), they are kept shared only if they are used by a exactly single dictionary (this allows adding many attributes in the __init__ of the very first created instance, without causing an \"unshare\"). If multiple instances exist when a resize happens, key-sharing is disabled for all future instances of the same class: CPython can't tell if your instances are using the same set of attributes anymore, and decides to bail out on attempting to share their keys. A small tip, if you aim to lower your program's memory footprint: don't delete instance attributes, and make sure to initialize all attributes in your __init__! ▶ Minor Ones * join() is a string operation instead of list operation. (sort of counter-intuitive at first usage) 💡 Explanation: If join() is a method on a string, then it can operate on any iterable (list, tuple, iterators). If it were a method on a list, it'd have to be implemented separately by every type. Also, it doesn't make much sense to put a string-specific method on a generic list object API. Few weird looking but semantically correct statements: [] = () is a semantically correct statement (unpacking an empty tuple into an empty list) 'a'[0][0][0][0][0] is also semantically correct, because Python doesn't have a character data type like other languages branched from C. So selecting a single character from a string returns a single-character string. 3 --0-- 5 == 8 and --5 == 5 are both semantically correct statements and evaluate to True. Given that a is a number, ++a and --a are both valid Python statements but don't behave the same way as compared with similar statements in languages like C, C++, or Java. >>> a = 5 >>> a 5 >>> ++a 5 >>> --a 5 💡 Explanation: There is no ++ operator in Python grammar. It is actually two + operators. ++a parses as +(+a) which translates to a. Similarly, the output of the statement --a can be justified. This StackOverflow thread discusses the rationale behind the absence of increment and decrement operators in Python. You must be aware of the Walrus operator in Python. But have you ever heard about the space-invader operator? >>> a = 42 >>> a -=- 1 >>> a 43 It is used as an alternative incrementation operator, together with another one >>> a +=+ 1 >>> a >>> 44 💡 Explanation: This prank comes from Raymond Hettinger's tweet. The space invader operator is actually just a malformatted a -= (-1). Which is equivalent to a = a - (- 1). Similar for the a += (+ 1) case. Python has an undocumented converse implication operator. >>> False ** False == True True >>> False ** True == False True >>> True ** False == True True >>> True ** True == True True 💡 Explanation: If you replace False and True by 0 and 1 and do the maths, the truth table is equivalent to a converse implication operator. (Source) Since we are talking operators, there's also @ operator for matrix multiplication (don't worry, this time it's for real). >>> import numpy as np >>> np.array([2, 2, 2]) @ np.array([7, 8, 8]) 46 💡 Explanation: The @ operator was added in Python 3.5 keeping the scientific community in mind. Any object can overload __matmul__ magic method to define behavior for this operator. From Python 3.8 onwards you can use a typical f-string syntax like f'{some_var=} for quick debugging. Example, >>> some_string = \"wtfpython\" >>> f'{some_string=}' \"some_string='wtfpython'\" Python uses 2 bytes for local variable storage in functions. In theory, this means that only 65536 variables can be defined in a function. However, python has a handy solution built in that can be used to store more than 2^16 variable names. The following code demonstrates what happens in the stack when more than 65536 local variables are defined (Warning: This code prints around 2^18 lines of text, so be prepared!): import dis exec(\"\"\" def f(): \"\"\" + \"\"\" \"\"\".join([\"X\" + str(x) + \"=\" + str(x) for x in range(65539)])) f() print(dis.dis(f)) Multiple Python threads won't run your Python code concurrently (yes, you heard it right!). It may seem intuitive to spawn several threads and let them execute your Python code concurrently, but, because of the Global Interpreter Lock in Python, all you're doing is making your threads execute on the same core turn by turn. Python threads are good for IO-bound tasks, but to achieve actual parallelization in Python for CPU-bound tasks, you might want to use the Python multiprocessing module. Sometimes, the print method might not print values immediately. For example, # File some_file.py import time print(\"wtfpython\", end=\"_\") time.sleep(3) This will print the wtfpython after 3 seconds due to the end argument because the output buffer is flushed either after encountering \\n or when the program finishes execution. We can force the buffer to flush by passing flush=True argument. List slicing with out of the bounds indices throws no errors >>> some_list = [1, 2, 3, 4, 5] >>> some_list[111:] [] Slicing an iterable not always creates a new object. For example, >>> some_str = \"wtfpython\" >>> some_list = ['w', 't', 'f', 'p', 'y', 't', 'h', 'o', 'n'] >>> some_list is some_list[:] # False expected because a new object is created. False >>> some_str is some_str[:] # True because strings are immutable, so making a new object is of not much use. True int('١٢٣٤٥٦٧٨٩') returns 123456789 in Python 3. In Python, Decimal characters include digit characters, and all characters that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Here's an interesting story related to this behavior of Python. You can separate numeric literals with underscores (for better readability) from Python 3 onwards. >>> six_million = 6_000_000 >>> six_million 6000000 >>> hex_address = 0xF00D_CAFE >>> hex_address 4027435774 'abc'.count('') == 4. Here's an approximate implementation of count method, which would make the things more clear def count(s, sub): result = 0 for i in range(len(s) + 1 - len(sub)): result += (s[i:i + len(sub)] == sub) return result The behavior is due to the matching of empty substring('') with slices of length 0 in the original string. Contributing A few ways in which you can contribute to wtfpython, Suggesting new examples Helping with translation (See issues labeled translation) Minor corrections like pointing out outdated snippets, typos, formatting errors, etc. Identifying gaps (things like inadequate explanation, redundant examples, etc.) Any creative suggestions to make this project more fun and useful Please see CONTRIBUTING.md for more details. Feel free to create a new issue to discuss things. PS: Please don't reach out with backlinking requests, no links will be added unless they're highly relevant to the project. Acknowledgements The idea and design for this collection were initially inspired by Denys Dovhan's awesome project wtfjs. The overwhelming support by Pythonistas gave it the shape it is in right now. Some nice Links! https://www.youtube.com/watch?v=sH4XF6pKKmk https://www.reddit.com/r/Python/comments/3cu6ej/what_are_some_wtf_things_about_python https://sopython.com/wiki/Common_Gotchas_In_Python https://stackoverflow.com/questions/530530/python-2-x-gotchas-and-landmines https://stackoverflow.com/questions/1011431/common-pitfalls-in-python https://www.python.org/doc/humor/ https://github.com/cosmologicon/pywat#the-undocumented-converse-implication-operator https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65 https://github.com/wemake-services/wemake-python-styleguide/search?q=wtfpython&type=Issues WFTPython discussion threads on Hacker News and Reddit. 🎓 License © Satwik Kansal Surprise your friends as well! If you like wtfpython, you can use these quick links to share it with your friends, TwitterLinkedinFacebook Need a pdf version? I've received a few requests for the pdf (and epub) version of wtfpython. You can add your details here to get them as soon as they are finished. That's all folks! For upcoming content like this, you can add your email here. About What the f*ck Python? 😱 Topics python snippets documentation wtf gotchas interview-questions python-interview-questions pitfalls wats Resources Readme License WTFPL license Code of conduct Code of conduct Activity Stars 33.5k stars Watchers 759 watching Forks 2.6k forks Report repository Releases 2 What the f*ck Python! (3.0) Latest + 1 release Packages No packages published Contributors 72 + 61 contributors Languages Python 100.0% Footer © 2023 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About",
    "commentLink": "https://news.ycombinator.com/item?id=37281692",
    "commentBody": "WTFPython: Exploring and understanding Python through surprising snippetsHacker NewspastloginWTFPython: Exploring and understanding Python through surprising snippets (github.com/satwikkansal) 239 points by Tomte 22 hours ago| hidepastfavorite72 comments asicsp 21 hours agoSome of the substantial previous discussions:* https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=31566031 (460 pointsMay 31, 2022139 comments)* https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=26097732 (359 pointsFeb 11, 2021162 comments)* https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=21862073 (396 pointsDec 23, 2019185 comments) reply bjoli 21 hours agoprevThis is drives home some of the things I really like about scheme. Scheme is built on a few selected primitives and much of the language comes together on top of that.Since learning that I have started disliking all the things that I just have to accept in other languages. I can accept the c++ variant of \"because this and that comes together like this. Because speed\", but the pythonesque \"because because\" drives me insane. reply Lyngbakr 20 hours agoparentAre you using Scheme in production? I&#x27;m super curious about it being applied in the \"real world\", as I&#x27;m currently working my way through SICP. reply ak_111 14 hours agorootparentNo way. Scheme is hobbyist language at this point.Simply put difference between a &#x27;hobbyist&#x27; and professional language for me is the strength and depth of the packaging ecosystem.So as soon as you need to do things like open and parse PDF, implement TLS&#x2F;SSL, create a dashboard,... you will be in trouble pretty quick in scheme. Probably simple stuff like handling unicode would be shaky. reply 8589934591 8 hours agorootparentAfaik racket can do all of what you have mentioned. I have run a few slightly non trivial dev systems using it with good success. Ofc, company never knew about it. reply kristianp 12 hours agoprevOne python library WTF I came across recently is the autojunk parameter of the difflib SequenceMatcher class. Despite passing constructing the class with difflib.SequenceMatcher(isjunk=None, ...The matcher will start classifying characters as junk once the b parameter is more than 200 characters long. So unless you read the docs carefully, your matcher will start not matching anything longer than a few characters once the input gets longer than a few sentences. The trick is to also set autojunk=False in the constructor.Its like the original writer of this component wrote the matcher for a specific application (DNA matching?) and left in the heuristic even though it isn&#x27;t applicable to general use. At some point they added the autojunk parameter to gate this behaviour, but it still defaults to true, to keep backwards compat, and to confuse people.https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;difflib.html#difflib.Seque... reply 8589934591 19 hours agoprevWow. Can&#x27;t believe a couple of these are in my production. Esp with the mixture of py2 and py3. And people who are not well versed in python are just not aware of these gotchas.Good repo, I learnt quite a few more... wtfs. :)I have a strong belief that unless type hints, testing, tooling is leveraged properly, python does not qualify as a good candidate for long term projects. Go handles all of this automatically and I&#x27;m having good results with it as an alternative to Python for small to medium scale projects. reply jackblemming 14 hours agoparentConsider not holding strong beliefs without empirical evidence. There are both plenty of long term python projects that have held up, and no strong evidence one way or the other on type safety. reply 8589934591 14 hours agorootparentThere are both merits and demerits to python. Unfortunately not everyone has the opportunity or the luxury to work with projects that are properly maintained. Even messy python projects in legacy companies hold up but that does not mean quality and maintenance costs are good. My beliefs stem from my experience with the jobs available in my area and country. I&#x27;m not the expert on type safety but my understanding from various sources and my own experience is that type safety is superior. Go has been the best candidate as the alternative for the projects I have undertaken. YMMV. reply globular-toast 58 minutes agorootparentprevThe only evidence I&#x27;ve seen in this respect suggests typing is not the leading cause of bugs in Python. I wish I could find the talk but essentially the guy looked at a load of GitHub issues and analysed the cause and only like 1% or so were type related.I like putting in types just to help my IDE with autocomplete, though. I have also caught a few errors with mypy that could have caused a crash in very unlikely cases. I&#x27;m not convinced it&#x27;s worth rigourously typing a project. It seems like mostly a nerd snipe because I&#x27;ve noticed there is a satisfaction with getting in right despite not making any difference to the user. reply oivey 13 hours agoparentprevFor most of these type hints or static typing do not at all help. I haven’t went through all of them, but in the first quarter or so almost all of them were due to leaky compiler weirdness in CPython. reply 8589934591 8 hours agorootparentI haven&#x27;t tested out the repo with type hints so I can&#x27;t comment on that. What I did mean to say was outside of this repo, type hints are a huge boon saver. There are enough legacy projects written by non python experts which would benefit from whatever I said above. reply synergy20 17 hours agoparentprevI agree, there should be a book specifically made for python-wtfs, e.g. corner cases, practical hacks, name it as &#x27;python traps and pitfalls&#x27; reply h2odragon 21 hours agoprevPython&#x27;s \"int\" optimization of pre-allocating objects for values between -5 and 256 can be a great source of fun when writing extensions, too.Same mechanism, overwriting the value stored in the allocated object; but when the extension is in loose C code which is casting pointers with abandon... things can go wrong. reply cutler 10 hours agoprevHonestly, I never understood why Python gained such a good reputation given the scale of its warts and don&#x27;t get me started on its crippled lambda implementation. reply globular-toast 56 minutes agoparentUse it for a while and you&#x27;ll understand why. It&#x27;s a joy to use. That is successful despite its warts just goes to show how nice it is compared to other languages. reply whatever1 8 hours agoprevComing from C++ in python, the thing that still gets me when I am tired is the arbitrary decision of passing some arguments by reference vs by value.If you look at the argument list you don’t know what will be passed by value and what by reference. You will have to guess their types first. And that is risky. reply globular-toast 48 minutes agoparentBut it works. It&#x27;s like being sceptical of Spanish because of pronoun elision. It&#x27;s no more or less good than any other language. Bugs are bugs. I&#x27;ve never actually had to learn these rules in Python. But in C&#x2F;C++ they crop up very quickly. reply agumonkey 21 hours agoprevVery nice website, I love these counterintuitive yet non absurd examples. reply Timothycquinn 21 hours agoprevLove this. I’ve written a ton of Python in recent years but never used the ‘is’ operator. After reading this I’m glad I did not.I can see usecases but clearly it should be used sparingly. reply wzdd 21 hours agoparentTo be honest this response underscores the problem with pages like this. In Python, strings and numbers are objects, and “is” tells you if they are the same object. You wouldn’t compare strings or numbers in C using a pointer comparison, and you shouldn’t do it in Python either. The fact that it works sometimes in cpython is a coincidence.It’s interesting to learn about how the interpreter is implemented, but that’s about it. reply kstrauser 16 hours agoparentprevYou should absolutely be using `is` where appropriate. `x is None` is almost always preferable to `x == None`. If you&#x27;re checking for object identity, use `is`. If equality, use `==`. They&#x27;re different use cases. reply maweki 14 hours agorootparentEspecially since == can be overwritten, while &#x27;is&#x27; can not. reply kstrauser 14 hours agorootparentThat&#x27;s right. Any class can define its own __eq__ method. reply JoBrad 21 hours agoparentprevHow is that your response, after reading this article? The is operator checks whether the two items are the same object, which is critical in some circumstances. reply wodenokoto 21 hours agoparentprevHow do you check for None? reply Timothycquinn 8 hours agorootparentYou are correct. I kind of took `is None` for granted as it just feels boilerplate when coding in Python.Although I have written over a hundred thousand of lines of code in Python over the years; I use Python mostly for dev ops tooling, reporting, monitoring and automation so they don&#x27;t get super complex and they mostly can lean on procedural programming patterns.I could imagine complex frameworks needing heavy use of Objects that could lean on the &#x27;is&#x27; keyword. reply stevesimmons 21 hours agorootparentprevOr check that two dicts really are the same object, as opposed to two different dict objects that just happen to have the same keys&#x2F;values? reply wodenokoto 20 hours agorootparentI&#x27;m not sure I&#x27;ve ever had to do that. When is that a need? reply misnome 18 hours agorootparentMy immediate first thought is, optimisation? If you know you’ve been the same object, you could skip e.g. comparison, or change update logic reply dist-epoch 15 hours agorootparentThis kind of micro optimizations don&#x27;t make much sense in Python. They complicate the code, and you are still 100 times slower than compiled languages. reply misnome 2 hours agorootparentIt really… doesn’t have to complicate. And I disagree that optimising python code is never necessary. Not everybody is writing 100-line one-off glue scripts.Also, you are somewhat changing the topic from “what is an example of when you might want to is-compare two dicts”, no? replythrdbndndn 20 hours agorootparentprevI personally do use \"if var is None:\", but can&#x27;t you just use \"if var == None\"? reply nomel 19 hours agorootparent‘is’ checks if it the object ids are the same, with None having a unique one. Equals can be tricked.Here’s a class that is equal to None, and everything else: class EqualsEverything: def __equals__(self, other: Any) -> bool: return True reply thrdbndndn 19 hours agorootparentThanks, I saw this on SO too.Just curious: would it ever happen in practice? reply svilen_dobrev 18 hours agorootparentevery little thing happens in practice... usually unnoticed and buried while refactoring something innocent&#x2F;ly.sooner or later the __eq__ method will be redefined for some class, then reworked, and then.. == None might not be what was supposed to be..or, my favorite, x=&#x27;a&#x27; ; (x,)[0] == x[0] == x .. but are only equal until x changes to something not-1-long-sequence.. replybandyaboot 15 hours agoprevI had forgotten about the walrus operator. I’m curious what the rationale is for not just allowing the regular assignment operator within expressions for that feature. Would it confuse the interpreter or something? reply saiojd 14 hours agoparentI would guess, to make sure the classic noob mistake of typing `if x = 3:` instead of `if x == 3:` stays a syntax error reply maweki 14 hours agoparentprevDepending on what you do on the lhs of = you can actually overwrite this operator.It could be setattr or setitem instead of bind-to-name. Because you can overwrite = only in certain cases that are defined, by the syntax, you can&#x27;t easily elevate = to an expression and be done with it. reply meatjuice 19 hours agoprevIt&#x27;s destroying my stupid brain but interesting for sure. reply Pannoniae 21 hours agoprevI would find this funny, if not each and every one of these represents a potential bug in software. Some are really esoteric (like the name mangling example) but many are something you might do accidentally.Sadly, there are no easy paths to fix this because compatibility (https:&#x2F;&#x2F;xkcd.com&#x2F;1172&#x2F;), but for greenfield projects which aren&#x27;t expected to be small throwaway projects, using Python is not necessarily a very good idea. reply stevesimmons 21 hours agoparentIt&#x27;s a huge leap to conclude \"for greenfield projects ... using Python is not necessarily a very good idea\". reply Pannoniae 21 hours agorootparentIt&#x27;s certainly a leap... but is it wrong though? You might conclude either \"yes\" or \"no\", but dismissing it outright is I don&#x27;t think very conductive to a good conversation. reply nerdponx 21 hours agorootparentUnjustified leaps tend to be wrong. And yes it&#x27;s wrong because if you apply the criterion consistently then you will end up never choosing any language or tooling ever because everything has some kind of problem. reply Pannoniae 20 hours agorootparentSure, but you can choose the one which is the most suitable with the least amount of problems. I would argue that Python has many problems, so it&#x27;s suitable for a fairly small set of use-cases. (by design, btw) replyyoyopa 16 hours agoprevshit like this is why anyone calling themselves a software engineer should have to get a license and formally sign and seal their code reply jokoon 19 hours agoprevI still have the feeling that those oddities are still a bit less bad than the ones of js.I am a still disappointed by python because I am so addicted to all the fun things of python, yet python is inadequate for game development.I use godot, which has a python-flavor language, but it&#x27;s missing A LOT of what I love about python: list comprehension, tuple, set, and many others. And now that I think about it, it&#x27;s going to be difficult for them to evolve the language, although I often prefer to break codebases. reply cutler 9 hours agoparent> I still have the feeling that those oddities are still a bit less bad than the ones of js.Talk about setting the bar low. reply raytopia 18 hours agoparentprevI&#x27;m overall not super happy with python&#x27;s game ecosystem too (especially the lack of gui based editors&#x2F;engines) but if you&#x27;re willing to look past the lack of an editor Panda3D is a pretty good&#x2F;robust game engine for Python. Disney used it for their ToonTown and Pirates MMO along with a lot of themepark rides (visualiztion&#x2F;actually using it in the ride) so it&#x27;s pretty mature. It&#x27;s a lot more flexible then Godot and you get access to the entire Python ecosystem. reply cutler 9 hours agorootparentI&#x27;m honsetly at a loss to understand why anyone would expect a single-threaded, dynamically-typed language like Python to be anywhere near peformant enough for a game engine. reply squeaky-clean 8 hours agorootparentI only know PyGame and Panda3D, but both of those have their core written in C or C++, and use multiple threads. Python is just intended as the scripting language. reply moralestapia 19 hours agoparentprev>I still have the feeling that those oddities are still a bit less bad than the ones of js.I&#x27;m truly interested in hearing why does that matter? reply jokoon 46 minutes agorootparentjust comparing two interpreted languages, i&#x27;m trying to say that I prefer one language over the otheri&#x27;m doing some whataboutism, sure reply PicassoCTs 17 hours agoparentprevAt least its not lua. My personal wtf was with lua ignoring variable scope.. its just a hashtable it all goes into it - https:&#x2F;&#x2F;onecompiler.com&#x2F;lua&#x2F;3zjsw5up3 reply spacechild1 13 hours agorootparentI&#x27;m not sure what your code example is supposed to demonstrate... All I can say is that Lua uses lexical scoping for local variables (which need to be declared as \"local\"). reply synergy20 17 hours agorootparentprevwhere does it ignore the scope? use &#x27;local&#x27; it stays in the function scope, without &#x27;local&#x27; it&#x27;s global, other scripting languages(e.g. bash) does the same. reply moralestapia 19 hours agoprevLol.Funny how when JS is involved the frame is \"WTF, this is why JS is a shit language and no one should use it\".Whereas with python is \"WTF, Python is great and I don&#x27;t understand it well enough\". reply thrdbndndn 19 hours agoparentTo me, it&#x27;s about how often you encounter these quirks when use the language \"intuitively\" (very subjective, I know).I encountered dozens of \"JS WTF\" when learning without actively trying weird things. It&#x27;s ultimately on me for not understanding the language better, no argument here, but it feels unintuitive.And for Python, while I agree with most of cases listed in the repo to be indeed WTF (and a very good resource to learn it deeper!), I don&#x27;t really encounter most of them naturally, other than the implicit string literal concatenation and default mutable arguments. reply moralestapia 18 hours agorootparentI disagree and think is the other way around.The TFA shows several examples of code that someone learning the language would definitely hit. Most of the time JS \"quirks\" are due to code that is so complicated that the actual WTF is on why would someone design such code in the first place. reply thrdbndndn 18 hours agorootparentReally? To me most of JS quirks are things like `(1 == &#x27;1&#x27;) == true`. Or why there are both `for .. of` and `for .. in`. Maybe you&#x27;re just too familiar with the language to forgot about these things. reply moralestapia 18 hours agorootparentJust use &#x27;===&#x27; and all these \"quirks\" go away. Or learn the proper semantics for false-ish&#x2F;true-ish (takes about 20 mins.) and you&#x27;re on the other side.The Python ones are abhorrent, here&#x27;s a few of them:* the &#x27;is&#x27; operator behaving differently, even when called with operands of the exact same type?* (from TFA) # This will print True or False depending on where you&#x27;re invoking it (python shell &#x2F; ipython &#x2F; as a script) (WHAT?!)* No multi-line lambdas because that makes the AST unparseable, literally. Then cover it up with some shit argument about how ackchually is more \"pythonic\" to only use one line functions, lol. reply legends2k 17 hours agoparentprevAll languages have quirks. It&#x27;s the degree of WTF-ness and how much they affect majority of its users that it becomes popular as a WTF-y language.The more the users the more chances of this too.Personally I find Python to be ergonomic and I&#x27;ve been less bitten by it. But you might get a totally different opinion if the same question is asked to a different group. This is a Python post so I guess majority would be pro-Python? reply assimpleaspossi 22 hours agoprev [11 more] [flagged] TrickardRixx 22 hours agoparentThe license suggests you can do as you please with the project. Feel free to rewrite it to conform to your own sensibilities. reply Pannoniae 22 hours agoparentprevConversely, vulgarities drive your point across stronger (given that you aren&#x27;t using them every second sentence) Compare: \"the project is being late\" with \"the project is getting fucking late\", for example.I don&#x27;t really get the self-censorship though. Either don&#x27;t use vulgarities, or actually use them, not this self-bowdlerising stuff. reply assimpleaspossi 1 hour agorootparentStand in front of any crowd and see how uncomfortable everyone gets as you speak like that.Vulgarities in conversation and writing show a lack of class, culture and intelligence. Often your age is showing, too, as youth seems to think it&#x27;s \"no big deal\". reply di4na 22 hours agoparentprevOne can. Everyone can.It happens that words have meaning and using \"vulgarities\" have its place and meaning too.You may not agree, language is a dynamic thing, but even in a technical or professional settings, these words have their use. reply assimpleaspossi 22 hours agorootparentBeing vulgar for the sake of being vulgar is childish. reply di4na 21 hours agorootparentYou are the one saying it is for the sake of being vulgar and not to convey a necessary strong emotion.You can choose to cut yourself from this part of your humanity. That is your choice. But don&#x27;t scowl at others as childish because they have real emotions to express. reply assimpleaspossi 21 hours agorootparentOne can express strong emotion without vulgarities in every language in multiple ways. reply di4na 20 hours agorootparentAnd there are also some emotions for which vulgarities are the right choice replycrawsome 22 hours agoparentprevIt has 33k stars and has been for for 6 years. Sounds like people don&#x27;t care. reply uxp8u61q 22 hours agoparentprev [–] > Please don&#x27;t post shallow dismissals, especially of other people&#x27;s work. A good critical comment teaches us something.> Please don&#x27;t pick the most provocative thing in an article or post to complain about in the thread. Find something interesting to respond to instead. replyGuidelinesFAQListsAPISecurityLegalApply to YCContact Search:",
    "originSummary": [
      "\"wtfpython\" is a project that delves into the hidden aspects and lesser-known features of Python using intriguing code snippets.",
      "It covers a wide range of topics, such as Python concepts, optimizations, unexpected behaviors, common misconceptions, and programming tips.",
      "The project offers a resource called \"wtfpython\" that provides detailed explanations and examples, and encourages contributions."
    ],
    "commentSummary": [
      "The \"is\" operator in Python is discussed as having advantages over the \"==\" operator.",
      "The quirks and criticisms of JavaScript and Python are explored, including debates on surprise factors and the use of vulgarities in programming languages.",
      "No specific new or exciting developments or releases mentioned."
    ],
    "points": 239,
    "commentCount": 72,
    "retryCount": 0,
    "time": 1693136790
  },
  {
    "id": 37282385,
    "title": "Python Type Hints – *args and **kwargs (2021)",
    "originLink": "https://adamj.eu/tech/2021/05/11/python-type-hints-args-and-kwargs/",
    "originBody": "Adam Johnson HomeBlogBooksProjectsColophonContact Python Type Hints - *args and **kwargs 2021-05-11 When I started writing type hints, I was a little confused about what to do with Python’s variable argument operators, * and ** (often called *args and **kwargs). Here’s what I figured out. Recall that the * operator captures variable positional arguments in a tuple, and ** captures variable keyword arguments in a dict. For example, take this function: def variable(*args, **kwargs): ... In the function body, args will be a tuple, and kwargs a dict with string keys. When adding type hints, it seems natural to try declare the full types of args and kwargs. If we wanted all our values to be ints, we might try: def variable(*args: tuple[int, ...], **kwargs: dict[str, int]) -> None: ... (The ... in the tuple definition makes it a tuple of any length.) But this is incorrect. We can check by adding a call: variable(1, 2, 3, a=4, b=5, c=6) Running Mypy on the file, it finds a problem with every argument(!): $ mypy example.py example.py:5: error: Argument 1 to \"variable\" has incompatible type \"int\"; expected \"Tuple[int, ...]\" example.py:5: error: Argument 2 to \"variable\" has incompatible type \"int\"; expected \"Tuple[int, ...]\" example.py:5: error: Argument 3 to \"variable\" has incompatible type \"int\"; expected \"Tuple[int, ...]\" example.py:5: error: Argument \"a\" to \"variable\" has incompatible type \"int\"; expected \"Dict[str, int]\" example.py:5: error: Argument \"b\" to \"variable\" has incompatible type \"int\"; expected \"Dict[str, int]\" example.py:5: error: Argument \"c\" to \"variable\" has incompatible type \"int\"; expected \"Dict[str, int]\" Found 6 errors in 1 file (checked 1 source file) Uh oh! What’s the right way then? * always binds to a tuple, and ** always binds to a dict with string keys. Because of this restriction, type hints only need you to define the types of the contained arguments. The type checker automatically adds the tuple[_, ...] and dict[str, _] container types. The Python Enhancement Proposal (PEP) that introduced type hints, PEP 484, specified this rule: Arbitrary argument lists can as well be type annotated, so that the definition: def foo(*args: str, **kwds: int): ... is acceptable… In the body of function foo, the type of variable args is deduced as Tuple[str, ...] and the type of variable kwds is Dict[str, int]. So, we can correctly type our function as: def variable(*args: int, **kwargs: int) -> None: ... This then passes type checks: $ mypy example.py Success: no issues found in 1 source file Yay! Fin I’d like to have an argument, please. —Adam Learn how to make your tests run quickly in my book Speed Up Your Django Tests. Subscribe via RSS, Twitter, Mastodon, or email: Your email address: One summary email a week, no spam, I pinky promise. Related posts: Python Type Hints - Use object instead of Any Python Type Hints - How to Specify a Class Rather Than an Instance Thereof Python Type Hints - How to Fix Circular Imports Tags: mypy, python © 2021 All rights reserved. Code samples are public domain unless otherwise noted.",
    "commentLink": "https://news.ycombinator.com/item?id=37282385",
    "commentBody": "Python Type Hints – *args and **kwargs (2021)Hacker NewspastloginPython Type Hints – *args and **kwargs (2021) (adamj.eu) 238 points by ekiauhce 21 hours ago| hidepastfavorite128 comments SushiHippie 20 hours agoFor typing **kwargs there are TypedDicts https:&#x2F;&#x2F;peps.python.org&#x2F;pep-0692&#x2F;If your function just wraps another you can use the same type hints as the other function with functools.wraps https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functools.html#functools.w... reply zbentley 19 hours agoparentWhile functools.wraps does propagate __annotations__ by default, be aware that not all IDE-integrated type checkers handle that properly. It&#x27;s easy in PyCharm, for example, to use functools.wraps such that the wrapper function is treated by the IDE as untyped.Underneath, this is because many (most?) type checkers for Python aren&#x27;t actually running the code in order to access annotation information, and are instead parsing it \"from the outside\" using complex and fallible techniques of variable reliability. That said, it&#x27;s a testament to JetBrains&#x27; excellent work that PyCharm&#x27;s checker works as well as it does, given how crazily metaprogrammed even simple Python often turns out to be. reply veber-alex 16 hours agorootparentPycharm has the worst type checker that exists today. It may have been the best a few years back but others have suppressed it considerably.I recently switched from Pycharm to vscode which uses pyright and it&#x27;s night and day on the amount of type errors it catches, it considerably improved the quality of my code and confidence during refactoring.And to add insult to injury Pycharm doesn&#x27;t even have a pyright plugin and the mypy plugin is extremely slow and buggy. reply dcgudeman 9 hours agorootparentIt’s sad to see this happen to be honest. Seems like Jet Brains is getting distracted from their core value proposition: good IDEs. If electron based IDEs are becoming more responsive and performant than their “native” IDEs they have major priority problems. reply krick 9 hours agorootparentWhat even distracts them? IDEs are supposedly the only thing they do. Well, maybe except for Kotlin. And it&#x27;s not like their IDEs are very cheap either. I mean, not that cheep that I&#x27;d like the idea of being too much mentally invested into something, that barely competes with a free source-code editor, let alone lags behind it. reply throwaway2037 6 hours agorootparentI&#x27;m pretty sure they make most of their money from TeamCity build agents.IntelliJ (the Java+ IDE) always has a community edition that is open source. I can vouch that it is truly free and not crippleware. For most Java programmer, this edition is sufficient. reply no_wizard 10 hours agorootparentprevThere definitely seems to be a few areas since the Fleet announcement that have given me pause on JetBrains.Their Python support has t kept up with other tools as noted. I’ve see a similar decline in the ability for for them to keep up to date with things like Svelte, Vue, Astro etc too.They need to embrace the LSP reply krick 9 hours agorootparentprevAny examples? I don&#x27;t write Python that much nowadays, and while I&#x27;m sure its type checker doesn&#x27;t do everything, I kinda never felt disappointed by what it does. Maybe, a considerable part of that is that I still don&#x27;t really think of Python as a type-checked language, so everything an IDE does for me still feels like quite a bit of an improvement over how I used to write code in Python for a long, long time. But really, \"night and day on the amount of type errors\"?.. reply veber-alex 8 hours agorootparentWell on Pycharm 2022.3 which is what I still have installed even this simple function doesn&#x27;t show any error. def foo() -> int: passI sure hope they improved the type checker in later versions... reply mathisfun123 7 hours agorootparentUm lol what do you think the error is here? This is widely accepted syntax for a stub. So yes it does return None if run but it&#x27;s not expected to ever be run. So pretty ironic that you would blame pycharm (which is indeed excellent) for your own misunderstanding.https:&#x2F;&#x2F;mypy.readthedocs.io&#x2F;en&#x2F;stable&#x2F;stubs.html#using-stub-... reply veber-alex 3 hours agorootparent> Um lol what do you think the error is here? This is widely accepted syntax for a stub.No it isn&#x27;t. The accepted stub syntax is an ellipses (...).A competent type checker like pyright will error on this code. Function with declared return type \"int\" must return value on all code paths Type \"None\" cannot be assigned to type \"int\"And if you need more proof that pycharm is useless as a type checker: def foo(b) -> int: if b: return 1A classic error where you forget to return a value from all paths and pycharm is silent. reply seanhunter 4 hours agorootparentprevThat’s not a type error in python. All types in puthon (afaik) accept ‘None’ as a value.For example, try: a : int = NoneIt will succeed. This is done (I think) so you can tell whether optional arguments are defined, declare variables before use (eg if you have a conditional with two branches both setting a different value for a variable sibce python blocks aren’t expressions) and that kind of thing. reply veber-alex 3 hours agorootparentEach type checker can implement however strict rules it wants. And pyright gives the correct answer here: Expression of type \"None\" cannot be assigned to declared type \"int\" Type \"None\" cannot be assigned to type \"int\" reply SushiHippie 2 hours agorootparentprevIt&#x27;s not recommended anymore. Optional types should be explicit. https:&#x2F;&#x2F;peps.python.org&#x2F;pep-0484&#x2F;#union-types replydalf 11 hours agoparentprevThere is also typing.ParamSpec when the purpose is to write a generic wrapper:https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;typing.html#typing.ParamSp... reply awinter-py 13 hours agoparentprevI think pep 612 is trying to make the ergonomics better for the &#x27;forwarding&#x27; &#x2F; pass-through case (when .wraps isn&#x27;t appropriate)https:&#x2F;&#x2F;peps.python.org&#x2F;pep-0612&#x2F; reply ehsankia 15 hours agoparentprevInteresting, looks like they ended up having to introduce typing.Unpack, to differentiate the ambiguity with the the TypedDict referring to the type of all the kwargs, vs just Mapping[str, TypedDict]Not ideal but not too bad either. reply dfee 18 hours agoprevI actually created a library for this!Forge: forge (python signatures) for fun and profithttps:&#x2F;&#x2F;python-forge.readthedocs.io&#x2F;https:&#x2F;&#x2F;github.com&#x2F;dfee&#x2F;forge reply refactor_master 20 hours agoprevThe ability of **kwargs to leave behind no proper documentation and silently swallow any invalid arguments has made us remove them entirely from our codebase. They&#x27;re almost entirely redundant when you have dataclasses. reply liquidpele 20 hours agoparentYea, really only useful imho for proxy functions that then just pass the arguments along to something that DOES properly type every arg. reply qwertox 13 hours agorootparentBut doesn&#x27;t this break type checking for the users of the proxy functions? reply flakes 13 hours agorootparentYou can write the proxy&#x2F;decorator to preserve typing info using a typevar. F = TypeVar(“F”, bound=Callable) def wrapper(f: F) -> F: … reply EdwardDiego 9 hours agoparentprev&#x2F;me cries in DjangoKwargs everywhere, often only defined for a type at runtime by spooky voodoo action at a distance metaclass shenanigans... reply systemvoltage 7 hours agorootparentHello, I am pytest. I heard ya&#x27;ll are talking about magic and kwargs fudging? reply zbentley 19 hours agoparentprevWhat about decorators, or wrappers around third-party code whose contracts change frequently (or even second party code when interacting with functions provided by teams that don&#x27;t follow explicit argument typing guidelines, if you have that sort of culture)? reply refactor_master 19 hours agorootparentUsually the solutions range from a culture of “just don’t” to tests&#x2F;mypy that have become increasingly stricter over the years, every time we’ve come a step further up the ladder. But I admit, it has taken quite some bridging to get there.Moving to static Python in most places has dramatically improved the code and language. reply voz_ 14 hours agorootparentAs someone that works on a Python compiler, this is a very limited view of reality… reply dcgudeman 9 hours agorootparentCan you explain a bit more? reply plonk 17 hours agorootparentprevThose are better handled by typing.ParamSpec, it should keep track of the unwrapped function&#x27;s arguments. reply jerpint 19 hours agoparentprevWhat do you do when inheriting from a base class with a defined __init__ ? reply yayachiken 18 hours agorootparentFor everybody reading this and scratching their head why this is relevant: Python subclassing is strange.Essentially super().__init__() will resolve to a statically unknowable class at run-time because super() refers to the next class in the MRO. Knowing what class you will call is essentially unknowable as soon as you accept that either your provider class hierarchy may change or you have consumers you do not control. And probably even worse, you aren&#x27;t even guaranteed that the class calling your constructor will be one of your subclasses.Which is why for example super().__init__() is pretty much mandatory to have as soon as you expect that your class will be inherited from. That applies even if your class inherits only from object, which has an __init__() that is guaranteed to be a nop. Because you may not even be calling object.__init__() but rather some sibling.So the easiest way to solve this is: Declare everything you need as keyword argument, but then only give **kwargs in your function signature to allow your __init__() to handle any set of arguments your children or siblings may throw at you. Then remove all of \"your\" arguments via kwargs.pop(&#x27;argname&#x27;) before calling super().__init__() in case your parent or uncle does not use this kwargs trick and would complain about unknown arguments. Only then pass on the cleaned kwargs to your MRO foster parent.So while using **kwargs seems kind of lazy, there is good arguments, why you cannot completely avoid it in all codebases without major rework to pre-existing class hierarchies.For the obvious question \"Why on earth?\" These semantics allow us to resolve diamond dependencies without forcing the user to use interfaces or traits or throwing runtime errors as soon as something does not resolve cleanly (which would all not fit well into the Python typing philosophy.) reply patrickkidger 15 hours agorootparentFWIW, I&#x27;ve come to regard this (cooperative multiple inheritance) as a failed experiment. It&#x27;s just been too confusing, and hasn&#x27;t seen adoption.Instead, I&#x27;ve come to prefer a style I took from Julia: every class is either (a) abstract, or (b) concrete and final.Abstract classes exist to declare interfaces.__init__ methods only exist on concrete classes. After that it should be thought of as unsubclassable, and concerns about inheritance and diamond dependencies etc just don&#x27;t exist.(If you do need to extend some functionality: prefer composition over inheritance.) reply bowsamic 13 hours agorootparentprevThis is why I hate Python, absolutely none of this is obvious from the design of the language reply throwaway2037 6 hours agorootparentTo add to your list: During string concatenation, there is no automatic conversion to string. It results in an exception. It is infuriating.This code: \"abc\" + 123... will raise this exception: TypeError: can only concatenate str (not \"int\") to strI have wasted so many hours fixing this same bug, over and over again. reply Skeime 3 hours agorootparentI strongly disagree. Not converting the int to a string automatically is absolutely the right decision. In all code I write, this TypeError would catch an actual error, because concatenation of strings is just not the right tool for creating \"abc123\" from \"abc\" and 123, so I would not use it for that. Hence, if this exception occurs, it indicates that I probably mixed up variables somewhere. Use one of the (admittedly too) many string formatting tools that Python offers, for example an f-string like f\"abc{123}\". (Also, if you have enough type annotations in your code, the type checker will warn you about these, so you can fix them before they hit testing or even production.) reply jraph 55 minutes agorootparentInteresting. 100% of the times I encountered this TypeError, I actually wanted to create the concatenated string. It never caught an actual error.Now, I guess I&#x27;m not against and explicit cast and I can imagine how the error could catch an actual bug. It&#x27;s painful when the error stops the execution when the string concatenation was intended, but it is not really an issue anymore with the possibility to type check before the execution.> concatenation of strings is just not the right tool for creating \"abc123\" from \"abc\" and 123Why? This sounds like an opinion to me. String interpolation of formatting features are nice but I find them quite clunky in such simple cases.Of course when you have to be careful to call str(val), it&#x27;s arguably as clunky... reply LBTables 7 hours agorootparentprevAt an even more basic level, the lack of static typing seems like such a tradeoff getting an incredibly huge nuisance in readability and stupid runtime bugs that shouldn&#x27;t be a thing in exchange for a feature that&#x27;s rarely useful.Granted, I&#x27;m primarily an embedded developer. Can any Python experts explain to me a highly impactful benefit of dynamic typing? reply throwaway2037 6 hours agorootparentFor small programs, dynamic typing can be faster to write (not read). As soon as your program grows: \"uh oh\". Once you add maintenance into the cost equation, dynamic typing is a huge negative.To be fair: 15 years ago, people were writing a lot of Java code that effectively used dynamic typing by passing around Object references, then casting to some type (unknowable to the reader) when using. (C#: Same.) It was infuriating, and also very difficult to read and maintain. Fortunately, most of that code is gone now in huge enterprise code bases. reply Izkata 11 hours agorootparentprev> So the easiest way to solve this is: Declare everything you need as keyword argument, but then only give *kwargs in your function signature to allow your __init__() to handle any set of arguments your children or siblings may throw at you. Then remove all of \"your\" arguments via kwargs.pop(&#x27;argname&#x27;) before calling super().__init__() in case your parent or uncle does not use this kwargs trick and would complain about unknown arguments. Only then pass on the cleaned kwargs to your MRO foster parent.The easiest way is to not put your arguments into kwargs in the first place. If you put them as regular function arguments (probably give them a default value so they look like they&#x27;re related to kwargs), then the python runtime separates them from the rest when it generates kwargs and you don&#x27;t have to do the \".pop()\" part at all. reply sbrother 17 hours agorootparentprevThank you for explaining this; there are a lot of comments here suggesting trivial code style improvements for use cases where *kwargs wasn’t actually needed. The more interesting question is how to improve the use case you describe — which is how I’ve usually seen *kwargs used. reply dontlaugh 13 hours agorootparentprevHaving used Python a lot, I was never glad for multiple inheritance. I’d prefer traits. reply throwaway2037 6 hours agorootparentAre traits and mixins the same? If not, can you please provide a trivial example. It would be useful to better understand what you mean. When I was very young, learning C++, I thought multiple inheritance was so cool. Now, I know it is like sleeping in the open jaws of a saltwater croc. reply dontlaugh 0 minutes agorootparentTraits as in the original Smalltalk research, Rust traits or Haskell type classes are like interfaces, but only when in scope. So until you import a trait, it’s implementation on various types isn’t visible.This makes it possible to safely make a new trait and implement it on a built in type (like giving int a method) without the chance of another unrelated use of the type accidentally using what this trait provides.codexb 12 hours agoparentprevThey are a necessity for subclasses though, especially when subclassing from an external library that will likely change underneath you. reply roland35 19 hours agoparentprevI agree - it is convenient to use at first but it sure makes it hard to use an unfamiliar codebase! reply hooloovoo_zoo 15 hours agoparentprevSeems pretty important for something like a plotting function where you want to be able to pass any tweaks to any subplots. reply vorticalbox 20 hours agoprevWhy do people not just type everything they want passed?def variable(n:str, nn:str, nnn:str, *, a:int, b:int, c:int)Anything after,*, is a kwarg. reply Znafon 20 hours agoparentIt is used when the number of argument can vary, like: def sum(*args: int) -> int: if len(args) == 0: return 0 return args[0] + sum(*args[1:]) reply ddejohn 6 hours agorootparentThat is an entirely different use-case than a function signature allowing arbitrary keyword arguments. Arbitrary keyword args are different than arbitrary positional args like you have in your example.GP is suggesting that one should only ever use explicit keyword-only args (anything listed after `*,` in the signature) versus arbitrary keyword args implicit via `**kwargs`.e.g. (omitting type hints for clarity): def sum(*args, **arbitrary_kwargs): ...vs def sum(*args, some_keyword_only_arg): ...In my opinion if one finds themselves writing code that uses arbitrary kwargs, they&#x27;ve got a design problem.** reply zoomablemind 19 hours agorootparentprevIt seems altogether surprising that with an empty list or tuple a, a[1] results in index error, yet a[1:] quietly returns an empty list or tuple. reply hk__2 19 hours agorootparent> It seems altogether surprising that with an empty list or tuple a, a[1] results in index error, yet a[1:] quietly returns an empty list or tuple.`a[1:]` returns the sequence of elements that start at index 1. If there is no such element, the list is empty. I don’t see any good reason why this should throw an error. reply zoomablemind 16 hours agorootparentBoth cases are an index error. It&#x27;s just for some other reasons in case of the section, the error is represented by an empty object and it&#x27;s left to user to handle the result.This could easily conceal the indexing error unless the caller code explicitly checks the length of the returned section. reply hk__2 2 hours agorootparent> This could easily conceal the indexing error unless the caller code explicitly checks the length of the returned section.An empty returned section doesn’t mean the index was out of bounds (`a[0:0]`); if you want to make sure you have to check the length before slicing, like in Go. reply macintux 18 hours agorootparentprevThen why doesn’t a[1] return None?I understand the logic behind both decisions, but it’s not surprising that people find it inconsistent and unintuitive. reply Znafon 18 hours agorootparentI think it is consistent, it works a bit like filtering an element from a mathematical set.Given a set of sheeps, let x be the five-legged sheep is inconsistent because we know neither the existence or uniqueness of shuch sheep, so it raises an exception.Given a set of sheeps, let x be the subset of five legged sheeps is the empty set because there is no such sheep.but this may also just be because I internalised Python&#x27;s behavior.Some language have a specific value to denote the first thing, for example: [\"a\", \"b\", \"c\"][4]gives `undefined` in JavaScript but it differs from `null` which would be the equivalent to `None` in Python (and I don&#x27;t think Python has such concept). reply hk__2 18 hours agorootparentprev> Then why doesn’t a[1] return None?Because there would be no way to distinguish between \"a[1] contains None\" and \"a[1]\" doesn’t exist. reply macintux 18 hours agorootparentAnd with a[1:] returning the empty list there’s no way to distinguish between a is empty and a only has one element.These are, in the end, relatively arbitrary language design decisions. reply akasakahakada 16 hours agorootparentWhen you slice a list, you get a list. When you see there is nothing inside the returning list, you know that means end of list, contains zero element. Slicing and indexing return object at different level. reply macintux 16 hours agorootparentSlicing a list, when the first index is invalid for that list, could easily throw an exception instead. reply zoomablemind 16 hours agorootparentThis should signal an explicit error, which invalid index is indeed. If user believes for some reason the invalid indexing is ok, then it could be caught and handled. No ambiguity. replyjs2 18 hours agorootparentpreva[1] has to raise an IndexError because there&#x27;s no return value it could use to otherwise communicate the item doesn&#x27;t exist. Any such value could itself be a member of the sequence. To behave otherwise, Python would have to define a sentinel value that isn&#x27;t allowed to be a member of a sequence.When using slice notation, the return value is a sequence, so returning a zero-length sequence is sufficient to communicate you asked for more items than exist.It may be surprising, but it almost always leads to more ergonomic code.https:&#x2F;&#x2F;discuss.python.org&#x2F;t&#x2F;why-isnt-slicing-out-of-range&#x2F; reply esafak 17 hours agorootparentprevYou should use `Iterable` reply Znafon 16 hours agorootparentI&#x27;m not sure print(firstname, lastname)for example is more readable than print((firstname, lastname))especially since I would then have to write print((surname,))to just print a single string.Variadic functions are rather classic, I think Go, Rust, C and JavaScript also have them. reply insanitybit 14 hours agorootparentFWIW Rust does not have variadic functions. The closest thing would be either macros, which are variadic, or trait methods, which are not variadic but can look like they are. reply Znafon 14 hours agorootparentOh yeah, that’s right! Thanks for the correction reply uxp8u61q 14 hours agorootparentprevHow is it more \"readable\"? The two are just as readable.What do you do with your first example if you have a list (generated at runtime, not a static one) to pass to the function? This wouldn&#x27;t work (imagine the first line is more complicated): l = (1,2,3) print(l) reply zem 8 hours agorootparentthat&#x27;s what the splat operator is for - it unpacks a list into separate arguments. in this case e.g. xs = (1, 2, 3) f(*xs)is equivalent to f(1, 2, 3), not f((1, 2, 3)) reply BurningFrog 10 hours agorootparentprevIt&#x27;s more readable, for my brain at least, because there is less distracting syntax cruft lying around. reply esafak 15 hours agorootparentprevYour example has a fixed number of names. What if you wanted to accept any number of names, like Pablo Diego José Francisco de Paula Juan Nepomuceno María de los Remedios Cipriano de la Santísima Trinidad Ruiz y Picasso? Really, though, Iterables make more sense for monadic types. reply sdenton4 12 hours agorootparentWe would force broad changes in human society to conform to the assumptions of our database scheme, same as we always have. reply thaumasiotes 9 hours agorootparentI knew a Chinese girl whose parents, surnamed 吕 and 郎, wanted to give her the combined surname 吕郎. This was not allowed, so formally she was surnamed 吕 and given a three-syllable personal name starting with 郎.There are a couple funny things about this:1. A personal name of three syllables is stranger than a surname of two.2. Double-syllable surnames are unusual, but definitely not unheard of. This girl told me that she hadn&#x27;t been allowed to receive the double surname 吕郎, because it was too long. I asked what would have happened if her double surname had been 司马 instead. \"That&#x27;s different!\"(If the government of China tried to pick a legitimacy fight with the name 司马, it would lose, and everyone knows this.)So this almost looks like an example of the kind of thing you&#x27;re referring to, except that the database scheme has nothing to do with it. A surname that was nontraditional but within the technical norms was rejected in favor of a personal name that was both nontraditional and well outside the technical norms. replyFrotag 20 hours agoparentprevIt&#x27;s pretty common when wrapping a function that has a large number of config options.The wrapper is usually some shorthand for building a handful of those args or adding some side-effect, while still allowing the caller access to the remaining config options via kwargs.Here&#x27;s one example of that in the wild https:&#x2F;&#x2F;matplotlib.org&#x2F;stable&#x2F;api&#x2F;_as_gen&#x2F;matplotlib.pyplot.... reply masklinn 20 hours agoparentprevYour signature requires exactly 3 positional[0] and 3 keyword arguments. The OP allows any number of either.[0] actually 3 positional-or-keyword which is even more widely divergent reply vorticalbox 20 hours agorootparentBut why would you want that doesn&#x27;t that make for a more confusing api? Would it not be better to just have everything as a kwarg? You would get better types that way reply zbentley 19 hours agorootparentI think what GP is saying is that with explicit kwargs you can&#x27;t express variadic signatures, i.e. \"this function takes one int positional, and then any number of key&#x2F;value pairs where the values are lists\". The variable length is the important bit.It&#x27;s certainly debatable whether doing that is better than passing a single argument whose value is a dict with that same type, but many people do prefer the variadic args&#x2F;kwargs style. reply masklinn 19 hours agorootparentprevI genuinely don’t understand what you are asking. reply jpc0 18 hours agoparentprevIf you have enough arguments that the signature becomes obscure to read you need a dataclass to pass into the function instead.I would rather: @dataclass(frozen=True, slots=True) class VarThings: n: int ... def variable(a: VarThings): ...Than a million args reply b5n 16 hours agorootparentI usually start with a namedtuple unless I need the additional features provided by a dataclass. reply joshuamorton 16 hours agorootparentWhy? Dataclasses are vastly better: more typesafe, less hacky, etc. reply dragonwriter 19 hours agoparentprev> Anything after,*, is a kwarg.A required positional OR kwarg as you’ve done it. Its closer to an optional kwarg if you expand the type declaration to also allow None and set a None default.But there are times when you want to leave the number and names of kwargs open (one example is for a dynamic wrapper—a function that wraps another function that can be different across invocations.) reply IshKebab 18 hours agoparentprevIn my experience it&#x27;s generally because Python developers make functions with an insane number of keyword arguments, and then wrap those functions. They don&#x27;t want to type them all out again so they use kwargs.subprocess.run() is an example of that. Also check out the functions in manim.The inability to properly static type kwargs using TypedDict is probably the biggest flaw in Python&#x27;s type hint system (after the fact that hardly anyone uses it of course). reply blibble 19 hours agoprevnow try typing a decoratorhttps:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;47060133&#x2F;python-3-type-h...what a disaster reply amethyst 12 hours agoparentPEP 612 made this much better FWIW.https:&#x2F;&#x2F;peps.python.org&#x2F;pep-0612&#x2F; reply hk__2 18 hours agoprev> In the function body, args will be a tuple, and kwargs a dict with string keys.This always bugs me: why is `args` immutable (tuple) but `kwargs` mutable (dict)? In my experience it’s much more common to have to extend or modify `kwargs` rather than `args`, but I would find more natural having an immutable dict for `kwargs`. reply dragonwriter 13 hours agoparent> This always bugs me: why is `args` immutable (tuple) but `kwargs` mutable (dict)?Because python didn’t (still doesn’t, but at this point even if it did backward compatibility would mean it wouldn’t be used for this purpose) have a basic immutable mapping type to use.(Note, yes, MappingProxyType exists, but that’s a proxy without mutation operations, not a basic type, so it costs a level of indirection.) reply throwaway2037 5 hours agorootparentIn Python, except for mutability, is there any difference between tuple and list? In my experience: Pure Python people get so excited about tuples (\"oh, it&#x27;s so Pythonic\"); others: much less. reply hk__2 2 hours agorootparent> In Python, except for mutability, is there any difference between tuple and list? In my experience: Pure Python people get so excited about tuples (\"oh, it&#x27;s so Pythonic\"); others: much less.In my experience, people who don’t care about tuples are people who don’t understand them. It’s not much about being Pythonic or not (they exists in other languages) but rather about choosing the right data structure for solving your problem. Tuples are much more than a way of making immutable lists, they offer a type-safe and serializable representation of pairs and triplets; something you can’t have with a list. If you don’t use them yet, I really encourage you to document yourself (and again-- in general, not just in Python) because you’re missing something. reply adamchainz 14 hours agoparentprevYeah, that is odd. Python still has no immutable dict type, except it kinda does: https:&#x2F;&#x2F;adamj.eu&#x2F;tech&#x2F;2022&#x2F;01&#x2F;05&#x2F;how-to-make-immutable-dict-... reply itissid 18 hours agoprev#TIL. Also cool to know is pydantic&#x27;s @validate decorator: https:&#x2F;&#x2F;docs.pydantic.dev&#x2F;latest&#x2F;usage&#x2F;validation_decorator&#x2F;... and in case you were thinking its not superflous to mypy(https:&#x2F;&#x2F;docs.pydantic.dev&#x2F;latest&#x2F;usage&#x2F;validation_decorator&#x2F;...). reply assbuttbuttass 20 hours agoprevThis does restrict all of your keyword arguments to the same type. If you have keyword arguments of different types, you&#x27;re right back to no type safety. reply actualwitch 20 hours agoparentWell, if you want to type your kwargs and use newer versions of python, you can use Unpack with typed dicts to achieve that. But the footgun there is that you can&#x27;t redefine fields when extending them, so no Partial for you. reply zbentley 19 hours agoparentprevTrue, but there are a couple of mitigations available: you can express the types of selected kwargs (by leaving them out of the * residual), and you can use typing.Union&#x2F;| to express product types for values in the residual as well. reply masklinn 20 hours agoparentprevThat seems obvious? If you want a variable number of arguments of arbitrary type you have to specify the common supertype, commonly top itself.To do otherwise would require some form of vararg generics which is uncommon. reply IshKebab 18 hours agorootparentIt&#x27;s extremely common for Python programmers to write code with kwargs of different types. Look at subprocess.run() for example. reply m3047 17 hours agoprevThat article promulgates a misunderstanding about immutability. For my way of thinking, python is already an interpreted language and I can enforce tropes in code more cleanly and effectively than people taking something five levels up at face value and trying to figure out what sticks when they throw it against the wall: no wonder they end up frustrated, and it&#x27;s a frustrating situation.Given: def foo(*args): print(args) return class Thing(object): def __init__(self,a,b): self.a = a self.b = b return def foo_style(self): return (self.a, self.b)args is not required to refer to a tuple: >>> foo(*[31,42]) (31, 42)I can have objects construct parameters conforming to the specifications for a signature: >>> foo(*Thing(3,91).foo_style()) (3, 91)Consider that a counterexample. reply adamchainz 14 hours agoparentWithin the function, args is a tuple, as your output demonstrates. reply amelius 12 hours agoprevWhat if the second argument is a float? reply throwaway2037 5 hours agoparentNothing. Type hints are only paint on the bike shed. By default, there is no function in the language, e.g., raise exception for incorrect type. reply curiousgal 17 hours agoprevIs it just me or are Python type hints like..goofy? reply PheonixPharts 15 hours agoparentAs someone who has written Python for nearly 20 years now, and also has plenty of experience with strongly and statically typed languages (including a fair bit of Haskell), I think type hints in Python should at most remain just that, hints.A language being statically typed or dynamically typed is a design decision with implications for what the language can do. There are benefits to each method of programming.Trying to strap type checking on to Python is born out of some misplaced belief that static type is just better. Using Python as a dynamically typed language allows you for certain programming patterns that cannot be done in a statically typed language. There are some great examples in SICP of Scheme programs that could not exist (at least with as much elegance) in a typed language. Dynamic typing allows a language to do things that you can&#x27;t do (as easily&#x2F;elegantly) in a statically typed language.Some may argue that these type of programming patterns are bad for production systems. For most of these arguments I strongly agree. But that means for those systems Python is probably a poor choice. I also think metaprogramming is very powerful, but also a real potential footgun. It would be ridiculous to attempt to strip metaprogramming from Ruby to make it \"better\", just use a language that depends less on metaprogramming if you don&#x27;t like it.This is extra frustrating because in the last decade we&#x27;ve seen the options for well designed, statically typed languages explode. It&#x27;s no longer Python vs Java&#x2F;C++. TypeScript and Go exist, have great support and are well suited for most of the domains that Python is. Want types? Use those languages. reply mirsadm 14 hours agorootparentHave to disagree with this. Choosing a language is not just about its features but also its ecosystem. I chose Python for my current project because it has great libraries that don&#x27;t exist in other languages. reply PheonixPharts 11 hours agorootparent\"my current project\" type problems are where Python is great. Types remain \"nice to have\" (if you like them) and aren&#x27;t really essential compared to the ease of prototyping new ideas and building a PoC. You&#x27;re choosing Python because the benefit of libraries outweighs your personal preference for types.Most of my work is in machine learning&#x2F;numeric computing, so I&#x27;m very familiar with the benefits of Python&#x27;s ecosystem. Basically all of AI&#x2F;ML work is about prototyping ideas rapidly, where access to libraries and iterating fast greatly trumps the need for type safety.At nearly every place I&#x27;ve worked, Python is the tool for building models quickly but shipping them to production and integrating them with the core product almost always involves another language, typically with types, better suited for large engineering teams working on a large code base where you really want some sort of type checking in place. Most of the companies I know that do serious ML in production typically take models from python and then implement them in either C++ or Scala for the actual production serving.It&#x27;s worth pointing out that the vast majority of those libraries you use were initially developed without any consideration, or need, for types. Great, reliable, software can be written without types. Dynamic typing is a great language choice, and there&#x27;s no need to fight the language itself by trying to bolt types on.Where types are important is where you have a complex, rapidly changing code base with a large number of developers of differing skill levels releasing frequently. If that&#x27;s the environment you&#x27;re in, I would strongly recommend against using Python in prod, even if it means you have to implement the features of some libraries internally. reply twelve40 10 hours agorootparentYou keep saying how typing prevents some \"elegant\" things (are they really prevalent?) or \"iterating fast greatly trumps the need for type safety\". But in my experience, anything more than half a dozen modules&#x2F;classes can turn into a bloody minefield very fast. And the supposed speed of iteration is negated and reversed by having to dig through the untyped codebase trying to very inefficiently determine the types manually, with my own eyes, as to not screw up. What are those supposed super-benefits of ditching type safety? reply PheonixPharts 9 hours agorootparent> anything more than half a dozen modules&#x2F;classes can turn into a bloody minefield very fastI don&#x27;t disagree with this, but it&#x27;s worth noting that there are many data scientists I&#x27;ve worked with who have never written a python class or module, and yet produced large amounts of valuable work.For quick prototyping and exploratory work, both domains where Python sees a lot of success, it&#x27;s often the case that you don&#x27;t really know what types you&#x27;re working with and are iterating very quickly, such that not being able to quickly change all of the types your working with can be a time sink.So I think you&#x27;re imagining writing software that is starts more well defined than most optimal use cases for Python.> And the supposed speed of iteration is negated and reversed by having to dig through the untyped codebase trying to very inefficiently determine the types manuallyI do understand this feeling, but this is applying the logic&#x2F;patterns of statically typed programming dynamic programming. The dynamic answer to \"how do I write robust code\" is not to keep the types in your head, it&#x27;s write tests. Well written tests in turn become documentation for your code.Again, this style of programming works well when you don&#x27;t really even know how you want your programming to behave. You naturally write tests when writing this kind of code, even if it&#x27;s just manual tests. Get in the habit of starting your manual tests as unit tests and you&#x27;re already doing TDD.Dynamic types works best when you are writing code in a very interactive and exploratory way.To be clear: I&#x27;m not advocating for dynamic languages over statically typed ones. I do believe, whenever possible, production software should be written in strongly typed languages. I think anytime you know the behavior of your program before you start writing you should use statically typed languages. reply EdwardDiego 9 hours agorootparentprevLast thing I want is Go types tbh. Trying to figure out what implements a given interface is difficult without a sufficiently clever tool.Funnily enough, Python has Go-esque types also, Protocols, and they have the exact same issue. I only use them when I really really need structural typing to reuse code in a typesafe way. reply b5n 16 hours agoparentprevCall me crazy, but I just use a statically typed language where static types are required. reply jcalvinowens 13 hours agoparentprevI agree. It adds all the inconvenience of static typing with none of the benefits. reply insanitybit 14 hours agoparentprevThey&#x27;re quite limited in some ways, obscenely powerful in others, and have a fairly strange syntax, yeah. reply lijok 15 hours agoparentprevBig time. Getting better very quickly however reply PartiallyTyped 20 hours agoprevAlternatively, use an `@overload` in a `.pyi` file and specify your types there.This means that you will have 2^N combinations and doubling every time you accept a new argument.If that is not good enough, then simply use a `TypedDict` with everything optional instead of `**kwargs`. Your call will then become `foo(SomeTypedDict(p1=p2,...))`. reply akasakahakada 20 hours agoprev [–] Although these two comes in handly, people have been using them wrong. Often in scientific open source package, they slap *kwargs in function definition without documentation. How am I suppose to know what to pass in?https:&#x2F;&#x2F;qiskit.org&#x2F;ecosystem&#x2F;aer&#x2F;stubs&#x2F;qiskit_aer.primitives... reply Syntaf 19 hours agoparentEspecially when they don&#x27;t even leave a doc string so you&#x27;re forced to track down the packages documentation online just to interact with certain interfaces.I work in a large python codebase, we have almost no usage of `*kwargs` beyond proxy methods because of the nature of how they obfuscate the real interface for other developers. reply nerdponx 19 hours agorootparentThe worst is when someone puts **kwargs at the base of a class hierarchy, not only necessitating its use in subclasses (if you want to be strict about types) but also swallowing errors for no good reason. Fortunately I think this style is fading out as type hints become more popular. reply hqudsi 19 hours agorootparentprevWhen I was first starting out, a then senior engineer told me: \"friends don&#x27;t let other friends use kwargs\".That always stuck with me. reply icedchai 18 hours agorootparentI once worked on a code base where we had *kwargs passed down 4 or 5 layers deep (not my idea.) It was a true joy. reply akasakahakada 18 hours agorootparentThis is literally me. It is a math program that can evaluate equations and generate code. 6 layers of heterogeneous data structure which the math operation being act on 1st layer has its effect down to 6th layer. Temporarily using *kwargs to make it works but still thinking what is the proper way to do it right. reply c32c33429009ed6 18 hours agorootparentOut of interest, what sort of company&#x2F;industry do you work in where you&#x27;re able to work on this kind of thing? reply crazydoggers 18 hours agorootparentprevCan you organize the data structures into classes or dataclasses? reply akasakahakada 17 hours agorootparentAlready doing this. The problem is there are 5 layers in between. Copy and paste the same docstring into all layers is doable but do not seem smart. replytoxik 19 hours agoparentprevSadly a problem with any wrapper function is that it nullifies this kind of information. Use functools.wraps. reply franga2000 18 hours agorootparentPyCharm usually figured this out if it&#x27;s not too complex. I often wrap session.request() with some defaults&#x2F;overrides and autocomplete usually shows me the base arguments as well. reply akasakahakada 19 hours agorootparentprevMy question is that can @warps warp more than 1 function?Maybe in some use case people need to merge 2 functions into 1, I don&#x27;t know if it can handle this situation. reply zbentley 19 hours agorootparentI&#x27;m not sure what it means to \"merge two functions into one\", can you elaborate?If you are referring to a type signature for a function that passes through it&#x27;s arguments to one of two inner functions, each of which has different signatures, such that the outer signature accepts the union of the two inner signatures, well ... you could achieve that with ParamSpecs or similar, but it would be pretty hard to read and indirected. Better, I&#x27;d say, to manually express appropriate typing.Union (|) annotations on the outer function, even if that is a little less DRY. reply cbarrick 19 hours agorootparent> I&#x27;m not sure what it means to \"merge two functions into one\", can you elaborate?I&#x27;m not OP, but I see this pattern often enough: def foo(**kwargs): pass der bar(**kwargs): pass def wrapper(**kwargs): foo(**kwargs) bar(**kwargs) reply akasakahakada 18 hours agorootparentYup, this exactly. reply toxik 1 hour agorootparentWhat would you have wraps() do for two functions? Concatenate the docstrings and union of the annotations? Perhaps you want only the latter, that seems like it could easily be its own decorator: `@functools.annotate_intersection(f1, f2, …)` replytomn 18 hours agoparentprevOT, but this is my number one peeve with code documentation: going to the effort to write a doc comment, taking up at least 6 lines, probably using some special syntax, cluttering up the code, but then adding no information that can&#x27;t be derived from the signature.If you&#x27;re not going to document something (which I totally respect), at least don&#x27;t make the code worse while doing it. reply dr_kiszonka 17 hours agoparentprev [–] I have been annoyed by this too! I like how seaborn handles it now in documentation: https:&#x2F;&#x2F;seaborn.pydata.org&#x2F;generated&#x2F;seaborn.barplot.html?hi... replyGuidelinesFAQListsAPISecurityLegalApply to YCContact Search:",
    "originSummary": [
      "The blog post explores the usage of Python's variable argument operators, *args and **kwargs, in conjunction with type hints.",
      "The incorrect method of declaring types for args and kwargs is discussed, highlighting the need to define the types of the contained arguments.",
      "The Python Enhancement Proposal (PEP) 484 is referenced as a basis for the correct approach, which involves specifying the types of the individual arguments.",
      "The post concludes with an example that successfully passes type checks, showcasing the effectiveness of the recommended method."
    ],
    "commentSummary": [
      "The discussion revolves around several Python topics, such as type hints, function signatures, inheritance, traits, keyword arguments, slicing, variadic functions, surnames, and documentation.",
      "Participants share their personal experiences, frustrations, and suggestions for dealing with these challenges.",
      "A diverse range of topics and perspectives are covered, providing valuable insights for Python developers."
    ],
    "points": 238,
    "commentCount": 127,
    "retryCount": 0,
    "time": 1693141878
  },
  {
    "id": 37289151,
    "title": "Scrum is a cancer",
    "originLink": "https://twitter.com/svpino/status/1695806027256475777",
    "originBody": "Scrum is a cancer.I&#39;ve been writing software for 25 years, and nothing renders a software team useless like Scrum does.Some anecdotes:1. They tried to convince me that Poker is a planning tool, not a game.2. If you want to be more efficient, you must add process, not… pic.twitter.com/xgm35jYWiy— Santiago (@svpino) August 27, 2023",
    "commentLink": "https://news.ycombinator.com/item?id=37289151",
    "commentBody": "Scrum is a cancerHacker NewspastloginScrum is a cancer (twitter.com/svpino) 231 points by curiousgeek 7 hours ago| hidepastfavorite201 comments mwint 5 hours agoI’ve developed a more nuanced view on Scrum since working as a contractor for a medium sized software company, but adjacent to their normal dev teams.I used to have the view that Scrum is a useless batch of meetings, that sucks the life and productivity out of the dev process.Now, after seeing it from an adjacent (but not subjugated under it) perspective, I think it is a life-sucking batch of meetings that are good for one thing: taking developers who can’t or don’t want to see the overall business&#x2F;architecture picture and getting useful work out of them.Most of us here are not in that category. I’d wager a majority of HN readers can’t help but to seek out understanding of the business, where this piece fits, what it interacts with. For us, specifying everything upfront is useless. Estimating stuff is irritating because we need the flexibility to make smart decisions during dev. Retro meetings are lies because we can’t say “stop with all this and let me work”.But if you’re trying to make a process than can take junior devs (not junior in tenure, but junior in the qualities above) and produce an output that scales almost-kinda linearly with dev count, it sort of works.I’d argue that you’re way better off hiring 6 devs that can go from business problem -> technical solution in their head, without all the ceremony, instead of 40 devs who can’t and 6 PMs to wrangle them.But I can also see how a company ends up there - go through a tough hiring year, or even just make a few poor hiring decisions, and now you have people on the team who need handholding and supervision. That’s what scrum is; it feels like micromanagement because it is. It forces junior-performing devs into a productive state - maybe 5% of what you’d get out of a senior-performing dev without scrum, but it’s something non-negative. reply nivertech 4 hours agoparenthttps:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=37134050> Not everybody knows that, but Scrum was invented to manage a team of dysfunctional COBOL programmers at a bank, not for product-led tech companies, and certainly not for startups.> If you&#x27;re mostly hiring juniors, low-skilled, unpassionate, unable to work autonomously without constant handlholding, reactive instead of proactive people, then you&#x27;ll certainly need some micromanaging SDLC like Scrum. reply poulsbohemian 3 hours agorootparentSo funny thing... about twenty years ago I was managing a project with Cobol developers on one side, and this web thing on the other. And we had a bunch of business people convinced we were all stupid and lazy, so they wanted to force us to do this scrum thing. We would do things like a daily standup with them in order to go through the motions, and then we&#x27;d have the real meetings once they left us alone. Because the problem wasn&#x27;t that the Cobol programmers were dysfunctional, it was that the business refused to actually listen and understand anything - they just wanted to make edicts, even when they didn&#x27;t understand the regulations or processes in their own business (this being a highly regulated industry...). I pulled off what was perhaps the first project in that company&#x27;s history that got delivered on time and met its requirements (and it was a big flipping deal of a project...) and the business people took credit for it and I got overlooked for promotion and life went on. reply tamimio 1 hour agorootparent> and the business people took credit for it and I got overlooked for promotion and life went on.Story of my life! And I guess it is the case for most competent employees unfortunately. reply touisteur 4 hours agorootparentprevI&#x27;m also wondering whether using Scrum somehow makes your team become this dysfunctional COBOL programmer team... reply theshrike79 4 hours agoparentprev> I’d argue that you’re way better off hiring 6 devs that can go from business problem -> technical solution in their head, without all the ceremony, instead of 40 devs who can’t and 6 PMs to wrangle them.The problem is that finding those 6 experienced devs is _HARD_. And they&#x27;re usually very expensive and know their value.You can easily find 40 mid to low level coders and a half-dozen people who know how to run a scrum team. Maybe even some of the coders know how to do that for extra savings.Also in the latter way you can easily have a turnover in the team without any major hassles, you can always find mid-tier coders.But if one of the 6 highly experienced ones leaves, good luck finding a new one quickly.A shitty car analogy: You can get a more efficient and faster car if it&#x27;s 100% custom made. But if something breaks you need to manufacture the parts. Or you could make do with a less efficient and slower car, built out of highly standardised off the shelf parts. reply jjav 3 hours agorootparent> > I’d argue that you’re way better off hiring 6 devs that can go from business problem -> technical solution in their head, without all the ceremony, instead of 40 devs who can’t and 6 PMs to wrangle them.> The problem is that finding those 6 experienced devs is _HARD_. And they&#x27;re usually very expensive and know their value.It&#x27;s harder than finding uncaring juniors, sure.But if you need 40+6 people, or 6 experienced people, that&#x27;s nearly 8x salary.In silicon valley money, you&#x27;ll need to pay those uncaring juniors about 150K.I guarantee you that you can very easily find those 6 experienced people in a few weeks if you&#x27;re offering over $1M&#x2F;yr to them. In a month you can staff all 6 positions.If you&#x27;re saying you want ~8x performance but not interested in paying ~8x salary.. then yes, it&#x27;s harder to find the people. reply wqtz 4 hours agorootparentprevI have been taking a closer look at project management and product management in the last few months. Coming from the programming side, I thought technical product manager rule the world, and thought everything that is technically led is glorious.Then I had a very personal conversation with hardcore project manager from non-tech side. He told me that, I got the idea of management of all wrong.Project manager is an operator where the engineers are nothing more than machine. Your standard engineer is not interested or even care about business goals. They are doing a job, they like to be told what is expected from them, they like to be told what deliverable is. Senior engineers can give an estimate of delivery date, but most don&#x27;t. They are essentially cogs in the machine and managers are expected to birth products from them.About those experienced devs: In an manufacturing plant there are things that just works and you don&#x27;t fiddle with them. Or else, they break and you have to get a brand new thing. Most of these senior engineer with business focus are difficult to manage and they have an expiry date on them. You are lucky to get one, but you have to count the days until they leave for better pay. Moreover, you don&#x27;t want programmers interested in business side as they get passionate about things that don&#x27;t concern them which is obviously business side things. So, you need engineers to work but not get ideas.---He told a bunch of those stories, but it seems these stories are like if you are in the business, you probably know already type things. He really doesn&#x27;t buy the idea that \"software engineers\" are special type of engineers, he said, management hasn&#x27;t change in centuries, people just use different rhetoric that&#x27;s all. reply dilyevsky 3 hours agorootparent> Project manager is an operator where the engineers are nothing more than machine. Your standard engineer is not interested or even care about business goals. They are doing a job, they like to be told what is expected from them, they like to be told what deliverable is. Senior engineers can give an estimate of delivery date, but most don&#x27;t. They are essentially cogs in the machine and managers are expected to birth products from them.Yes I think you got to the crux here - managers want to be indispensable and make everyone else \"a machine\" so he told you a bunch of self-serving bs. I&#x27;m sure if you turn this around on him then project manager will not be a machine but more like a wizard or an artist whose needs must be carefully tended =)> Moreover, you don&#x27;t want programmers interested in business side as they get passionate about things that don&#x27;t concern them which is obviously business side things.Right and who is better to help here than someone who can take business requirements and hand them to the engineers? You know, someone who got people skills! reply namaria 3 hours agorootparentprev\"Software engineer\" is a special category in that people think you can train someone for 3 months on React and Node and shove them into this line of work and they should be fungible and just a green version of the real thing.The high demand, high pay and low general understanding of computer architecture all fuel this race to the bottom and we all pay for it in low quality, overtly complicated and vulnerable software and all ancillary industries that spring around it. Coding \"bootcamps\", \"Cybersecurity\", Agile&#x2F;SCRUM, Wordpress and clones, AWS and clones etc etc. reply nvm0n2 44 minutes agorootparentprevHaving been on both sides of this, and having worked closely with \"the business\" doing requirements analysis, project management, tech-leading and individual development, my conclusion was that your original view is somewhat closer to the right one than the PMs.One may ask, from where does the tech industry come from? From where tech startups come from? Why is there such a thing as the \"tech\" industry at all? Don&#x27;t all companies use tech? We don&#x27;t talk about the \"science industry\", do we? If you try and find a definition of tech firm that captures what people mean when they say this, you&#x27;ll conclude they&#x27;re basically either computer companies or ordinary firms doing ordinary things, who use computers more effectively than normal. And in the latter case what makes a firm a tech firm is basically unarticulated, people know it when they see it but it&#x27;s not like there&#x27;s a set of rules to classify, say, Netflix as a tech firm and Disney as not a tech firm.So what is it that people see? Mostly it&#x27;s the distinctive culture that appears when you have (ex-)programmers at the very top of the company, as in CEO and&#x2F;or board level. This causes companies to differ in all sorts of ways, but one way in which tech firms differ, for example, is that in tech firms you don&#x27;t get terms like \"the business\" and \"IT\". You don&#x27;t get non-technical project managers. The distinction between the two sides simply doesn&#x27;t exist.Non-tech firms live in fear of tech firms and startups. It took me a while to notice this, but go to enough conferences, talk to enough people and you&#x27;ll see it. The average firm is far more scared of Google or Apple encroaching on their space than they are of an established competitor. This is because tech firm culture is more effective than their own. Such firms have a long history of coming from nowhere to utterly dominate entire industries very fast, and they don&#x27;t know how to respond to it.The cultural problems can be seen in the stories you were told. Programmers who understand the business are too expensive. They get ideas. They get passionate, and that&#x27;s a problem. In a tech firm, experienced devs who understand business end up at director level or higher and firms compete to pay them the best. In non tech firms, they are a problem and get pushed out. This is because the business people are scared of such devs because senior developers end up understanding the business better than the business people do. After all, they implemented the business logic so every rule, regulation and detail is in their mind. And they&#x27;re used to the rigor demands of programming, so tend to say awkward things in meetings like \"that won&#x27;t work\" or \"that contradicts the other thing you just said\". Tech firms don&#x27;t mind this because that guy&#x27;s boss is himself a former developer, and is used to such discussions (from e.g. code or design reviews). \"Business people\" on the other hand aren&#x27;t used to this at all, yet feel like their value is their business understanding. They need their devs to be bored and uncaring drones because otherwise what&#x27;s their own value? You don&#x27;t want to be competing for a promotion against someone whose understanding of the business is better than yours and who can actually execute change projects effectively!Underlying all this of course is the uncomfortable fact that programming is much harder than most office jobs. Programmers can and will learn programming and then go on to learn the fine details of finance, accounting or shipping without breaking a sweat, but the reverse is generally not true. It was maybe to some extent in the Visual Basic era but the move to web apps put a stop to gifted amateurs cobbling together business apps and nothing really replaced it (maybe Oracle APEX but it&#x27;s not as widely used). reply ddalex 3 hours agorootparentprevThis, and more. Like it or not,the incredible success of software made it an industrial affair, the way clothing industry went 200 years ago - from highly skilled artisans creating unique beautiful designs tailor specifically to their customer to cheap patterns industrially printed. Its just that the printers are still human. reply musicale 3 hours agorootparentSo sweatshops basically?Not sure it&#x27;s a great analogy though since software is still basically the design part - the duplication part is trivial. reply ddalex 3 hours agorootparentYeah, very comfortable sweat shops for highly paid manual laborers. Why do you think open seating plan exists?!? Open plan is the default layout of a standard sweatshop.The key observation is that they successfully made the \"design\" of software they \"mass duplication\" part. The cost of designing and creating crappy custom software has never been so low and it continues to fall. reply theshrike79 2 hours agorootparentprevYou do know that there are steps between bespoke tailor and exploitative sweat shop, right?Multiple steps actually.(And in some cases the alternative to the \"sweat shop\" is the same amount of hours outside in the fields with fluctuating income based on what happens with the crop that year) reply tamimio 1 hour agorootparentprev> The problem is that finding those 6 experienced devs is _HARD_. And they&#x27;re usually very expensive and know their value.That’s not the only cause with all due respect, I have worked with several C-level managers before, they WANT those mid-low level developers&#x2F;engineers, they are cheaper and easy to find like you said, but most importantly, they can replace them on a whim with another one who will do the same work, with “super” engineers, it isn’t the case, the amount of knowledge and depth one of them has, you will need a whole team to understand what’s going on first and another to carry on the job, and C-levels being egoistic, they don’t like anyone to have any leverage by any means. reply dilyevsky 3 hours agorootparentprev> Also in the latter way you can easily have a turnover in the team without any major hassles, you can always find mid-tier coders.And turnover you will have! =)Note that you just ballooned the cost probably 3-4x compared to keeping the team small and strong. And that is how we got to this zombiecorn land we see today.Also consider this - hiring a large team of bozos is a one-way street. You will likely never be able to hire and retain strong talent ever again. While you can always turn to hiring \"mid-tier coders\" when the product matures. reply namaria 3 hours agorootparentAll you said is true. But the number of talented programmers is very limited and concentrated. And they are quite expensive. Most companies and teams have to go the structured approach with whatever local mediocrity they can hire. reply PeterStuer 4 hours agoparentprevIt works both ways. Every form of micromanagement will turn every dev team into a bunch of demotivated, junior performing, just here for the paycheck careless bunch of codemonkeys.It is an assured loss for all.Why not the opossite way? Trust people a bit above what they currently warrant, see who rises to the opportunity, and ease out the rest. This will over time elevate to a decent team. reply kelseyfrog 3 hours agorootparentThe Netflix Culture deck[1] acknowledges that this strategy requires \"top of market compensation.\" What percentage of organizations have the ability to pay top of market compensation? The answer to that is the reason why the strategy doesn&#x27;t generalize.1. https:&#x2F;&#x2F;igormroz.com&#x2F;documents&#x2F;netflix_culture.pdf reply andrei_says_ 4 hours agoparentprevI love https:&#x2F;&#x2F;basecamp.com&#x2F;shapeup approach - tiny teams with high independence and sufficient domain knowledge working in six week periods to deliver features.And here’s Dave Thomas (one of the names under the Agile Manifesto) speaking of the Agile&#x2F;Scrum Industrial Complex https:&#x2F;&#x2F;youtu.be&#x2F;a-BOSpxYJ9M?si=pwROU4JU9V64A39O reply EVa5I7bHFq9mnYK 3 hours agoparentprevI have been slaving as a cheap outsourced labor in a poor country for a large US software company. The goal of the scrum manager was specifically to prevent code monkeys from asking questions about \"business&#x2F;architecture picture\" and to specify the tasks as narrow as possible. Anyone who asked too many questions was seen as a threat, as if they were going to communicate directly with our US masters and break the command chain. reply rightbyte 26 minutes agorootparentYe God I hate \"chain of command\" places. \"Need to know basis\" is the most toxic leadership type there is. Since my conscription it instantly makes my blood boil.You always want to be able to sidestep your boss to your boss&#x27;s boss of you need to. Or talk to end users and customers. reply travisgriggs 4 hours agoparentprevOk, this totally resonates. What I want to know is how I find a place to hang out with those 5 other devs.I’ve had that “team of six motivated” come together twice organically during my career. But it never seems to last. People move on, the company gets wind of the success and either normalizes it out, or attempts to try and distribute and harvest. If I could figure out the recipe to reliably locate or create that sort of team, I think I’d be very well off. reply xyzelement 5 hours agoparentprevI agree with this. In my experience: these \"rituals\" are a way to force the conversations that a \"senior\" - in your terminology - dev would naturally have. reply poulsbohemian 3 hours agoparentprev>taking developers who can’t or don’t want to see the overall business&#x2F;architecture picture and getting useful work out of themThat&#x27;s a very charitable view... I think back over my career and it was always cargo-culting and micromanagement. I give you credit for analyzing and finding a way to make scrum work beneficially.The thing is - if you have people who don&#x27;t (want to) understand the relationship between their work and business value, you&#x27;ve fundamentally got a hiring &#x2F; personnel problem. And I don&#x27;t see how scrum (or any other methodology) ever solves that. What you&#x27;ve got at that point is to me the difference between \"programmers\" and \"developers &#x2F; engineers\". People who are more enamored with the technology than with actually accomplishing work. The thing is, some of those people are really good so long as they can be pointed in the right direction. But that&#x27;s a management thing, not really a methodology thing. reply Shorel 2 hours agorootparentThe thing is, IMO, everyone has a hiring problem.It is very easy to hire one bad player, and he takes the team down, and (in most jurisdictions) it is hard to lay them off.The reason is, no one who knows what it is required, wants to do the hiring. reply Foobar8568 4 hours agoparentprevI would fully agree with your point if I weren&#x27;t regularly in daily were nobody listen to what being said : e.g. discovering by themselves what was said the previous day&#x2F;week as it was a new piece of important information to share. reply mkl95 3 hours agoparentprev> I think it is a life-sucking batch of meetings that are good for one thing: taking developers who can’t or don’t want to see the overall business&#x2F;architecture picture and getting useful work out of them.If I&#x27;m being onboarded at some project, I expect to be provided that description as early as possible. Compensating for broken communication by enforcing a life-sucking batch of meetings doesn&#x27;t seem right. reply beardedwizard 5 hours agoparentprevI really appreciate this take and the sibling comment. Exactly. See what good is there, move on about the rest. reply lafar6503 4 hours agorootparentBut what to do when instead of 6 competent and efficient devs you get 40 people with random mix of skills, no domain knowledge and at moderate programming talent? I dont know Scrum to comment on it, but many management methods converge to &#x27;appear that work is done all the time even if it&#x27;s just meaningless bureaucracy, make everything slow and inefficient, but manage the expectations - so customer is moderately disappointed all the time but there are no catastrophic failures. And make sure there are no red lights on the dashboard, ever.&#x27; reply keikobadthebad 4 hours agorootparent> But what to do when instead of 6 competent and efficient devs you get 40 people with random mix of skills, no domain knowledge and at moderate programming talent?Leave.That sounds like it&#x27;s someone&#x27;s problem, but it doesn&#x27;t need to be yours. reply lowbloodsugar 4 hours agoparentprev99.9% of “Scrum” you’ll come across in the wild is cargo cult. People performing the ceremonies with no fucking idea why, in the hope that the giant eagles will come from the sky bringing gifts.Scrum was created to help good developers communicate with management. But the problem is that management has all the power and couldn’t give a shit. If the management was qualified to “get it” you probably wouldn’t need it.So yeah, if you’re using Scrum, you’re probably going to fail: whatever the reason that you’re doing scrum? That’s why you’re gonna fail.Scrum is a fantastic canary. reply shortcake27 3 hours agorootparentI once worked at a place that did Scrum for the exact reasons you mentioned.Every user story was the same - “As a business owner, I want users to be able to do x”. Defeats the entire purposes of user stories. But they were told they had to write stories. So they did.We also had our work planned out 6-12 months in advance.It was top-down waterfall disguised as agile, which would have been acceptable if we didn’t also waste 5+ hours a week in daily standups (aka status reports), sprint planning, retros, story breakdowns, all of which were scheduled at the most inconvenient of times to ensure they interrupted your flow. reply jillesvangurp 1 hour agoparentprevBeen on both sides of the equation as well over the past three decades. Two observations.1) As you said, when you have a lot of junior developers (which given developer demographics is a given), you need some structure. Scrum provides that. For better or worse, the structure is helpful to people that are still a bit uncertain about how stuff works. I hate stand-ups as much as any other developer. But as a product focused CTO, I love that it gets the day started and my developers out of bed, awake and cafienated and focused on the job. Scrum&#x27;s other meetings are a necessary evil. You need a platform to get them aligned with business goals. They don&#x27;t naturally do this by themselves. Most importantly, a lot of developers kind of expect to this structure at this point. Providing structure to a team is important. Scrum is as good as any other structure. Not ideal with remote teams as meetings get more tricky.2) Most scrum roles are junior management roles. And as such you get typically not very experienced people filling these roles as part of their entry into the corporate rat race. So, you get corporate politics playing out at the micro level with lots of turf fights about stuff that generally is close to irrelevant. Ranging from the right way to run meetings, the best issue tracker, etc. It&#x27;s this endless friction that is causing a lot of resentment with more senior developers. Particularly in larger organizations this can get ugly in a hurry.My strategy for containing this madness:1) Keep teams small. Small teams are efficient teams that should not need a lot of (micro) management. And they also don&#x27;t need a lot of formal roles.2) No scrum masters. It&#x27;s a bullshit role that doesn&#x27;t add a whole lot of value. Especially in smaller teams. Instead I prefer to have tech leads calling the shots on their team or topic and stepping up as a leader. Part of that responsibility is leading the team in a direction that makes sense from a technical and business point of view. And the rest is about coaching people around them. It&#x27;s something that happens naturally even when you don&#x27;t want it to. So, I mostly just let this happen and encourage it.3) Product ownership splits into technical and business ownership. While these can be the same person, it&#x27;s better to have two equally ranked people shooting for consensus covering both business and tech. That ensures the business and tech is actually aligned. Weed out unrealistic requirements and deadlines; make sure that the technically easy yet valuable work actually gets done; ensure that business value is delivered; ensure that work gets prioritized correctly and that POs don&#x27;t revert back to waterfall.4) Management by exception. I like giving people enough room to manage themselves. I step in when that doesn&#x27;t work. And I use positive re-enforcement to encourage them to do more of the right things. I&#x27;m not actually a genius; so I need smart people to tell me what the right way is to do things. Especially when those are things I&#x27;m not that good at. People closest to the problems, usually are best positioned to come up with good solutions. So let them. Fix it when that isn&#x27;t working.5) Use sprints as a predictable, calendar based umbrella for people to structure their activities around. Short enough cycles that it doesn&#x27;t turn into waterfall. Long enough that we don&#x27;t drown in meetings. Day to day management is Kanban based. Just generally remove uncertainty about what needs doing, who is doing it, why we&#x27;re doing it, what&#x27;s coming next, etc. Using continuous deployment to release stuff means that guarding quality is a constant and not a once a sprint kind of thing. Sprints are not release deadlines. Using Kanban day to day means that any high priority issues jump to the top of the stack right away. Short feedback cycles are key to keeping quality and morale high.6) Meetings can be synchronization blocks. Any engineer knows those are bad. Business people seem to never grasp the cost of meetings (as this is all they do). It translates 1 to 1 to how teams function as well. That&#x27;s why day to day work should not be blocked on meetings. We have issue trackers, slack, and other communication tools to sort out any blocking issues. Also, just talking to a person can be surprisingly effective. Scrum meetings are neatly partitioned to be about things like status updates, prioritization, estimation, and reviews. None of those meetings should be on the critical path to delivering working software. The correct way to resolve issues is direct or asynchronous communication (as is convenient).7) Try to keep the few meetings we have a bit positive, light and friendly. It&#x27;s bad enough that we have to sit through those. Conflict is what makes scrum so controversial. The constant bickering about everything and anything is just a mental drain on everyone. I try to keep that out of meetings as much as I can. Having tech leads means that they get a first shot at a decision. So, no need to have a lot of meetings about that. I use one on ones to correct a lot of things when they go wrong in meetings. Meetings are for positive re-enforcement. Call out the things that go well, inspire people to do more of the good stuff, etc. reply littlestymaar 4 hours agoparentprev> taking developers who can’t or don’t want to see the overall business&#x2F;architecture picture and getting useful work out of them.Maybe in theory that&#x27;s the point of it, but it practice it also (and mostly) has the opposite effect: it takes all agency away from capable developers and make them impossible to see the big picture, drastically plummeting developer productivity of otherwise very capable developers.> Most of us here are not in that category. […] For us, […] is useless.It&#x27;s not just useless, it&#x27;s actually harmful.> But I can also see how a company ends up there - go through a tough hiring year, or even just make a few poor hiring decisions, and now you have people on the team who need handholding and supervisionBut most of the time it&#x27;s not how it happens: it&#x27;s forced top-down by manager who have no idea of how software development work, and who are genuinely convinced that it is how projects should be run.They don&#x27;t realize that it&#x27;s a workaround for terrible HR that reduces productivity for everyone, because if they did they&#x27;d probably think twice (“How is my HR so poor when I&#x27;m not trying to cut on costs there? Oh maybe it&#x27;s not and I should not use scrum”), they just do it because everybody else does. reply tuckerconnelly 5 hours agoprevFrom Peopleware: “In the 1985 Jeffery-Lawrence study [from the University of New South Wales]…they investigated the productivity of 24 projects for which no estimates were prepared at all. These projects far outperformed all the others…Projects on which the boss applied no schedule pressure whatsoever (‘Just wake me up when you’re done.’) had the highest productivity of all.”I read 20+ books on management and leadership[1], and none of them mentioned anything like Scrum. I agree it&#x27;s BS.[1] https:&#x2F;&#x2F;tuckerconnelly.com&#x2F;management-leadership reply jdougan 5 hours agoparentWhile I too despise Scrum, the causation could be runming the other way: the Bosses that have a better team could be more likely to let them run without major pressure. reply intelVISA 5 hours agorootparentNo love for Scrum but this is the more likely explanation.A good team that runs itself? Ofc it doesn&#x27;t need Ten Scrum Masters to deliver value.Now, the real question is why leadership tries to salvage failing teams with Scrum? Save the wasted money, use it to hire top talent instead... easy. reply kmoser 4 hours agorootparentTop programming talent may still need to be managed (and in fact may need to be managed more than lower quality talent). The sweet spot is to hire top programming talent who is also good at intra-team communication and can organize themselves with little direction from management except to be informed about outside factors like client priorities.Even better is top talent who can also interface directly with the client when necessary (not necessarily all the time) and doesn&#x27;t need everything first filtered through a manager.I&#x27;ve worked with teams like this in the past and it was always a pleasure. Most of them were fairly experienced devs and knew the value of email, phone calls, and water cooler talk (serendipitous discussions which led to valuable information being exchanged). Despite the lack of \"modern\" productivity tools like text messages, chat apps, and Slack, we were able to get stuff done efficiently.We had weekly meetings which were productive and useful, and actually helped identify if anything was falling through the cracks. Nobody got bored because the meetings were actually helpful. reply fendy3002 5 hours agorootparentprevIf CEO can hire a 100$ scrum master to save a 1000$ failing team, it&#x27;s much cheaper than hiring 2000$ successful team. That&#x27;s probably what they&#x27;re thinking reply kuchenbecker 3 hours agorootparentAlso, this is needed now and needs to be repeatable. reply blq10 5 hours agorootparentprevTop talent does not exist.This problem exists at big tech and startup, in companies that spend fractional multipliers of the average salary on engineers as well as those who pay poorly.In this environment, if your solution is \"hire better people&#x27;, you can&#x27;t- there isn&#x27;t any reply epicureanideal 4 hours agorootparent> This problem exists at big tech and startup,Big tech or startup status are not correlated with top talent. I&#x27;ve seen the whole spectrum of low to high talent from both places.> in companies that spend fractional multipliers of the average salary on engineers as well as those who pay poorlyPay and top skill are only slightly correlated, unfortunately.> Top talent does not exist.It does exist. I&#x27;ve seen it, but most managers don&#x27;t know how to find it, identify it, and retain it. reply mdekkers 4 hours agorootparentprev> […] hire top talent […] easyHave you _tried_ hiring good people? reply marcus_holmes 4 hours agorootparentprevThe people who implement Scrum are insecure managers. They don&#x27;t understand the development process, don&#x27;t trust their staff to just get on with it, and need constant reassurance that their project&#x2F;product is making progress.So it would have to be both: the devs are good and don&#x27;t need hand-holding, and the manager is able to deal with the lack of transparency that \"it&#x27;ll be done when it&#x27;s done\" comes with. reply koonsolo 3 hours agorootparentprev44 yo dev here. What I&#x27;ve seen from managers is that \"letting go\" is more of a personal trait than an external force.Some people just have a very hard time letting go and trusting a team. Who they are managing just needs to follow. reply guytv 2 hours agoparentprevDuring a certain phase of my career, I was part of a company that extensively used the Scrum framework.My takeaway then was that Scrum fosters a modular team management style, which diminishes the dependence on highly skilled individuals.This approach seemed to offer management a sense of oversight in the software development process, but I didn&#x27;t stay long enough to determine whether this was actual control and predictability or merely an illusion of it. reply baal80spam 2 hours agoparentprevI re-read Peopleware this last weekend. It&#x27;s one of my favourite books on the topic of software management. There are chapters that are not very useful for the $current_year (eg. regarding telephones or office furniture) but overall it&#x27;s a fantastic piece on human interactions in the industry. reply PartiallyTyped 5 hours agoparentprevOur team is the only one not doing “scrum” or estimates or shit. Our team is the only one far ahead because we don’t waste our lead engineers’ time and allow them to move at their own pace (that means very fast). I just have 15 minute dailies with the other senior and the manager to stay in sync. reply SergeAx 4 hours agoparentprevWhat if the boss gets a wake up call from bank, saying they are out of funds to pay team salaries, first? reply zug_zug 6 hours agoprevInteresting phenomenon happens at my place which is scrum + Safe. Our team gets publicly dinged if we \"carry over\" tickets between sprints, so if we finish our work with 2 days left the manager asks not to start anything new.The process is a performance within a performance, literally getting told NOT to do more work. This is what happens when you have chart-oriented-development (particularly jira&#x27;s toxic charts).You might think this is nice to have free time to sit around, but frankly it also drains a lot of the joy out of my work, takes away my sense of autonomy and pride in my work and leads to some resentment. reply marcus_holmes 4 hours agoparentThis. I moved from being the Main Tech Guy at a startup to being a backend engineer at a mature company running Scrum. I was amazed by how little work anyone did at the mature company. People obviously doing f-all during the day. If we finished our sprint 3 days early then we just pretended to be working (what is the point in having a standup every day when there are no tickets to work on?).It was painful. I constantly felt that I should be working, because I was being paid decent money. But there was nothing to do, and no-one wanted me to do anything. I couldn&#x27;t focus on a side project because I felt so guilty about taking their money and not doing anything.We adopted Mob Programming. Five senior engineers on one call writing one piece of code. Or rather, one of us teaching the manager some Golang while he spent 4 hours doing a ticket that should have taken 1 hour. No stakeholders present because none of them wanted to waste a day watching us work.Such a waste of time and talent. reply tamimio 1 hour agorootparent> I couldn&#x27;t focus on a side project because I felt so guilty about taking their money and not doing anything.That’s what I hate about these wasted “pockets” of time.. you don’t have work to do, and you can’t focus on doing your side projects either, just a waste. reply knodi123 5 hours agoparentprevOur solution for this is to have nebulous time sucks that need to be done, but don&#x27;t have a ticket with an estimate. Like \"increase test coverage\" or \"experiment with new things for a git hook to do\" or \"eliminate warnings\". There&#x27;s no deadline, and everything else is higher priority- but when you finish your sprint early, now you know what you can work on. And it&#x27;s useful, not just scutwork. reply foogazi 5 hours agoparentprev> Our team gets publicly dinged if we \"carry over\" tickets between sprintsThis is not part of scrum reply jatins 4 hours agorootparentYou&#x27;d be surprised at how many places this is.At a place I worked the management decided that a \"story\" should always be completed within a sprint. So what did we do? We started using stories instead of tasks and epics instead of stories[0]. And voila, now magically stories complete within a sprint![0] Just writing that sentence makes my eye twitch reply ncann 3 hours agorootparentSimilarly, in order to fit stories into a sprint and not spillover, there is the constant fixation on making stories \"as small as possible\". So now people make a story for adding a button, then another story for the click handler of the button, then another story for saving data into DB when button is clicked, then another story for adding the tests, and so on. Then the sheer amount of time talking about how to split that up and adding all those into JIRA... reply hiyer 3 hours agorootparentprevIt kind of is. Well, the public dinging probably isn&#x27;t. But at a few companies I&#x27;ve seen, teams are tracked on how many tickets span multiple sprints. If it exceeds some threshold, then theoretically it means that either: 1. The team is not breaking down tasks granularly enough, or 2. They&#x27;re not estimating tasks correctlyPractically, it means nothing of course. reply foogazi 2 hours agorootparentIn Scrum:- the product owner sets the backlog priority- team estimates- team commits to what it can deliver from the backlog- any misses are analyzed for scope mistakesRinse&#x2F;repeatThere’s no shaming partEdit: format reply hereforcomments 4 hours agoparentprevI can totally relate. We are not told not to do more work but at sprint planning if someone thinks a ticket would spill over then they should add it only to next sprint. So we do less work just to not spill over. reply holistio 5 hours agoparentprevI work on a very small scale nowadays, but what I have found to be helpful is \"weekend fun\" tickets. Nice to have things that I wouldn&#x27;t do otherwise but are fun when I don&#x27;t have the energy for other stuff &#x2F; when I consciously try to reward myself. reply dopidopHN 5 hours agoparentprevI had a team with a shadow backlog. Fun times reply Camisa 5 hours agoparentprevGreat time to tackle some tech debt reply marcus_holmes 4 hours agorootparentNot if you can&#x27;t work on anything without a ticket, and you can&#x27;t add a ticket to the current sprint. reply kuchenbecker 3 hours agorootparentDo it anyway, file the ticket and pull it into the next sprint. reply marcus_holmes 3 hours agorootparentSo stop following Scrum? Completely agree reply bombolo 3 hours agorootparentprevAh yeah I had a boss that wanted me to open tickets, estimate them, plan them, do them, to fix 1 line issues that I would randomly find working on other tasks.Normally I just fix them within a separate commit. reply superfrank 4 hours agoprevI have a lot of issues with scrum and I think twitter post and the comments here touch on a lot of them, but one of my biggest annoyances with the whole thing that I hardly ever hear anyone mention is the term \"sprints\".If you asked a marathon runner how to run a marathon, they&#x27;re going to tell you things like run slower, make sure you conserve energy, and control your pace. They&#x27;re not going to tell you to mentally break the marathon into small sections and sprint them all.I know it seems minor (and it probably is), but it&#x27;s always felt a bit telling that the recurring segment for work in scrum is named after something you cannot do repeatedly without completely burning yourself out. reply RayFrankenstein 3 hours agoparentFrom “Agile In Their Own Words”, https:&#x2F;&#x2F;github.com&#x2F;rayfrankenstein&#x2F;AITOW&#x2F;blob&#x2F;master&#x2F;README....“One aspect of agile, and of SCRUM in particular, is that the team is expected to &#x27;forecast&#x27; which stories it will &#x27;burn down&#x27; for a sprint. The phrase \"forecast\" is often replaced with \"commit\", and a manager-type will interpret this to mean he&#x2F;she gets a fixed price deal with the team, yet without any quotation on behalf of the team for assessing risks&#x2F;opportunities, as with a regular fixed price contract. As a freelancer, you can&#x27;t let this happen, so it leads to unpleasant discussions.I also take issue with the term &#x27;sprint&#x27;. By definition, a sprint is a short-term sports activity to reach a goal in the shortest amount of time possible. But just as in sports, you can&#x27;t expect to do one sprint after another without quickly burning out, and that&#x27;s exactly what I&#x27;ve been seeing in agile projects. An engineering-heavy software project shouldn&#x27;t be seen as a series of sprints at all, but more as an endurance run if anything.I also hate the term &#x27;agile&#x27; itself, which seems to be chosen to appease to a manager&#x27;s idea of interchangeable, faceless staffing. Actually, \"agile\" makes me think of spermatozoa striving to fertilize ova.I also despise the motivation propaganda that usually goes with agile, and the \"scrum masters\" non-coders interrupting any meaningful technical discussion they don&#x27;t understand and suggest to take the discussion &#x27;offline&#x27; or &#x27;time-boxed&#x27;.\"--imhotap, https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;programming&#x2F;comments&#x2F;6rsyrd&#x2F;in_a_nu... reply RayFrankenstein 3 hours agorootparentAnother from “Agile In Their Own Words”“My experience shows that proper testing and documentation is the first thing that management wants taken out of the story, often with the excuse \"We can handle that in a later sprint.\" But since your life is a neverending series of sprints (note: that&#x27;s actually an ultramarathon), and management gets to pick priorities, you may never return to the technical debt.”—klyrs, https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20017854#20021832 reply RayFrankenstein 3 hours agorootparentAnother from AITOW“I regularly ask ‘Why are we running a marathon in a thousand sprints?’.Besides tech debt, a concern I have that I don&#x27;t see brought up is burn out. With Scrum, every action you perform is micromanaged and with a push for ‘high velocity’. There is no proverbial breathing room in this where the pressure lets up. At least with waterfall (for how we did it before Scrum), the windows of high pressure times were shorter. During the beginning of our 6 month waterfall, in parallel to spec work we&#x27;d be taking care of tech debt or implementing our pet feature and it was a time of mental recovery.”—epage, https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20017854#20021832 reply lispm 3 hours agoparentprevIf the word (sprint) is a problem, then change it. Call it \"iteration\", \"segment\", whatever.Taking a 500km bicycle ride from one place to another, you surely will plan the thing as segments. I would plan days and see where I can reach milestones: a city, a place to stay, a sight-seeing place, a mountain top, a ferry, a destination...A software development project of several months is not a Marathon.I&#x27;ve run a Marathon in a few hours. But even in a Marathon I look at my starting preparations of the day, my 5km times, reach the half marathon, plan for the drinking stops, plan when my primary energy source is depleted, how to get over it, ... Few people run a Marathon from front to end with the same speed&energy, without a plan how to mentally split up the race. reply PloufPlaf12 4 hours agoparentprevThanks for pointing this and I don&#x27;t believe this is a minor point. I&#x27;m managing multiple teams - I was a developer - and I consider the \"long\" time perspective as a product quality technically speaking and also the team health. And a sprint is not compatible with those two last points where at the end of a sprint everybody in the team rush to deliver the user story and everybody is exhausted or tired... reply sharkbird2 3 hours agoparentprevCompletely agree, it has always bothered me as well. To me it (strongly) implies rushing, and I don&#x27;t believe that constantly keeping your team in a stressful state where you are always rushing or &#x27;sprinting&#x27; towards the next goal is a good sustainable long-term strategy. reply knallfrosch 3 hours agoparentprevBonus points for starting and ending sprints with meetings instead of work :) reply Spiwux 4 hours agoprevI&#x27;m going to get blasted for this, but you *are* doing scrum wrong. Scrum was invented by engineers to defend themselves against incompetent middle managers. The moment you let management take the process over and warp it you are already doing it wrong.Story points and sprints are a *self-calibrating* tool that will give you an advance warning (nicely visualized in burn-down charts) if an estimate you might have given a middle manager will be missed.You do not \"decide\" how many points fit in a sprint, you just work at a sustainable pace and *measure* how many points fit in a sprint.Nearly every single point in that tweet just screams bad management and bad engineers without any agency. reply lelanthran 1 hour agoparent> Story points and sprints are a self-calibrating tool that will give you an advance warning (nicely visualized in burn-down charts) if an estimate you might have given a middle manager will be missed.> You do not \"decide\" how many points fit in a sprint, you just work at a sustainable pace and measure how many points fit in a sprint.I don&#x27;t know how you can use both \"sprint\"[1] and \"sustainable\" in the same post with a straight face.[1] A sprint, by definition, is an unsustainable burst of speed. The word \"unsustainable\" is literally in the definition. reply sklivvz1971 3 hours agoparentprevNot only I&#x27;m not blasting you but also I&#x27;m right there with you.I&#x27;ve always said that Scrum doesn&#x27;t fix problems, but it makes them more evident so you can fix them.Teams that don&#x27;t realize this are going to be unhappy about Scrum, but in my opinion they wouldn&#x27;t be happy without.Often the problems are one of these:- Focusing on estimates. In scrum, a team doesn&#x27;t really need any estimates beyond planning what they will do in the next two weeks. Planning poker, story points, estimations are just a means to that end. If you don&#x27;t like them, don&#x27;t use them.- Focusing on ceremonies without understanding how to use them (or when to drop them!). I haven&#x27;t done stand ups in years. I use online tools like geek bot. Retrospectives are just as useful as the number of problems you actually solve after they are pointed out. Planning is only useful if it produces teamwork, if the engineers all work in 1-person silos, it becomes a joke.- Not understanding that Agile > Scrum. If you think you can be more agile without some parts of scrum, drop the parts you don&#x27;t need. Being able to change the rules of the game in-flight is part of agile (and of scrum). reply knallfrosch 3 hours agorootparentSorry, but that&#x27;s a catch-all defense. You&#x27;re either doing too much Scrum, or not enough, and if it&#x27;s not working you&#x27;re doing it wrong. But the Party is always right, no matter what! Read our manifesto and attend some certificated training. reply knallfrosch 3 hours agoparentprevAgree, but the warnings are for management, not for you. What do you care whether something&#x27;s finished? Shoulda hired more interchangeable devs or lowered the expectations. reply musicale 3 hours agoparentprev> bad management and bad engineers without any agency.bad management destroys agency reply beardedwizard 5 hours agoprevI would have guessed more HN readers would attempt to understand the desired outcomes, how the implementation attempts to achieve them, then take the good from the bad as a source of constant improvement.The tone on this thread has that jaded and defeatest \"management sucks\" attitude that I find most often in the least productive engineers regardless of how they work. reply xedrac 4 hours agoparentI&#x27;ll be the first to admit that managing a complex project&#x27;s timeline is not a skill of mine. All I know is that the franken-scrum monstrosities that I have been subjected to in various organizations have all had a very negative impact on my morale and productivity. The problem I see is that the the business will want to make tradeoffs that the developers may not like. How you reconcile the two without hurting morale is the challenge. I left my last company largely because their version of scrum was sucking the life out of me. reply RayFrankenstein 3 hours agorootparentMy problem is not whether I “like” management’s tradeoffs they force me as a developer to make; my problem is that managements typically don’t take accountability for choosing to make them.And then management (and their allies in the closely aligned “Software Craftsmanship” movement) blame the developers for the consequences of those tradeoffs and all the technical debt that typical entails. reply tamimio 1 hour agoparentprev> then take the good from the bad as a source of constant improvement.I worked as an engineer, PM, and a manager, when I was an engineer and scrum was applied wrongly, I tried to communicate for that “continuous improvement”, but that only works with an actual leaderships that listen, 99% of your middle management are just power hungry folks that are kept in their positions to take the shit instead of senior managements, when I worked as a PM however and tried to customize those agile tools per project and per team personalities too, everyone was happy, projects got delivered and things worked as expected. In 90% those situations you can never blame the engineers, look at the work environment as a workshop, the guy working in that shop is the PM and the tools are your engineers, ultimately that guy is accountable for the success or failure to deliver that work, if you start blaming the tools you have in the workshop, then you are the incompetent one, simply put. reply tasubotadas 4 hours agoparentprevThe guys here come to the scrum retrospectives, stay silent the entire time, and then complain that scrum sucks. reply marcus_holmes 4 hours agorootparentTried saying \"this process sucks, can we do it better?\". Was told that Scrum is what all organisations use, there&#x27;s nothing else (except Waterfall), and that this is \"best practice\".The people who are silent in the retros are probably jaded and cynical about the whole process. And if the manager knew their shit, they&#x27;d do something about that instead of accepting that some of their team are not engaged with the process. reply ahtihn 4 hours agorootparentprevI think Scrum done well works rather well but retrospectives tend to be a lie.Teams generally aren&#x27;t allowed to stop doing sprints. In some places they aren&#x27;t even allowed to pick start and end dates because management wants all teams on the same cadence.If you use Jira - there&#x27;s often all kinds of stupid imposed workflows. Mandatory fields depending on ticket types etc. If it&#x27;s not useful to your team - tough shit, you don&#x27;t have a choice.Want to stop doing story points and use tshirt sizes? You can&#x27;t, management monitors velocity as performance indicator.Once you&#x27;ve had a few suggestions shot down because of top-down mandates, why even bother with retros?Basically, scrum is very frequently a top-down management technique and teams aren&#x27;t actually self-organizing because management can&#x27;t deal with 10 teams each doing things their own way. reply xedrac 3 hours agorootparentprevI&#x27;ve spoken up in many retrospectives, but when nothing changes, it&#x27;s hard to take them seriously. What&#x27;s the point of a retrospective if your feedback is simply discarded? reply beebeepka 4 hours agorootparentprevOr maybe they have tried speaking out, only to be chewed and digested for daring to raise their voice. Life is not black and white reply beardedwizard 4 hours agorootparentprevToo true, seen it so many times. reply mrfumier 3 hours agoparentprevI&#x27;m also very surprised by what the overall thread is saying. Scrum and the agile movement in general have been a revolution for the better in management and organization, in my point of view. reply telltruth 5 hours agoprevMost people don’t know some history. During 1990s, a group of people made a fortune out of consulting gigs where they will be called in by their CTO friends in traditional enterprises to save the late and over budget projects. One of these people was Kent Beck. Kent will use his license to kill to turn things around and eventually generalize his rescue formula and sell it to make 100X more. His crowning glory during those days was XP or eXtreme Programming.Like with all self-help formulas, Kent will label his solution as magic bullet for all software development problems. He will advertise it as secret medicine that cures all ills. He will be at every conference, write articles after articles, publish books.Also, like all magic self-help formulas, it wouldn’t quite work. So, Kent will invent something new. His next prescription was TDD and when I first saw it, I thought it was a joke. But people around me started drinking cool aid and if you didn’t join them then you weren’t one of them. Again, Kent and friends will go out on massive marketing spree advertising it as secret talisman. Like all overweight desperate people in need to lose weight, people will enthusiastically start new Kent Beck diet, lose few pounds and endorse the formula. But they will soon find that they had simply traded one problem for another more uglier one.This went on for long time. For more than two decades, these group of people kept inventing these processes, selling it as magic pill and made millions upon millions in consulting gigs, books, training, certifications and so on. They came up with Agile and 17 people in that group created “agile manifesto”. Their most aggressively marketed prescription was scrum. Like their all previous prescription, world is finally coming off of night of drinking cool aid and feeling severe headache.I think most of these people have now sort of retired after amassing massive fortunes and hopefully we will not see more of these magic processes pushed to dumb CTOs with promises of curing all ills.The truth is Scrum was never a magic bullet and it is downright harmful for many projects. It is useful for highly predictable projects where research component is negligible, for example, CRUD websites AND where you are stuck with unmotivated tier-3 talent who failed to get job at insurance company. For everything else, it should never have been used. It is especially going to hurt creativity, originality and novelty if you are in business of making a differentiating unique novel product. It also is very very bad choice if you already had tier-1 highly motivated team.So exercise caution! reply smaudet 4 hours agoparentI think even a tier-1 team could make it work for them, but the key is they would make it work for them (make it their own process).Once you hire a scrum master to tell you how to do your work, you&#x27;ve sort of lost. They are rarely useful other than as sort of \"priest\" of the process, who ends up becoming another sort of management, but without management powers (usually).The meetings etc. can be downright useful, in certain cases, but don&#x27;t really make sense to follow religiously. I.e. if the devs themselves are running the meetings, for themselves, its a useful form of self-management, and you don&#x27;t need much management skill to run it (any seasoned dev with any sort of communication capability can do it).But if its imposed upon you, its just a cookie-cutter sort of management, which, doesn&#x27;t fit all teams or scenarios. reply mpweiher 2 hours agoparentprevEr, no.First, Scrum is not XP. Huge difference.Second, even XP is not a \"magic bullet\". Nothing is. It&#x27;s work that works. (Scrum, on the other hand, is not a \"magic bullet\" but simply a \"bullet\". Use it to kill projects very effectively).Third, at my first real job after uni, we did most of the XP-like practices, and it worked amazingly well. But we didn&#x27;t know about \"XP\". Partly because it didn&#x27;t exist yet, as this was around the same time the Kent Beck started at Chrysler Comprehensive. When the XP books came out it was fun to have a name for what we had been doing so successfully. And also to compare and contrast.Fourth, I had a great side-by-side natural experiment during my tenure at the BBC. My team did XP-ish things, mostly the technical practices, so test first&#x2F;TDD, YAGNI etc. Pairing when necessary, but we were co-located around a desk \"island\" (sort of the way journalist workspaces are organised). My team succeeded far beyond expectations [1]The team next to us, larger, more important and with way more experienced developers did SCRUM, but not XP. That project had to be rebooted completely after 2 years.[1] https:&#x2F;&#x2F;link.springer.com&#x2F;chapter&#x2F;10.1007&#x2F;978-1-4614-9299-3_... reply raister 4 hours agoparentprev> Their most aggressively marketed prescription was scrum.I don&#x27;t think Agile has prescribed this though. Scrum, in my view, is an intermediary &#x27;solution&#x27; so non-technical &#x27;bosses&#x27; can overlook and micromanage dev teams. I guess it all stems from &#x27;unproductivity&#x27; really, those cases you mention, where you end up with sub-par devs trying to deliver complex software products. reply avinassh 4 hours agoparentprevWhat&#x27;s wrong with TDD reply HideousKojima 4 hours agorootparentIf you don&#x27;t already have a clear spec for what your code needs to do, it&#x27;s essentially doubling what you need to code for no real gain. reply alfons_foobar 3 hours agorootparentI&#x27;d argue the opposite:If you already know _exactly_ what your code needs to do, you can \"just implement it\".I find TDD to be very helpful in the cases where I do _not_ know everything in advance, because it lets me take small steps to explore things and I get very fast feedback if I \"misstepped\". reply namaria 3 hours agorootparentAll of the methods mentioned are based on a reasonable core. It muddles the waters and make the snake oil marketing - the \"this is the cure to it all\" discourse - harder to dismiss. Testing is good. Planning is good. Discussing the project is good. But these things are beside the point of op. The point is, these cargo cults are designed to make consultants money. Now they have a lot of inertia because people grow up on it.It seems like the new generation of software development silver bullets is \"microservice\", cloud \"devops\" etc... Managed kubernetes is not a bad thing. Configuration files, software defined infrastructure, etc, not bad things at all. But there is a definite market push in consulting for overtly complicated frameworks as The Way and people who are anxious about their complicated projects gobble it up. reply rightbyte 2 hours agorootparentprevIt is dogmatic. reply ggm 5 hours agoprevScrum puts \"feel good\" limits around the unknown qualities of time-to-complete and \"divide and conquer\"You still don&#x27;t really know when it will be ready, but you now have talking points with management about a) whats been done and b) how complex it is. This builds belief: Belief there will be a solution, and Belief you can find it.Nothing not said better by others here, but I say this as a party who was dragged kicking and screaming into the process to be an agile product manager, hated it, and got out. I totally \"get\" why people want this. It&#x27;s very rare to be a Bell Labs, or Xerox Parc, and have pretty much complete freedom to spend budget and deliver an outcome when it&#x27;s ready.I also have worked on large s&#x2F;w projects which cost $16m to fail to work, and $60m in lawsuits out the other side. I know that the alternative (a massive proscriptive playbook of minute details of functions, UML, flowcharts, you-name-it) exists and works, or not (depending on your point of view).Really? I think scrum was the wrong name. The process itself, is fine. Talking to your co-workers builds a sense of purpose and direction. reply lafar6503 3 hours agoprevIn some cases having a formalized process&#x2F;methodology helps to appear professional and hide the fact that nobody knows exactly what they&#x27;re doing. I&#x27;ve seen it it some place - very serious software dev company delivering very serious medical software, but in fact the whole team was just faking it and trying to keep up the professional image. The developers were random people without business domain knowledge, managers were managing the work without understanding it, analysts were producing some documents that nobody understood, customer approved some scopes hoping that the specification is actually what is needed (but in vain). The team was assembled from contractors, and people rotated quite frequently so that there was no chance for them to acquire the domain knowledge necessary to talk to the customer. It was just painful to take part in it, but took me some time before i realized in fact everyone is just pretending to understand what&#x27;s going on. Endless approvals and multi-step procedures required for medical stuff just made the whole thing impossible to understand and smeared the responsibility so broadly that it was guaranteed there&#x27;s no single person that knows too much. reply strictnein 4 hours agoprevAnecdotes #6 and #7 in their list is a real indicator of something bad, wholly unrelated to Scrum.> #6 We measured how much it cost to deliver one story point and then wrote contracts where clients paid for a package of \"500 story points.\"> #7 Management lost it when they found that 500 story points in one project weren&#x27;t the same as 500 story points on another project. We had many meetings to fix this. reply anticristi 5 hours agoprevAgile is a cancer too: In many orgs, Agile is essentially synonymous with chaos. Zero look-ahead. Let&#x27;s do it first and fix it later. Later never comes.I believe 99% of Agile&#x27;s value comes from caring about developers and letting them pride themselves with their progress.Managers benefit from regularly reminding devs that their progress is not measured by amount of code, but working features. \"Can you do a demo?\"Care about your devs, let them demonstrate progress. There, I just invented another Agile framework. reply computerdork 5 hours agoprevI hope people read this person&#x27;s full post. he says, \"I believe in Agile, but this ain&#x27;t agile.\"Yeah, agile and scrum aren&#x27;t the same. In my humble opinion, agile process is pretty fantastic and a lot better than waterfall (although waterfall has some elements that should be carried over to agile) or even Rational Unified Process. Yeah, Agile is taking over the engineering world (not just software) for a reason, because iterative development using small teams works. reply hliyan 5 hours agoparentI once blew a team&#x27;s mind by this simple demonstration:1) Searched the entire agile manifesto site for \"sprints\", \"stories\", \"velocity\", \"stand ups\" etc. Zero references.2) Searched the official scrum guide for the words \"agile\", \"stories\", \"story points\". Zero references. It only defined sprints. reply lispm 3 hours agorootparenthttps:&#x2F;&#x2F;agilemanifesto.org&#x2F;principles.htmlRead through the principles and then find out how it maps to scrum.Scrum is not the same as \"Agile\", but it tries to provide a simple methodology to implement parts of it.> continuous delivery of valuable software> Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.That&#x27;s a sprint in Scrum.> The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.A stand-up is one way to do it. Standing and talking face to face may seem foreign to people used to sit all day in front of computer screens, but I think it&#x27;s worth trying... ;-)and so on. reply makstaks 5 hours agoprevI have delivered successfully projects using Scrum, but we were fortunate that our Scrum Master was well trained and a senior engineer. Our CTO also let us figure things out, and helped us when we were blocked. He was genuinely concerned with the team having a balanced workload, ensured we deliver user value and our software was of high quality. Story points were not used as performance metrics but a tool to help provide stakeholders with some estimation, but only when our velocity became stable. Overall, our process was light-weight, we spent most of our time coding, and we pushed hard to deliver value to the user. If we fell short, we learned from it, no blame, just learned. reply tamimio 1 hour agoprevI probably said it before in a previous post, but the problem isn’t scrum&#x2F;agile per se, it’s just a tool, the problem is the inexperienced PM who thought just because it was applied in their previous company or another big tech, then it must be the secret formula for success, that, or as OP said, abused by control freak managers to micro-manage the team more, like poor soul I know, they had meetings for meetings..I remember one time got in several conflicts with a manager who -again- is trying to copy-cat all these shenanigans like standup and what not even though neither the work nor the team nature fits that type of work, first, I wrote him that wasn’t the best approach and better to use these tools, second I tried to communicate that face to face, third, I actually applied these tools I was suggesting in a project I am doing as a way to show an example how it’s done maybe that will convince him, unfortunately, nothing worked with him, it was “my wrong way or the highway” approach, he wasn’t even certified PM with no training and I was, had to leave them after delivering my project. reply brzezmac 1 hour agoprevTwo employees of a company were suddenly approached by the CEO accompanied by the CTO.- Death or Scrum? - asked the CEOThe employees knew nothing about this Scrum thing, but were to intimidated to ask and the other choice was one they were not ready to make.The first one thus replied in a quavering voice: \"Scrum\"In this moment the first employee was grabbed by the CTO and was put through horrors not many could withstand:- Neverending sprint planning meetings- Daily Scrums that lasted 4 hours- The sprint reviews- Sprint retrospectives- The backlog refinementsAfter all this the employee was only able to say: \"Still working on User Story XYZ. No impediments.\"The CEO then asked the second employee what their answer was. The employee was fighting a tough fight in their head.\"I hate meetings, I would love to do some real work, but I&#x27;m not ready to die yet. On the other hand, I can&#x27;t go through life after all that abuse; There&#x27;s no way I could live with myself\". So he answered: DEATH!To this the CEO swiftly replied: Death ... by Scrum reply npteljes 2 hours agoprevAfter 10 years in software development, going from junior to lead, I still fail to see the benefit of sprints. The best performing teams that I have been part of all worked around it, in order to make the team look good, in the eyes of the customer whom we sold Scrum to.For features, I&#x27;d say that Kanban works better, when mixed with ideas from Scrum. Most of Scrum&#x27;s ceremonies are useful without sprints, and gives, in my experience, the same value to managers as they do in Scrum. The overhead in administration and time that sprints bring are not worth it at all, though. And if management wants, commitments and planning can be done against a deadline, in the same way they&#x27;d do with sprints, just without the artificial short periods.The tweet however contains lots of bad management, and general bullshit otherwise.\"Imagine having a manager, a scrum master, a product owner, and a tech lead. You had to answer to all of them and none simultaneously.\" I think this is fantastic, not having a single boss, but having different \"hats\". One person can also have multiple, for different projects. In my experience, this worked out well.T-shirt and poker.... I don&#x27;t see why they don&#x27;t work as analogies, and therefore this is moot criticism.Even the author himself acknowledges: that wasn&#x27;t scrum, they were doing scrum wrong. So stop doing scrum? Why not do scrum better? What makes him think that the same bad management will do any other methodology better? reply firefoxd 2 hours agoprevMy experience with scrum is: metric driven development.Not metric as in the measure of the effect of your code, but Jira (or whatever your task manager is) metrics. It systematize the process, without taking the actual work into consideration. This is why you get a \"but you did the other similar project with just 50 points.\"The metrics always win because developers end up working overnight to complete the project on time. So it validates the metrics.My teammates message me when they find issues with their task. We discuss, hop on calls, involve other teammates, the works. But then on the daily stand up, we repeat the issue to the scrum master, even though this person could care less about the issue.Scrum is a fantastic tool if your job involves making reports about the work being done. Except, it doesn&#x27;t reflect the actual work being done. And my poor reader, you are probably not in a position where you can do something about it. reply JanneVee 3 hours agoprevSix of the nine points is about estimates and I agree. And depending on who you ask estimates is or is not part of Scrum, but that doesn&#x27;t really matter... you shouldn&#x27;t be spending too much time of them and if your organization requires detailed estimates they simply don&#x27;t understand \"agile\" and they are doing \"Agile\". The absolutely worst thing that I&#x27;ve experienced was the \"story point budget negotiation\" ... that is not how any of it works. reply braza 4 hours agoprevRemoving the OP energy of \"enrage to engage\", I think there&#x27;s a room for a more nuanced position.It&#x27;s a pity that we do not have more people doing systematic research related with Scrum&#x2F;Agile practices and it&#x27;s advantages, Regarding on outcomes, in comparison with RUP, empirically we know that it worked better based on economic results + adoption&#x2F;spread + people empathetic to use it in a corporate environment.However, after 22 years of Agile&#x2F;Scrum we do not know in a systematic and in a scientific researched way the second order (side effects) of Scrum as a management tool, and which kinds of incentives it creates. We know empirically based in a small amount samples. reply t43562 4 hours agoprevScrum got popular but it doesn&#x27;t fit in with most companies imperatives so the management modify or purposely fail to understand it or don&#x27;t train anyone. It&#x27;s really about teams adjusting themselves to whatever behaviour and process works for them and managers hate not having control. So it&#x27;s inevitable that any method which gets adopted in name at shitty companies will be \"enshittified\".Hence the article has no real insight and is just aimed at generating views with controversy. reply joos3 4 hours agoprevTo read without logging in to Xitter: https:&#x2F;&#x2F;nitter.net&#x2F;svpino&#x2F;status&#x2F;1695806027256475777 reply hw 5 hours agoprevI’ve managed teams that have been excellent without scrum. Then there’s one or two teams that just cannot get things done and are all over the place. Had to introduce scrum to get more structure and accountability to getting things done. Once the team started having a good cadence, slowly weaned off scrum.Tldr; scrum is another tool in your toolbelt you can reach for. Some teams work better with scrum, some dont. Experiment and see which one works - ultimately the goal is the same which is a productive, well oiled machine, regardless of the ‘how’ reply theshrike79 4 hours agoparentThis is the correct answer.Different teams get by with different amounts of Scrum Processes.Less experienced ones need the full-on shit with backlog grooming, planning poker, dailies and retrospectives.When the team gets better (and there isn&#x27;t much turnover), you can relax the Processes.I&#x27;m pretty sure I might be the only one on HN who has Scrum actually work in real life. (I&#x27;ve had my share of shitty-Scrum too, like 45 minute \"dailies\"... =) reply ghusto 3 hours agoprevAgreed, however;> We prohibited laptops in meetings. We had to stand. We passed a ball around to keep everyone paying attention.I think the no-laptop thing is good, and unsurprisingly, it has nothing to do with Scrum.> Story points measure complexity, not time, but we had to decide how many story points fit in a sprint.Out of all the bullshit that makes up Scrum and (what has become) \"Agile\", this is the one that clogs the toilet. I can imagine a world where this idea of \"complexity, not time\" is done properly, but it&#x27;s not this one.Srumm is Agile™. Real Agile means working in incredibly fast feedback loops, to the point where you can&#x27;t tell it&#x27;s part of a process, because it&#x27;s all working so fluidly. Trying to put that into a series of rigid set meetings is the antithesis of that. reply s-lambert 3 hours agoprevSome of this is due to Scrum but other parts of it would still exist in these companies even if they changed to Kanban. I think the problem is the kinds of companies that have these processes can&#x27;t find an alternative. The companies I&#x27;ve worked at where it was like this were all sales-driven enterprise software where deadlines are the focus and being able to tell a customer it&#x27;ll be there in X months was viewed as critical. So they put all of these processes in place to make sure they can consistently hit deadlines even if it means slowing everything down to a halt. It still doesn&#x27;t work that well but just removing the process isn&#x27;t going to work without changing how the rest of the company operates too. reply brucenanner 6 hours agoprevI know for a fact engineers on my team that called me crazy for thinking scrum is snake oil sold to management will upvote this. reply brailsafe 2 hours agoprevIn my last company, when the idea of T-shirt sizing came up, I legitimately thought whoever mentioned it was joking. As if the rest of the excruciating processes, and petulant passive-aggressive behavior of my managers weren&#x27;t patronizing enough. \"Ah yes, now I get it, it&#x27;s like clothing! I have some clothing right here next to me, now we&#x27;re speaking a common language\" reply bullen 4 hours agoprev\"Your software should be agile, not your process. Your process should be \"disturb as little as possible\". Either you code or you get out of the way and take responsibility for the people that code by slowing them down just enough to trust them.\" reply knallfrosch 3 hours agoprevThe worst part of Scrum&#x2F;Agile is that you formalize everything. Reducing technical debt, improving CI&#x2F;CD, research and innovation sprints.. Oh, you fixed a typo? Where&#x27;s the ticket for that?Until, of course, the things you want to improve are never in the sprint and you have no free day to tackle anything you want (and the project needs), ever.Bonus points for using Product Increments and abusing the Innovation and Planning Sprint as buffer that always gets used. reply hugozap 5 hours agoprevI&#x27;ve personally never been in a project where I&#x27;ve felt that the team was doing well thanks to scrum but in spite of it. reply davidw 4 hours agoprevI don&#x27;t have a lot of strong feelings about &#x27;process&#x27; stuff, but boy do I loathe self-important sounding talk like \"ceremonies\". I was explaining some work stuff to my mom, who knows BS when she hears it and I could practically hear her eyes rolling over the phone when I mentioned how they had started calling things \"ceremonies\" at work.Things like weddings, graduations and funerals are important moments in life that cultures all over the world honor with ceremonies of some kind. Your quick morning meeting to discuss what you&#x27;re working on isn&#x27;t a @#(#(#( \"ceremony\". reply billy_bitchtits 7 hours agoprevMy company bought into the SAFe bullsh*t and it’s awful. reply ww520 5 hours agoparentI look at the typical SAFe framework and laugh. https:&#x2F;&#x2F;scaledagileframework.com&#x2F;wp-content&#x2F;uploads&#x2F;2023&#x2F;03&#x2F;...SAFe is the next buzz word laden cancer to infect the enterprise. It will bring Business Agility(tm) to areas of the business beyond software development.Consultants love it! reply rhaway84773 6 hours agoparentprevWhy would you hate spending 1 month out of 4 for “planning” and then 40% of the time in the remaining 3 months also for “planning” resulting in a massive destruction of productivity all so you can now claim that “yeah, you delivered a fraction of what the company was delivering pre SAFE, but at least we planned on delivering a fraction of what we delivered Pre-SAFE.” reply readyplayernull 4 hours agorootparentAnecdote: When Intel&#x27;s stock kept falling early this year they had to quit SAFE to speed up development... a bird said. reply baal80spam 1 hour agorootparentSo you are saying that their development became... unSAFE? reply j45 6 hours agoparentprevIs there an alternative anyone would recommend.It might not be the best question to ask given the complexity of the software and experience&#x2F;culture of the team. reply davidhyde 6 hours agorootparentIt is a good question but the answer may be unsatisfactory: it depends. I think that the popularity of scrum is due to its catch-all nature and the way it sounds reasonable when you explain it to someone, especially a non-developer.Here is an answer that (I believe) works well: Hire a team lead that is willing to shield a small dev team (less than about 7 people) from the politics above. The devs still talk to users and other people in the company but they do not necessarily have to be accountable to them. The team lead understands the company’s budget cycles, has a vision for the product being developed and, importantly, has the time to sit down with each developer on the team to look at what they are making. Not a code review but a regular show-and-tell kind of arrangement. The fine line in this approach is to make sure it doesn’t degrade to micromanagement and ego poking. reply j45 5 hours agorootparentAgreed, diving into the \"depends\" is critical.Sometimes a lot can be understood from the team and it&#x27;s current process in terms of where it did, or didn&#x27;t come from.Having a team lead that is technical as a product manager can be very helpful as you are outlining. Being able to speak the language of and maintain the respect of both is so valuable in terms of \"getting it\".Clearing the way for devs to learn and do with customers and each other is the other key thing I think about a lot.Startups likely have less politics (hopefully) but the longer they operate as startups politics likely increase, or hides itself better.When I see startups leaping to hire VP engineering, etc, I can&#x27;t help but think of my own experiences where having the founders at those seats translating what is being learned from customers directly into the product was so critical.For existing or larger organizations, I think what you&#x27;re saying is very true. reply bonestamp2 5 hours agorootparentprevWe do a very loose agile process and everyone seems to like it. Basically, we have a standup every morning. Each team member has up to 1 minute to list (in very brief form) what they did yesterday and what they plan to do today.It identifies if anyone will be stepping on anyone else&#x27;s toes, or if anyone knows of something similar and can point you to it, and it lets the project manager know if anyone is working on something that can be traded for a higher priority task that just came up.Most of the time, you work on what you say you&#x27;re going to work on. Sometimes, the project manager will call you after standup to get more detail and&#x2F;or adjust your priority to a different task.This standup is the only formal meeting the developers go to, other than the odd department&#x2F;company wide meeting. The project manager goes to all of the other meetings.We are the most productive team in the company. I think the autonomy and the lack of formal meetings are the real magic. We&#x27;re fully remote and talk to each other plenty throughout the day in an adhoc way, sometimes for fun and sometimes for technical discussions, problem solving, brainstorming, sanity checks (technical and personal), etc. reply usr1106 3 hours agorootparentA standup every morning?To my experience 10% of software developers think 7 am is morning, 60% something between 9 and 10. 30% not before 11 or 12. The first and the last group tend to be the most productive ones.Forcing all of them to meet at 10 or even 9 is the best way to kill motivation and foster cynicism about useless meetings and processes. reply bonestamp2 2 hours agorootparentEach person is limited to 1 minute, and most people only use about 10-20 seconds. So, the meetings are usually done in less time than it takes to go to the bathroom. I think everyone sees the value in calibrating our trajectory for a few minutes every day -- it often saves more time than it consumes. reply intelVISA 5 hours agorootparentprevNice, though part of me wonders: if using version control why bother reading off yesterday&#x27;s commits? Rest is pretty good and accurate imo. reply theshrike79 4 hours agorootparent\"what they did yesterday and what they plan to do today\" is not something you can read off people&#x27;s commits\"I was figuring out how to add a doohickey that widgets foobar\" is not a commit, but during the daily someone else might remember that there already is something that can widget foobars. Or they might know that widgeting foobars was tried before and it failed because X and Y.Then they won&#x27;t start debugging that during the daily, but will point it out and get in touch afterwards along with others that might care. Either on a $TEXTUAL_MESSAGING_APP thread or $VIDEO_CALL_SERVICE call. reply cpeterso 5 hours agorootparentprevThere is no best approach, but this article highlights some common aspects from a survey of 100+ tech companies’ approaches to project management:“How Big Tech Runs Tech Projects and the Curious Absence of Scrum”https:&#x2F;&#x2F;blog.pragmaticengineer.com&#x2F;project-management-at-big... reply j45 5 hours agorootparentThanks so much for the link.My own experience has been similar.Start with keeping a very flexible core and codebase.. feed it with launched code from a plan that balances bug fixes, progress forward, and customer needs from the business.This meant having a backlog, and by scoring each item on criticality where 1 was critical and 6 was someday&#x2F;maybe, and whether it was internal facing, or external facing (customer is aware), you could almost start selecting what was done and ready.Would love to hear anyone&#x27;s processes they used that have worked well for them from start to growth. reply crdrost 5 hours agorootparentprevI developed an alternative called “Hot-Potato Agile” while at Google. I got buy-in to try it, but then was laid off in January just before we could start. So if you have a team that likes sprint cadence but hates the scrum busywork and is open to an experiment, let me know! I still want to flesh out this thing’s rough edges. reply phamilton 5 hours agorootparentPlease share more! reply j45 4 hours agorootparentprevI&#x27;d be interested too. Until it&#x27;s too hot to handle. reply convolvatron 5 hours agorootparentprevThis is a very unsatisfactory answer - but you have to grow a culture. Working with people to match their personal goals with organizational goals. High degree of mutual trust. Cooperative design. Group ownership of the codebase and rotating responsibilities. Lack of &#x27;magic knowledge&#x27;. Sufficient infrastructure development to reduce rote workload on developers.All of these are organic rather than formulaic. They require limited rates of growth to enculturate the new hires, and a seed group that understands this.That works. But you can&#x27;t hire a consultant to build that, or write a book about it. And bad elements in the mix can mess up the whole thing. reply j45 5 hours agorootparentNo, you&#x27;re totally right though - culture is everything, and the experience of being a part of a team how it works is everything.I heard an interesting explanation the other day, hard skills are easy to measure, and soft skills are hard to measure, but developing soft skills can be are more important than hard skills. reply rhaway84773 6 hours agorootparentprevPersonally, I think SAFE or Agile&#x2F;Scrum are good starting points.The key part, however, is teams, departments, and companies, then modifying their actual working by eliminating ceremony and process.The way I think Agile&#x2F;Scrum&#x2F;SAFE should work is that you expose all the teams to all the ceremonies, and all the different alternatives to each of the ceremonies to start with, but you also mandate thst 6 months to a year from now you should have reduced 50% of the ceremonies you started with.The goal should be expose people the universe of options and ideas available, and then once exposed, require them to pick and choose between all these options to tailor their own customized solution which works best with the people on their team and the working styles and the kind of work they’re doing. reply j45 5 hours agorootparentI heard an interesting perspective for startups - Kanban&#x2F;Scrum is useful sometimes before launch, and not using scrum after is beneficial.Mostly because launching changes so much.Part of me does feel sometimes that ceremonies are for making sure the development practice is highly inclusive, including for new and less skilled developers still learning their ways. Another part of me thinks about how this also helps more people to be able to generally help with more of the codebase.I think writing code for your future self or someone else, in a way you&#x27;d like to receive is critical to think about. This can include doing things the simpler way even if it&#x27;s more verbose and more understandable. This isn&#x27;t always possible, but more often than not, avoidable complexity also can encourage the engagement of a lot of ceremony around it. \"Could this have been simpler?\" is one useful question for code reviews. reply gorgoiler 5 hours agoprevClever management technique in a shop full of blunt knives will only get you so far.With my team, we’ve focussed on developing talent just as much as we have on getting the work done. By improving skills through senior-to-junior coaching and code review we’ve built a much more cohesive team that’s better at what they do and can complete tasks which they couldn’t do before. Dexterity and fluency with code was more important to us than organisational skills.Perhaps I’m missing the point and Scrum is only for people at the top of their game? It didn’t feel that way the few times I’ve seen it — to be a little bitchy, it appeared to be quite the opposite. reply emilio1337 4 hours agoprevAssume you need to build a chair. You barely have seen a chair in you life. You would naturally start naively with a first approach. That will fail to carry a person at first. But as your approach advances you’ll gain experience and eventually you will build the chair after some while.That is my understanding of what people name scrum or agile. A management harness with fancy words. The real benefit is when you let people do their work, gain experience and make them self organize their problems. reply floppiplopp 3 hours agoprevPersonally, I&#x27;ve experienced scrum only as a tool used by middle managers to control developers. It sounds good in theory, but power structures are a thing, and it gives too much influence in the way of metrics to malicious managing types who want to be in control. Scrum and agile are now red flags for me. reply Denote6737 5 hours agoprevI work for a web dev firm in the infrastructure team.They are trying to apply scrum and agile to us. It is not working.I&#x27;ve been told ot to work on anything without a ticket. Outages have gone up.It&#x27;s a disaster. reply g9yuayon 4 hours agoprevI&#x27;m not sure if a process can be a cancer. Instead, an institution that uses processes, Scrum included, to hide their ineffectiveness and inefficiency is. reply foogazi 5 hours agoprev> Scrum is not for developers; it&#x27;s another tool for managers to feel they are in control.Bad managers would certainly like to do this but this is not what scrum is about reply boppo1 6 hours agoprevHow do I avoid this in my career? reply semireg 5 hours agoparentI’m a solo consultant and have had many good client relationships based on agreeing on deliverables. To summarize according to the old “pick two” adage of delivered-fast, works-to-spec and cheap: I’m fast, reliable, and expensive. I deliver high value and I’m always available to answer questions.Interestingly, me consulting solo at an hourly rate doesn’t scale. To solve this, about 5 years ago I started a side business of building an electron app for designing and printing labels. I feel like scaling up allows my customers to pick all 3. The app is immediately available, it works, and it’s inexpensive.So there’s another way to avoid agile and scrum: solo entrepreneurship.Good luck! reply yesbut 5 hours agoparentprevCall it out as BS when it comes up in discussions. Spread the word. Stop going along to get along. reply tacitusarc 5 hours agorootparentIn a large organization, this will change nothing. All you can do is be in a trusted position with upper management, and spend your political capital to prevent it. Even then, it may not work if some exec has implementing it as a goal to help their prestige&#x2F;career. reply yesbut 2 hours agorootparentProblems aren&#x27;t resolved unless people shine a light on the problems. reply rightbyte 53 minutes agorootparentSure, but \"Stop going along to get along\" is how all these agile processes spread in the first place.Opponents were ridiculed and bullied by proponents for being boring, old, unmodern, not team players, not using best practice or whatever. And way too many programmers were actual believers for grumpy safeguards to be able to keep things in check.I think a cooperative approach might be better to get rid of agile or it will just be replaced by some other dogmatic cult. Agile is more of a symptom than the root cause. replyb800h 3 hours agoprevIt&#x27;s interesting. I saw this post after reading today&#x27;s post about about Jake Seliger, and his brave and philosophical approach to death from squamous cell carcinoma.The title felt oddly hollow. reply mindaslab 4 hours agoprevSomeone has the courage to speak h truth. I have to finish work within a deadline, or it would look ugly, and I am trying to work today with ill health.Why doesn&#x27;t Scrum be a thing for humans? I feel like I&#x27;m a robot who has to be predictable all the time. reply gedy 5 hours agoprevI agree it&#x27;s rarely \"done right\", but I&#x27;ve been in career long enough that waterfall was still common early in career and horrible crunch time targeting some date at end of 9-12 months projects was inevitable - Scrum was a total breath of fresh air back in 2005-2006 and saved my sanity.Basically we&#x27;d ask mgmt \"what do you want next?\" and they had to fuck off for the next 4 weeks while devs, ux, QA worked with no changes in plans until next demo and release. They were responsible for figuring out \"when will everything be done?\" etc.I recently left a startup that said they were \"doing Scrum\" and it was just daily task tracking and pushing devs to overcommit to each sprint - that&#x27;s not what I consider Scrum. reply theshrike79 4 hours agoparent\"pushing devs to overcommit to each sprint\"Yeah, that&#x27;s definitely not Scrum like you said. The whole point is that the team promises to deliver features during a sprint and won&#x27;t overcommit, they might deliver extra if they have extra time.If your sprints continuously fail to deliver, then you need to decrease the team&#x27;s velocity. reply gedy 4 hours agorootparentYeah it was really messed up - their \"velocity tracking\" was so they could make sure devs committed to at least as many points as the last sprint, even if they didn&#x27;t finish the last sprint.. I only lasted there 4 months before I quit. reply gedy 5 hours agoparentprevI should clarify: we had one of the early Scrum guys (Ken Schwaber) come in and train devs, QA, UX, and management - so there was little room for people to hide behind random interpretations of \"agile\" and it really helped us to start out correctly. reply psunavy03 6 hours agoprevTypical immature bullshit where someone describes their own company&#x27;s screwed-up incompetent so-called \"Scrum\" and \"Agile\" implementation, and then claims that that&#x27;s universalizable amongst all companies everywhere.Just because a so-called \"Scrum Master\" not worth the title is forcing you to do BS things that inhibit your flow does not mean it&#x27;s emblematic of the species. I mean, how would you feel if someone generalized all developers as a bunch of fat neckbearded social cripples reeking of BO? Same thing here.I ought to bookmark this post in case anyone thinks that people on HN don&#x27;t try to farm karma Reddit-style. What a crap bunch of outrage bait. reply alphazard 6 hours agoparentTypical Scrum apologist who describes how someone else must have screwed up Scrum or Agile. They then claim that pure \"Scrum\" or \"Agile\" has never been implemented anywhere.If only people weren&#x27;t so ignorant, we could give pure Scrum a try and solve all the world&#x27;s problems. reply Tehdasi 5 hours agorootparent> They then claim that pure \"Scrum\" or \"Agile\" has never been implemented anywhere.They are right, however the conclusion that should be drawn from this is that the most likely outcome of your organisations implementation of agile will be equally as poor, and that it should prolly be skipped. reply psunavy03 5 hours agorootparentTypical argument from an engineer arguing from math and not understanding that math does not describe human beings and their social relationships. reply psunavy03 5 hours agorootparentprevThis is like complaining that because the shittiest sports team you follow doesn&#x27;t win that playing that sport well is ipso facto impossible. reply tasubotadas 4 hours agorootparentprevThe guy in the Twitter pretty much mentions every red flag implementing scrum.What did you expect the parent commenter to say? \"you&#x27;ve done well and have shown that scrum doesn&#x27;t work\"? reply idlewords 5 hours agoparentprevThis is a No True Scotsman argument. The guy enumerated a list of ways scrum failed in his experience; it&#x27;s always interesting to hear honestly about failure modes from people who have actually used something a lot in their work. reply psunavy03 5 hours agorootparentIt&#x27;s interesting to hear about failure modes, and anyone whose job it is to teach stuff like this is interested in hearing about failure modes. It&#x27;s the taking of one person&#x27;s experience and extending it to encompass everything that&#x27;s wrong.Obviously the people charged with implementing this in OP&#x27;s company are doing it wrong. That doesn&#x27;t mean it&#x27;s OK to insinuate that everyone who ever tries to implement Scrum or Agile is doing it wrong. For every clueless toxic manager who doesn&#x27;t understand how to use Agile correctly, there&#x27;s an egotistical or lazy dev who also wants to throw what the Brits would call a spanner in the works for purely personal reasons.But to call it a No True Scotsman argument is a lazy rebuttal which won&#x27;t engage with the argument. There are plenty of shitty Agile practitioners, and no one is trying to dispute this. reply zimpenfish 3 hours agorootparent> For every clueless toxic manager who doesn&#x27;t understand how to use Agile correctlyAnecdata Of One: I have worked at many places since 2005 and the most successful projects have been those without any Agile[1]&#x2F;Scrum imposed by management. In contrast, the places with the worst outcomes[2] have all had distinct Agile&#x2F;Scrum imposed by micro-managers[3].[1] Plenty of places with iterative development but solely due to the nature of the work (changes required by external QA, experiments, etc.), not imposed.[2] Software quality and speed of development-wise. They&#x27;re all still alive and limping along despite the horrific nature of their internal systems.[3] Who have always been there in a place with Agile&#x2F;Scrum. Only once in a place without. I don&#x27;t think it&#x27;s coincidental. reply theshrike79 4 hours agorootparentprevThe same thing works the other way. People see and experience shit Scrum and then they No True Scotsman it to mean that all Scrum must be shit.It seems to me that most American software companies use Cargo Cult Scrum. They basically take the terms and maybe read a blog about the processes and just wing it from there.The only way an Agile&#x2F;Scrum process works if you bring in a consulting company that&#x27;s expensive enough to make even the top brass buy into it. You can theoretically try to bring it in from the ground up, but it&#x27;s really hard to",
    "originSummary": [
      "The author of the tweet strongly criticizes Scrum, arguing that it makes software teams ineffective.",
      "Two anecdotes are provided to support the negative opinion, one about using Poker as a planning tool and another about the belief that adding process improves efficiency."
    ],
    "commentSummary": [
      "There is debate surrounding the implementation and effectiveness of Scrum and Agile methodologies in software development teams.",
      "Some individuals find Scrum helpful for team productivity, while others criticize its bureaucratic nature.",
      "Challenges discussed include finding and retaining talented programmers, as well as concerns about workload and pressure within the Scrum framework."
    ],
    "points": 230,
    "commentCount": 201,
    "retryCount": 0,
    "time": 1693191218
  },
  {
    "id": 37283128,
    "title": "Mother is arrested in Bangladesh after son in US criticizes government online",
    "originLink": "https://www.nbcnews.com/news/asian-america/mother-arrested-bangladesh-son-us-criticizes-government-online-rcna101392",
    "originBody": "SKIP TO CONTENT JACKSONVILLE SHOOTING POLITICS U.S. NEWS WORLD BUSINESS HEALTH VIDEO CULTURE & TRENDS NBC NEWS TIPLINE Mother is arrested in Bangladesh after son in the U.S. criticizes government online SHARE & SAVE — MY NEWS MANAGE PROFILE EMAIL PREFERENCES SIGN OUT SIGN IN CREATE YOUR FREE PROFILE SECTIONS U.S. NEWS POLITICS WORLD LOCAL BUSINESS HEALTH INVESTIGATIONS CULTURE & TRENDS SCIENCE SPORTS TECH & MEDIA VIDEO FEATURES PHOTOS WEATHER NBC SELECT DECISION 2024 NBC ASIAN AMERICA NBC BLK NBC LATINO NBC OUT TV TODAY NIGHTLY NEWS MSNBC MEET THE PRESS DATELINE FEATURED NBC NEWS NOW BETTER NIGHTLY FILMS STAY TUNED SPECIAL FEATURES NEWSLETTERS PODCASTS LISTEN NOW MORE FROM NBC CNBC NBC.COM NBCU ACADEMY NBC LEARN PEACOCK NEXT STEPS FOR VETS PARENT TOOLKIT NBC NEWS SITE MAP HELP FOLLOW NBC NEWS ASIAN AMERICA Mother is arrested in Bangladesh after son in the U.S. criticizes government online “As a son, it is very upsetting that, because of your opinion, your mother has been detained,” said Tanzilur Rahman, a doctoral student in Michigan. Tanzilur Rahman with his mother, Anisa Siddika.Courtesy Tanzilur Rahman SAVE Create your free profile or log in to save this article Aug. 25, 2023, 4:00 PM CDT By Brahmjot Kaur A Ph.D. student at Michigan State University said his mother was arrested in Bangladesh after he criticized the country's government in a Facebook post. Tanzilur Rahman, who is pursuing his doctorate in materials science and engineering, said his mother, 58, was arrested by the Bangladesh Police on Sunday. Three days before, he posted his thoughts on the Bangladesh government’s role in the war crime trials of a prominent preacher and leader in the Jamaat-e-Islami party, a major Islamist political party in the country. “As a son, it is very upsetting that, because of your opinion, your mother has been detained. It’s really upsetting,” Rahman told NBC News. Court documents translated by NBC News said that Rahman’s mother, Anisa Siddika, was arrested at 11:40 a.m. at her parents’ home and charged with “planning to sabotage various vital installations, conspiracies, and sabotage against the government in protest against the arrest of multiple leaders and activists of Bangladesh Jamaat-e-Islami.” Rahman said he had hired an attorney to work on the case and obtain these documents. Siddika was charged under the Special Powers Act of 1974 after police said they were patrolling the area based on “secret information” and learned that political leaders and activists were at the home. The documents alleged that Siddika had arranged secret meetings against the government, which Rahman said was a baseless claim. She was denied bail because the police said she would “abscond,” according to the documents. In his Facebook post, Rahman, 30, questioned the 2013 trial and sentencing of Islamic leader Delwar Hossain Sayedee and the disappearance of a key witness for his defense. Sayedee was charged with rape, murder and the persecution of Hindus during the Bangladesh Liberation War in 1971. He died in prison last week, which prompted mass protests, Al Jazeera reported. Rahman believes his Aug. 17 post was the real reason for his mother’s arrest. “I don’t think any people with a logical mind would have arranged that meeting in their elderly parents’ house,” he said. Rahman said it was easy for the police to locate Siddika since his grandparents have lived in their house since 1962 and are well respected in the area. Rahman said his family in Bangladesh only saw Siddika once during her bail hearing on Wednesday and Thursday. “We are kind of hopeless right now,” he said. The Bangladesh Police did not respond to requests for comment. The Bangladesh Embassy and Consulate General of Bangladesh did not respond to request for comment. Rahman’s Facebook post, which gained traction in the Bangladeshi community in and outside the country, criticized enforced disappearances in which the government directly or indirectly kidnaps people and detains them — a common practice in the country. But he said he was surprised that it was used against his mother. Recommended U.S. NEWS Simone Biles wins record 8th U.S. gymnastics title, a decade after her first MAUI WILDFIRES In Lahaina, an impromptu concert offers a moment of joy and release after wildfire “I’m not a famous columnist or not a very known person. So, I did not expect that this would happen to my family,” he said. Experts say the incident speaks to a growing concern about censorship in the country. Ali Riaz, a politics and government professor at Illinois State University, said Siddika’s arrest is part of a larger concern in Bangladesh and the diaspora. For Riaz, the most pressing issue is “the persecution of … families of the diaspora who speak out,” he said. “Someone who is away from Bangladesh, who is an adult, made a comment, whatever that comment is, expressed his opinion. That by no means legally, ethically, morally justified persecuting his family. The government is putting a different story for arresting the student’s mother, but that’s not a justifiable action by any means. And this is not exceptional.” Riaz said he believes the problem is only expected to worsen, especially as the country inches closer to an election in January, a vote that has serious implications for the future of Bangladesh’s democracy, according to the Council on Foreign Relations, a New York-based think tank. “To me, whether he’s supporting a cleric with a checkered past or is controversial — that’s not the point,\" Riaz said of Rahman. \"The point is his freedom of expression. The point is that parents or relatives can be persecuted for the opinions of an adult. “Innocent people are being harassed and persecuted. This single incident pretty much exemplified what is going on in Bangladesh and what is coming as well.” From January 2023 to July, 144 journalists from different media outlets have been tortured, harassed, threatened or sued nationwide, a Bangladesh-based legal aid and human rights organization, Ain o Salish Kendra, found. The human rights group Amnesty International demanded Siddika's released in a statement Wednesday. “Arresting a mother immediately after her son’s social media post criticizing the government is ludicrous and a new low in Bangladesh, where endless reports of arbitrary detention of opposition politicians and activists in the lead up to next year’s general election has created a climate of fear and distrust,” said Nadia Rahman, interim deputy regional director of research for South Asia at Amnesty International. Brahmjot Kaur ABOUT CONTACT HELP CAREERS AD CHOICES PRIVACY POLICY YOUR PRIVACY CHOICES CA NOTICE TERMS OF SERVICE (UPDATED JULY 7, 2023) NBC NEWS SITEMAP CLOSED CAPTIONING ADVERTISE SELECT SHOPPING SELECT PERSONAL FINANCE © 2023 NBC UNIVERSAL",
    "commentLink": "https://news.ycombinator.com/item?id=37283128",
    "commentBody": "Mother is arrested in Bangladesh after son in US criticizes government onlineHacker NewspastloginMother is arrested in Bangladesh after son in US criticizes government online (nbcnews.com) 222 points by belltaco 19 hours ago| hidepastfavorite110 comments shihab 15 hours agoAs a Bangladeshi who came to know this son after coming here in US, perhaps I can provide some context.The original post was about a witness, a Hindu witness, who refused to testify against the Islamist guy (saydee) government is after. His testimony was critical, Sayedee was charged with murdering his brother, but he kept refusing. You know how persuasive our govt can be- he even had to flee to India. But he never changed his position that in this particular case, Sayedee wasn&#x27;t involved. It&#x27;s an interesting post, but not enough to change the negative view an average Bangladeshi liberal have about Sayede.What outraged us was what happened afterwards. The govt was a quite a bit tensed after Sayedee&#x27;s death recently. There was lots of people coming out to praise this guy. Awami league had to sack hundreds of its own party members, particularly from its student wing, for their sympathetic posts. Rahman was unfortunate in that his post became perhaps the most viral one among so many.Many members of the ruling party have been pretty open about the fact that they needed to make an example of out of him. Particularly egregious is the timing of her arrest, and the lazy excuse they came up with- this 60 yr old flail woman was a islamic terrorist planning to overthrow the government. It&#x27;s a charge we&#x27;ve heard so many times over the years- the exactly same words.Actually it&#x27;s a genius charge. They know it&#x27;s going to silence lots of potential western criticism by tying it to Islamic terrorism. And by being so transparently bogus to us, it sends the message govt intended to send all along- shut up or you&#x27;ll be next. reply xbmcuser 18 hours agoprevThis is highlighted in the west depending on where the ruling goverment is with or against the west. Relatives of people abroad and out of reach are targeted. Currently 100s of people in Pakistan are in jail or custody as ransom for their outspoken relatives abroad. reply l3mure 16 hours agoparentSouth Korea and the KCIA is a great example of this, where the KCIA was doing all kinds of wild stuff to maintain a West-approved military dictatorship. And of course the KCIA was created by and modeled after the US CIA.[1]> In July 1973 Kim Dae Jung spoke at [the University of Washington], in a classroom with no more than fifteen people present. A month later he was kidnapped in Tokyo by KCIA agents and nearly murdered. Seven years later when he was indicted for \"treason,\" his criticism of the Park government at the University of Washington was included in the indictment, drawn from a tape of his remarks that one of the fifteen people had given to the KCIA.[2]> In mid-1973, amidst charges of KCIA harassment of Lee Jai-hyun, a Korean Embassy officer who refused to be reassigned to Korea, I took the initiative to meet with the FBI and called for an investigation of the KCIA in the U.S. After exploratory meetings, such an investigation began, but for reasons I have never quite understood, it did not get off the ground. When it finally petered out several months later, it had produced little more than mere confirmation of the basic information I had submitted initially. I concluded that the FBI, or those higher in authority, had no inclination to follow through on an investigation that could wind up embarrassing an ally.[1] - Korea&#x27;s Place in the Sun, p. 372[2] - The Korean CIA in the USA, https:&#x2F;&#x2F;www.cambridge.org&#x2F;core&#x2F;journals&#x2F;worldview&#x2F;article&#x2F;ab... reply whimsicalism 16 hours agorootparentwas an example of that - South Korea was formerly well known as an example of a US supported autocratic regime, but the fact that your examples are all from the 70s is telling and I do not think this is ongoing in SK reply db1234 15 hours agoparentprevThere is a geopolitics angle to this. US has been making noise about upcoming election in Bangladesh being \"free and fair\". US has even announced some visa policy to promote \"democratic elections\" in Bangladesh. US has been pursuing a military base in Bangladesh. The current government has been resisting the pressure. According to a report, India has conveyed to US its concerns about what it perceives as US interference in Bangladesh elections.https:&#x2F;&#x2F;indianexpress.com&#x2F;article&#x2F;world&#x2F;us-announces-banglad...https:&#x2F;&#x2F;www.tbsnews.net&#x2F;bangladesh&#x2F;us-did-not-discuss-taking...https:&#x2F;&#x2F;www.dhakatribune.com&#x2F;bangladesh&#x2F;foreign-affairs&#x2F;3228... reply rhaway84773 12 hours agorootparentThis sounds a lot more like a govt bringing up the US bogeyman like Imran Khan did in Pakistan than the U.S. actually doing anything. reply cpursley 10 hours agorootparentI don’t think you’re properly up to speed on the news:https:&#x2F;&#x2F;theintercept.com&#x2F;2023&#x2F;08&#x2F;09&#x2F;imran-khan-pakistan-cyph... reply zogrodea 17 hours agoparentprevHere is a reference. The Intercept brought to light US pressure to remove Imran Khan as democratically elected Prime Minister recently, and the way the ruling class has responded is unnerving.https:&#x2F;&#x2F;theintercept.com&#x2F;2023&#x2F;08&#x2F;26&#x2F;pakistan-us-citizens-imp... reply whimsicalism 16 hours agoparentprevI think it has more to do with the fact that we expect better from India and Bangladesh, whereas we all know about how Pakistan functions. reply selimthegrim 13 hours agoparentprevWhen they introduced extraterritorial jurisdiction for blasphemy for saying anything positive about Ahmadiyyas where was Pakistan populace complaining then? All this stuff was tried out on them first and no one cared because they were “wajib-ul-qatl”. I wasn’t born in Pak and haven’t even been there in a decade and I could have FIR filed against me for saying something on Facebook without setting foot in Pakistan.Now this routine has been extended to any PTI supporter overseas criticizing what happened to Imran. reply someguy7250 17 hours agoprevMany people living in these countries, know what&#x27;s going on. They silently support the violent levels of censorship because they think our government is just as bad and often hypocritical (even though the US is objectively better in most reasonable cases)IMO, the disagreement between the two political parties doesn&#x27;t just cause domestic polarization, it also delays foreign progress towards democracy. People get jaded internationally from it. I&#x27;m hoping we can either have more parties or just help the two parties make up. reply ziftface 17 hours agoparentTo add to this, funding autocratic governments in these countries with billions in \"aid\" also delays foreign progress towards democracy. reply rayiner 16 hours agorootparentI don’t think that’s necessarily true. Democracy follows economic development, of the other way around. America and European countries all became more democratic after they became rich. Some autocratic governments can hinder economic development. Others, like in China and now Bangladesh, can be pretty competent about it. reply blackoil 15 hours agorootparentYep, we all can see how democratic Saudi has become. reply dirtyid 13 hours agorootparentDemocracy _may_ follow economic development. Economic development (as in move past developing country phase) has essentially never followed early democratic development. Poor autocrats has a chance of becoming rich autocratic or rich democratic societies. Poor democratic societies largely stays poor, with historic consistency bordering on certainty. Best thing developing countries can wish for is competent autocrat and favourable geopolitical conditions. reply JamesBarney 7 hours agorootparentprevDoes it? By economic development do you mean relative to other countries or in absolute terms? The US was pretty democratic way before we were anywhere close to rich my 2023 standards. reply tomohelix 18 hours agoprevThis is why I prefer anonymity for my online activities. You never know when or how your online posts will be used against you. Maybe everything I do now is appropriate and \"moral\" but in 20 years they would not and some nobody would grab those and slander me. You can never be sure.Back to the article, I guess one good thing coming out of this is that the guy can apply for political asylum green card now... reply mongol 15 hours agoparentMakes sense. I can imagine future AI can perform unprecedented detectice work to connect the dots also between anonymous social activity on the internet. reply coding123 16 hours agoparentprevIf you were anonymous your mom wouldn&#x27;t be arrested and no light would come to the situation. It would have been a forgotten comment&#x2F;post. reply k4a8g08 16 hours agoparentprev[deleted] reply seattle_spring 16 hours agorootparentWhat exactly was the comment? Feels like the most important bit of information is being left out. reply pyinstallwoes 16 hours agorootparentprevWhy reply nonethewiser 17 hours agoparentprev> This is why I prefer anonymity for my online activities.Thats funny because this is why I think I’m starting to prefer using my real identity.When you use your real identity you behave in a way that you will stand behind. Anonymity goads you into acting in a way that you might feel embarrassed about or regret. And given that you are a real person posting online, there is always a chance you lose anonymity.It’s complicated though. Anonymity to bypass authoritarianism is obviously good. More ideally speeking, we just have stronger free speech values across society so people don’t feel like they need to hide and discourse, think, etc in secrecy. reply davidguetta 17 hours agorootparent> When you use your real identity you behave in a way that you will stand behind.Whats the point of &#x27;standing behind&#x27; if the consequencz is being arrested and thrown in jail.\"Better be alive than right\" as the saying goes reply SoftTalker 16 hours agorootparent> Whats the point of &#x27;standing behind&#x27; if the consequencz is being arrested and thrown in jail.See the history of nonviolent protest, civil disobedience, US civil rights movement, etc. reply esafak 16 hours agorootparentIt looks like the history of countries with functioning justice systems. How is that strategy working in countries like Russia? reply SoftTalker 16 hours agorootparentHow did it work for these people?https:&#x2F;&#x2F;www.splcenter.org&#x2F;what-we-do&#x2F;civil-rights-memorial&#x2F;c...I didn&#x27;t say it was without risk. reply esafak 15 hours agorootparentNeither did I. I meant to say that such acts have little to no positive effect in dysfunctional systems. After all, every country has activists.Gandhi&#x27;s nonviolent resistance moved the British but did not persuade Hitler, though he tried.Anyway, these are all good things. I don&#x27;t mean to dissuade well-meaning activists. Just pointing out that you need to understand the environment you are operating in instead of blindly emulating others. reply SoftTalker 15 hours agorootparentI think you could say that the US (at least in the South) had a dysfunctional justice system. How many people were beaten or murdered, often by the police, with no consequence or without even a serious investigation? Yet their activism did bring change. reply esafak 15 hours agorootparentI disagree, because the American justice system quickly corrected itself. I think the bar is not having an unblemished record, but being responsive. When the local cops got out of line JFK and LBJ spoke out against it. The DoJ dispatched the feds and created the Civil Rights Division. Some bad cops were not enough to stymie the civil rights movement. Dysfunctional system just don&#x27;t make progress due to corruption, concentration of power, etc. Of course there are ongoing racism issues but I am not sure it indicates a systemic flaw. replylost_tourist 7 hours agorootparentprevthat&#x27;s easy to say when it&#x27;s the US and you&#x27;ll probably stay in jail a month or two at most, as opposed to having a loved one thrown in prison, tortured, and then executed because of some political statements that you made reply gambiting 17 hours agorootparentprev>>When you use your real identity you behave in a way that you will stand behind.5 minutes spent on any Facebook comments thread proves this to be completely false - people are vile, disgusting, racist even when their real names are attached to what they are saying. reply gochi 17 hours agorootparentThat&#x27;s because they stand behind that behaviour. They will face no real consequences for it, because that&#x27;s the norm for them. reply whatshisface 17 hours agorootparentBecause it&#x27;s the norm for their community, which you would also be expected to follow if the necessities of life put you inside it. reply imtringued 16 hours agorootparentprevYeah and that makes the entire concept meaningless. All it does is make it easier to bully people. reply Springtime 16 hours agorootparentprev> When you use your real identity you behave in a way that you will stand behind. Anonymity goads you into acting in a way that you might feel embarrassed about or regret.People use&#x2F;present different &#x27;selves&#x27; to different people all the time, even without using pseudonymous identities. It&#x27;s a core part of navigating life. Online pseudonymous handles help facilitate more separation between contexts but it doesn&#x27;t (necessarily) mean people change their integrity (I certainly don&#x27;t).There&#x27;s a useful critique[1] of Mark Zuckerberg&#x27;s 2010 quote that proclaimed there should only be a single identity for everyone. An excerpt that summarizes the piece:> Individuals are constantly managing and restricting flows of information based on the context they are in, switching between identities and persona. I present myself differently when I’m lecturing in the classroom compared to when I’m have a beer with friends [...] This is how we navigate the multiple and increasingly complex spheres of our lives. It is not that you pretend to be someone that you are not; rather, you turn the volume up on some aspects of your identity, and tone down others, all based on the particular context you find yourself.Also this cross-linked piece[2] by a teacher which brings up similar points.[1] https:&#x2F;&#x2F;michaelzimmer.org&#x2F;2010&#x2F;05&#x2F;14&#x2F;facebooks-zuckerberg-ha...[2] https:&#x2F;&#x2F;crookedtimber.org&#x2F;2010&#x2F;05&#x2F;14&#x2F;an-internet-where-every... reply ctoth 17 hours agorootparentprevAmused to find this posted from a pseudonymous account with a blank profile. reply 40yearoldman 17 hours agorootparentI think we need places of both. There should be places that are facilities anonymous interactions. And others that require a real identity.This allows for more extreme and less politically favorable ideas to be explored in anonymity while providing a public place that moves slower and takes longer for ideas that are less favorable to become more favorable.We should start with congress. All votes yes or no must be attached to a name. No more of this yay or nay bs. reply wombat-man 17 hours agorootparentDon&#x27;t we... track that?https:&#x2F;&#x2F;www.senate.gov&#x2F;legislative&#x2F;LIS&#x2F;roll_call_votes&#x2F;vote1... reply brightlancer 16 hours agorootparentIn the US, many (I think most, now) votes are just voice vote. This makes sense when many votes are simple procedures with overwhelming support.IIRC, any senator can force a roll call on a vote. I think the House has a similar rule but requires a minimum number of House members to support the motion. reply wombat-man 15 hours agorootparentSure, we could log all these votes. But I think most people make their senate voting decisions on different criteria, or at least I do. Like where they stand on issues and how they voted on bills, or legislation they submitted. reply brightlancer 13 hours agorootparentSure. I meant that there&#x27;s no general requirement for bills to get a roll call vote, where each person has to record their vote.And even when Congress has internal rules (not US law) requiring a roll call vote, they can suspend those rules to permit a voice vote. replyDANmode 17 hours agorootparentprev> just have stronger free speech values across society so people don’t feel like they need to hide and discourse, think, etc in secrecy.That&#x27;s a good place to start from, but the individuals in power protecting themselves via censorship etc won&#x27;t be stopped by this. reply wruza 15 hours agorootparentprevFull anonymity is indeed cancer. But pseudonymity and what I call “train seat conversation” are still different from full disclosure. E.g. I’ve discussed many things on trains and on forums that I wouldn’t discuss elsewhere. And it wasn’t any sort of -ism or matginal topic, just something that opens up a little more about you than your official image at some circle does. Another example is my HN account. It is what I call “absolutely normal”, but tbh I’m a little nervous about showing it to someone I know, because it feels like sharing a diary, even if it isn’t one. The idea that you can just scroll through my written thoughts is very uncomfortable (but strangely okay if HN fellas do it). For that reason I avoid logging in or visiting this site like at work or near people I know.I’m not disagreeing, just had something to add, basically unrelated to the context. reply thfuran 16 hours agorootparentprev>When you use your real identity you behave in a way that you will stand behind. Anonymity goads you into acting in a way that you might feel embarrassed about or regret.And I&#x27;m sure he has no regrets regarding his mother&#x27;s arrest. reply throwbadubadu 16 hours agorootparentprevThis has never been a good strategy vs \"evil\" states or in resistance like circumstances, which as the poster said could happen unexpectedly in ways never imagined and quickly. reply lost_tourist 7 hours agorootparentprevIf what you say is the truth then it&#x27;s doesn&#x27;t matter who is saying it; whether it&#x27;s me or The Pope. reply outcoldman 4 hours agoprevAs person who was born with Russian passport and US Citizen, I am in the similar situation. Two of my relatives were questioned about my position about the war in Ukraine, because of my statements on Facebook, LinkedIn and Twitter.It did not go as bad, as my relatives got detained. But unfortunately everything you say online, the government can read and use against you or your family. reply yumraj 16 hours agoprev> In his Facebook post, Rahman, 30, questioned the 2013 trial and sentencing of Islamic leader Delwar Hossain Sayedee and the disappearance of a key witness for his defense. Sayedee was charged with rape, murder and the persecution of Hindus during the Bangladesh Liberation War in 1971.I’m NOT justifying anything, but the story seems an opinion piece, or rather one side, purely based on the guys version. We don’t know why the mom was arrested.Son seems like an Islamist or at least someone who sympathizes with them (see above). So, it is possible that his mother was involved in the protests or at least was arrested for reasons other than simply the son’s post. reply whimsicalism 16 hours agoparentThat seems like a massive leap and the timing unlikely. I am sympathizing with this poster, does that make it likely that my mother is involved in something that should get her arrested in Bangladesh?I have noticed a distinct Hindutva streak on HN. reply yumraj 16 hours agorootparentWe’re all giving someone a benefit of doubt.Many posters, including perhaps yourself, are giving the son & mother a benefit of the doubt. My comment above was about giving the other party an equal benefit of the doubt.In end, no one except the involved parties know the truth. I certainly don’t.Not sure why you’re bringing in hindutva to the discussion. reply JumpCrisscross 16 hours agorootparent> Many posters, including perhaps yourself, are giving the son & mother a benefit of the doubtThis is the basis of fair criminal trials. Also, Bangladesh seems to have a terrible human rights record [1]. So the presumption of innocence for the mother is strengthened absent evidence of a crime (which, in a competent court system, should be public record).[1] https:&#x2F;&#x2F;www.hrw.org&#x2F;world-report&#x2F;2022&#x2F;country-chapters&#x2F;bangl... reply haltingproblem 16 hours agorootparentprevIncredible that pointing out the sympathies of the poster lies with the party responsible for Hindu genocide during the 1971 Bangladesh liberation war makes it Hindutva.Does pointing out that someone&#x27;s sympathies lies with banned pro-Hitler speech calling for the Holocaust in Germany makes one a Zionist?Let&#x27;s leave aside why being a Hindutva or Zionist is wrong. reply snowpid 15 hours agorootparentWhy is it a problem to be a zionist? reply pstuart 15 hours agorootparentSome might say that church and state should not be the same thing. reply zogrodea 15 hours agorootparentSome might have a problem that Palestinians sure being evicted from their homes by colonial settlers from foreign lands. reply snowpid 13 hours agorootparentWhile I am not a fan of the settler movement, their \"new\" homes are mostly very close to their place being born. reply snowpid 13 hours agorootparentprevsure, but being UK is also not perse bad. reply haltingproblem 5 hours agorootparentprevNone. But many people make it out to be a problem to be a Zionist or a Hindutva proponent.Nationalism and pride for me but not for thee. replyalephnerd 18 hours agoprevNot surprised.Bangladeshi politics still has the scars of their Independence War and the subsequent coups as the families leading both the Awami Party (the ruling party) and the Nationalist Party (the current opposition but formerly in power) have been in a violent struggle with each other since the 80s (eg. The current president Sheikh Hasina literally saw her father shot by the General who&#x27;s wife is leading the BNP).This rivalry has been further inflamed by the power struggle between China and India, as the BNP leans closer to China+Pakistan and the BAP leans closer to India. This has incentivized toxic political behavior - check out Nepal for another buffer zone seeing similarly dysfunctional politics.Over the past few years, BNP multiple activists have been shot and arrested, and the party was essentially banned a couple years ago, and the US has starting placing limited sanctions against the BAP, though I doubt they would have much impact as UAE+KSA+India+Thailand+Singapore haven&#x27;t enforced sanctions.Also, from an ideology standpoint (though ideology doesn&#x27;t really matter in Asian politics), BAP was traditionally center-left and Secular leaning while BNP was traditionally center-right and also Islamist leaning because the pro-Pakistan Islamist party Jamaat-e-Islami was banned in 2013 and it&#x27;s activists joined the BNP.The politics of violence was really inflamed from the early 2010s when the founders of the JeI was executed after being found guilty of murders, rapes, and torture of Bangladeshi nationalists and Hindus during the Bangladeshi War of Independence, which then hardened the ideological battle lines. This lead to massive riots in retaliation, which had a direct impact on governance in Bangladesh and even India, as the same ethnicities live across the border.On top of that, the Rohingya refugee crisis has destabilized Eastern Bangladesh as there aren&#x27;t enough jobs or ability to provide aid, causing some Rohingya to turn to the Drug Trade as Myanmar is a major Opium and Meth (ever heard of Yaba in Thailand?) manufacturing region. reply rayiner 18 hours agoparentThis analysis is accurate, but as someone whose family left the country under General Ershad, I think it misses the forest for the trees. Sheikh Hasina&#x27;s government, while repressive, is also extremely popular. Her tack to neoliberalism has been enormously successful for the country, and most Bangladeshis do not want to change course. Her approval rating in multiple polls is 70-80%: https:&#x2F;&#x2F;www.dhakatribune.com&#x2F;opinion&#x2F;op-ed&#x2F;322206&#x2F;why-sheikh.... She has the popular mandate.But in a country with the kind of history Bangladesh has had, minority movements can destabilize the government and overrule the will of the majority. It&#x27;s hard to have free-wheeling political discourse in a country where people don&#x27;t have a long history of democracy and aren&#x27;t above using bombs and assassinations in the political process. (Last time I left the country, I did so under armed guard during a hartal.) Every fledgling democracy in Asia has gone through an authoritarian stage while the country developed and solidified its institutions. Good take from Charlie Munger on this: https:&#x2F;&#x2F;www.tiktok.com&#x2F;t&#x2F;ZT8YND31g&#x2F;. I don&#x27;t think it&#x27;s even limited to Asia. The U.S. Congress passed the Alien and Sedition Acts in 1798.The most important thing, I think, is that America should leave Bangladesh the fuck alone, which it has not been doing: https:&#x2F;&#x2F;foreignpolicy.com&#x2F;2023&#x2F;08&#x2F;03&#x2F;washington-bangladesh-d.... The United States clearly has no idea how to build democracy in the developing world. I&#x27;m scared to see this article in the New York Times, and what it might mean for what the neocons have in store for the country. reply master_crab 17 hours agorootparentWhile I agree that America needs to leave these countries alone, it’s getting a bit tiresome thinking America alone is going to f^%k up Bangladesh.Bangladeshis are perfectly capable of doing that on their own. reply rayiner 17 hours agorootparentYou won’t find anyone who agrees with that more than me, except maybe my mom. My point is simply that the country seems to have found a groove as of late. Any instability could be disastrous at this point. And I just hope America doesn’t fuck it up over Ukraine. reply master_crab 17 hours agorootparentHa, moms. My Arab mother is the same way. I feel your pain.That entire generation is incredibly quick to conspiracy. reply lnxg33k1 17 hours agorootparentprevIf I were you I would have a read to the books of Naomi Klein, in order to understand how deeply US has ruined everything it touched, from killing of political thinkers who were considered subversive, to funding armies and coups, to closing students for decades in wooden boxes of 1m2.I understand people would think that their own population is capable of doing stuff, it&#x27;s not. Having read about the history of US, I&#x27;d say that the world would be a better place without it, and would think twice before letting it off the hook with just some sarcasm, I know US it&#x27;s very good at PR when it comes to funding death around the world, but there are writers who have told us what it actually is reply simonh 17 hours agorootparentprevThe US has no interest in undermining the BAP, do you think they rather the Islamists get in power? Criticising and sanctioning brutal repression, and advocating democratic standards won’t undermine the BAP. As pointed out up thread, they’re very popular anyway.So one reading of the US actions is just to try and push the BAP into cooling down the political temperature, and not exploit their dominant position so much that it incites further violent backlashes. reply seatac76 17 hours agorootparentI agree with you that the US probably doesn’t have an interest in undermining BAP, but cmon now there is ample precedent for US supporting Islamists and other unsavory groups. e.g Afghanistan, Lat Am and in situations like that US interests take precedence over the future of the said state or free and fair elections. reply simonh 15 hours agorootparentThat’s basically arguing that the US has done bad things before, therefore this thing they are doing must be bad. reply rayiner 17 hours agorootparentprevIt’s an error to assume Americans act according to their rational self interest rather than ideological fancy. reply Regnore 15 hours agorootparentIt’s an error to assume that Americans acting in accordance to their rational self interest isn’t their ideological fancy. reply rayiner 14 hours agorootparentThat presupposes that Americans are just catastrophically bad at recognizing what’s in their self interest—because so much of it’s foreign policy is bad for America—which seems like an unreasonable assumption. reply alephnerd 18 hours agorootparentprevThanks for adding this! I didn&#x27;t want to talk about Sheikh Hasina&#x27;s popularity because I&#x27;m not Bangla.> I&#x27;m scared to see this article in the New York Times, and what it might mean for what the neocons have in store for the countryIn all honestly, they can&#x27;t really do much.Bangladesh is pretty insulated because most critical services are provided by Chinese and Indian companies working closely with Bangladeshi companies.Exports aren&#x27;t drastically impacted either as anything Bangladeshi could be re-exported via the UAE, Singapore, or India, should worst come to worst.And most critically, the US is a bit player in the region. They have no bases, local allies, or power projection in that region. reply selimthegrim 7 hours agorootparentSee my comment about the Adani PPA downthread: https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=37286639 reply seatac76 17 hours agorootparentprevI was surprised to see US was in the mix there, any idea what the angle is? That article was really something, good ol democracy delivery lol. Could really be destabilizing as always.Any how I’d like to read more on U.S position, this was new to me. Any recs? reply rayiner 17 hours agorootparentThe US is mad that Bangladesh and India are continuing to work with Russia instead of supporting the US and Ukraine: https:&#x2F;&#x2F;foreignpolicy.com&#x2F;2023&#x2F;01&#x2F;05&#x2F;bangladesh-us-russia-ba.... Bangladesh is doing so because it has close economic ties to Russia and China.This is a continuation of a position that’s been going on since the Bangladesh independence: https:&#x2F;&#x2F;www.indiatimes.com&#x2F;news&#x2F;india&#x2F;when-russia-stunned-us... reply JumpCrisscross 16 hours agorootparent> US is mad that Bangladesh and India are continuing to work with RussiaAt least with India, the response is annoyed, not mad. Washington wants New Delhi to counter Beijing more than it cares about Russia, especially since Putin’s own goals in Ukraine. In a cynical calculation, Indian industry building up—even on Russian oil—is a net gain. (America and India are also fundamentally aligned on a lot of values, both good and bad.)Bangladesh doesn’t have similar military potential, so the calculation is less clear. But given its size, its primary value is in respect of its effrct on India, so the same logic (with a bias towards stability at all costs) ports. reply selimthegrim 13 hours agorootparentIf Bangladesh wants to let itself get ripped off by Adani [1] and doesn’t want to listen to anybody else then better to leave them to it.[1] https:&#x2F;&#x2F;www.aljazeera.com&#x2F;amp&#x2F;economy&#x2F;2023&#x2F;3&#x2F;30&#x2F;bangladesh-i... reply polygamous_bat 17 hours agorootparentprev> Sheikh Hasina&#x27;s government, while repressive, is also extremely popular. Her tack to neoliberalism has been enormously successful for the country, and most Bangladeshis do not want to change course. Her approval rating in multiple polls is 70-80%: https:&#x2F;&#x2F;www.dhakatribune.com&#x2F;opinion&#x2F;op-ed&#x2F;322206&#x2F;why-sheikh.... She has the popular mandate.I don&#x27;t know how connected you are with Bangladeshi politics right now, but poll-hacking through extreme repression is the first trick Sheikh Hasina&#x2F;her party Awami League mastered. I am not surprised to see such a high approval rating, rather, I&#x27;m surprised to see 30% people signal disapproval in an environment with extreme political speech suppression. If you doubt that, read the story we&#x27;re discussing under again. This is a government that&#x27;s been jailing people without trial for their Facebook posts.If you want to know some indication of the true feeling of the people, go check out the Facebook posts of anything related to the ruling party, and check the ratio of \"haha\" reacts to likes or hearts. Generally, that&#x27;s 4:1 in my experience. reply rayiner 16 hours agorootparentThat polling is conducted by US organizations. I have quite a bit of family left in Bangladesh, and my dad is very political (he was a student activist during independence). I don’t think I know anybody who supports the BNP, including folks who are MAGA when it comes to American politics. But I come from Dhaka so maybe I live in a bubble, who knows. reply selimthegrim 13 hours agorootparentMy Bangladeshi immigrant boss (from Dhaka) in Portland a decade ago supported the BNP and was pretty vocal about it and about how pre-1971 Pakistan was a great country.Then again, he also complained about dressing up on Diwali maybe turning his daughter Hindu so IDKEdit: AFAIK (edited because I’m rate-limited for some reason) he did support independence or was at least reconciled to it but was nostalgic for the unified country. reply rayiner 12 hours agorootparentWow. I’ve never met a Bangladeshi that didn’t support independence (though obviously I knew they exist). reply selimthegrim 13 hours agorootparentprevMy BNP supporting boss always used to claim that Chhatra league was not far behind Shibbir in killing people. reply brightlancer 16 hours agorootparentprev> This is a government that&#x27;s been jailing people without trial for their Facebook posts.In this specific case, the woman was likely arrested because of her son&#x27;s post, which is obviously worse.But the rest is common even in so-called \"liberal democracies\": folks are jailed after arrest for months or years before trial, and folks are arrested and jailed for \"hate speech\" and \"causing offense\" via online posts -- or the government just creates a pretext for arrest, but it was really because of the person&#x27;s legal speech.So, yes, Bangladesh is worse, but the Good Guys™ are increasingly authoritarian. The gap isn&#x27;t as large as most folks think. reply whimsicalism 16 hours agorootparentprevI have seen people claiming Western polls are wrong across al sorts of spheres for decades and almost always I find that the person claiming the polls are wrong has some political motive and the polls are later vindicated with a move to free, fair, monitored elections on the same questions.Western polls are pretty accurate. Modi is popular, Hasina is popular, Erdogan is popular, Crimeans in 2014 wanted to join Russia... all of these things are likely true. reply reducesuffering 14 hours agorootparentErdogan is not that popular. The election was very close and went to a runoff. And that&#x27;s after the political speech repression that happens on Twitter and Wikipedia bans. reply29athrowaway 18 hours agoprevNow everyone is going to read the post, and Bangladesh through their actions admitted guilt of everything that&#x27;s in the post. reply AtlasBarfed 18 hours agoparentYet it is a harbinger of total information awareness by any and all authorities in the world. Governments obviously at the national level, but also regional powers, or even local governments (as the saying goes all politics is local) will be able to filter and discriminate against people based on their views.And then, there are the multinational corporations, the ultra elite, leaders like Putin and MBS that will kill someone out of whim, etc.As political institutions degrade, as in they become tools of the rich and influential rather than enforce human and constitutional rights and the fundamental rule of law, the world will become dangerous.Man, I really shouldn&#x27;t be writing this I guess. reply Animats 16 hours agoprevHuh? Article says he criticized the Bangladeshi government. reply shmde 17 hours agoprevThe guy he is in support for is a convicted war criminal[1] who raped hindu women and converted Hindus to Islam during Bangladesh Liberation war.Edit: Added link[1] https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Delwar_Hossain_Sayeedi reply lnxg33k1 17 hours agoparentSo it&#x27;s good to be arrested for an opinion? Is it good that someone else is arrested for his opinion? If an opinion is a crime, would it be possible to ask for extradition? I don&#x27;t see the value of your post, what are you trying to say? reply bluescrn 17 hours agorootparentIf people were actually arrested for &#x27;wrongthink&#x27;, they could at least be given due process and subject to clearly defined penalties.That might be a step up from the mob justice currently doled out to people with bad opinions?It&#x27;s clear that society no longer values freedom of speech, so maybe we should consider formalising the punishment for expressing wrongthink, so at least there&#x27;s rules that can be applied fairly and consistently? reply namaria 15 hours agorootparent\"The mobs are rowdy, let&#x27;s dispense with democratic ideals then\" reply shmde 17 hours agorootparentprevI am pointing to the fact that why the persons mother was arrested. It was because he wrote a post in favour of a convicted war criminal. I have said nothing out of the subject being discussed here. reply computerfriend 17 hours agorootparentThe point is that someone should never be arrested for what their child says. reply mjparrott 18 hours agoprevnext [6 more] [flagged] robswc 17 hours agoparentTrue. It&#x27;s a balancing act but often times goes way too far and hurts innocent people. One of the most memorable examples:https:&#x2F;&#x2F;www.nbcsandiego.com&#x2F;news&#x2F;local&#x2F;sdge-worker-fired-ove...I don&#x27;t think companies have to employ (or keep people employed) that harbor abhorrent views... problem is the \"witch hunt\" types that will make it their mission to get you fired over nothing. reply ffhhttt 17 hours agoparentprevYou have to say&#x2F;do something extremely egregious for your parents to be affected in the same way. reply pc86 17 hours agorootparentUnless your parents are doing the same thing it just won&#x27;t happen in the US, officially or unofficially. reply dragonwriter 17 hours agorootparent> Unless your parents are doing the same thing it just won’t happen in the US, officially or unofficially.While it probably won’t extend to firing, people experience significant social consequence for behavior of family members in the US (the exception seems to be “not if you aren’t also doing the same thing your family member is targeted for” but “not if you fully join in the imposition of social consequences on your family member”.) reply pc86 13 hours agorootparentDo you have any examples of parents bearing burdensome official or unofficial consequences of something their child did where they weren&#x27;t doing the same thing themselves? replyrayiner 18 hours agoprev [12 more] [flagged] catlover76 18 hours agoparent [–] I don&#x27;t think the Pakistan Army needs \"help\" getting prime ministers out of office. reply oa335 18 hours agorootparentIt&#x27;s not that they need \"help\", it&#x27;s that the Americans dangled incentives for them. Read the intercept article. reply rayiner 16 hours agorootparentprev [–] They don’t, but they also have no reason to depose a popular guy who doesn’t step out of his lane—unless the US tells them to. reply reducesuffering 14 hours agorootparent [–] From your article:&#x27;Lu then bluntly raises the issue of a no-confidence vote: “I think if the no-confidence vote against the Prime Minister succeeds, all will be forgiven in Washington because the Russia visit is being looked at as a decision by the Prime Minister,” Lu said, according to the document. “Otherwise,” he continued, “I think it will be tough going ahead.”Lu warned that if the situation wasn’t resolved, Pakistan would be marginalized by its Western allies. “I cannot tell how this will be seen by Europe but I suspect their reaction will be similar,” Lu said, adding that Khan could face “isolation” by Europe and the U.S. should he remain in office.Asked about quotes from Lu in the Pakistani cable, State Department spokesperson Matthew Miller said, “Nothing in these purported comments shows the United States taking a position on who the leader of Pakistan should be.” Miller said he would not comment on private diplomatic discussions.&#x27;Yes, I think it&#x27;s wholly justified for the American people and their politicians to go \"Wow, you guys want to support Russia in this blatantly murderous invasion? Well our people don&#x27;t look too kindly on that and our relations are going to deteriorate. We do understand this is because of Khan, so if Khan isn&#x27;t leading the country, it&#x27;s more acceptable.\"It&#x27;s not regime-change for me to tell another country that their leadership concerns me, I do not support that leadership, and that I would like to trade and make less deals with you. We treat terrible governments like Putin&#x27;s Russia or The Third Reich the same. reply rayiner 13 hours agorootparent [–] Even the mafia’s threats are less direct than what the US said here. “I think if the vote of no confidence against the Prime Minister succeeds, all will be forgiven in Washington.” And remember that was communicated to the military, which has long interferes with the democratic process in that country, with America’s support.The fact that you’re willing to condone it just because hating Putin is “the current thing” is wild to me. reply catlover76 12 hours agorootparentIt&#x27;s pretty morally dense (to put it politely) to view \"hating Putin\" as merely \"the current thing\".Also, re your initial reply to my comment: it&#x27;s not like Pakistan had a fully-functioning democratic government and suddenly the Army staged a coup because of American pressure. For many decades now, any civilian leader in Pakistan has occupied the position only so long as the Army at least tolerates them. The military in Pakistan has a range of interests, and it only wants to strengthen ties with the US insofar as it feels that suits its purposes and those of the country more broadly. The Army should not be absolved of its responsibility here, and the US doesn&#x27;t deserve scorn for pursuing its interests abroad through this kind of strong arm diplomacy. The moral approbation should be saved for things like drone strikes. reply rayiner 12 hours agorootparent> It&#x27;s pretty morally dense (to put it politely) to view \"hating Putin\" as merely \"the current thing\".It is, and is the result of politics around Trump. A decade ago the idea was a punchline. In 2012, Obama zinged Romney for having a “1980s foreign policy” for saying Russia was a threat. Did that change in 2014 after Russia annexed Crimea? Nope, it was still a punchline: https:&#x2F;&#x2F;www.washingtonpost.com&#x2F;news&#x2F;fact-checker&#x2F;wp&#x2F;2014&#x2F;03&#x2F;....Why do we suddenly care about Putin now, when China is still brutally occupying Tibet and rounding up Muslims in camps? Hint: it’s not because anyone can find Ukraine on a map. reply catlover76 7 hours agorootparentI think it&#x27;s fair to say Obama was wrong and Romney was right. That&#x27;s the conclusion I thought everyone drew. This framing of like \"people didn&#x27;t care about it then, so they are somehow wrong or disingenuous to care about it now\" is bizarre and unwarranted to me. And yes, the fact that Russia put some real effort into messing with an American election is a factor in people&#x27;s perception of the threat the country poses--as it should be. Ultimately though, the fact is that Russia invaded a country and is killing innocent civilians and animals.> Why do we suddenly care about Putin now, when China is still brutally occupying Tibet and rounding up Muslims in camps? Hint: it’s not because anyone can find Ukraine on a map.You can&#x27;t care about both? I can. News cycles might not, and yes, I think it&#x27;s largely because Ukrainians are White (at least nowadays) and Tibetans and Uighurs are Asian (on top of which the latter are Muslim). Not to mention the economic reliance on China, which I would say, btw, is a greater threat than Russia for sure.But this notion that unless people are somehow dedicating the same mental and emotional effort to all oppressed and persecuted people then they shouldn&#x27;t be devoting such energy to any such people is morally unsound and unrealistic.But believe me, I think there is a lot of hypocrisy and moral depravity re: Uighurs. You see a lot of random Russians abroad cancelled at events and such as if they are pro-Putin stooges, while Netflix happily produces films based on books by a Chinese author who publicly defends the genocide. reply reducesuffering 7 hours agorootparentprev> Did that change in 2014 after Russia annexed Crimea? NopeCompletely ignorant of recent history. The US started sanctions on Russia because of that.[0] That was the resounding turn of relations with Russia, for good reason. The bellwether was what they did to Magnitsky, and thus the US Magnitsky Act, in 2012.[1]And like the other poster:> It&#x27;s pretty morally dense (to put it politely) to view \"hating Putin\" as merely \"the current thing\".Yes, morally dense is a very polite way to put your view. Every day, for the past year and a half, Russia has tried to march further and further into Ukrainian territory, in order to annex it, shelling and shooting humans who stand in their way, as they take more land and cities. It is reprehensible to support that, far far more than condoning a diplomat saying they disapprove of Pakistani leadership. Lawyers really do have a reputation as a shite ethical bunch, eh?[0]https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;International_sanctions_during...[1]https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Magnitsky_Act reply selimthegrim 13 hours agorootparentprev [–] At the end of the day people sitting in Pakistan took the final decision. This wasn’t the CIA going in there with guns.If the position on Ukraine was an inter-agency consultation, all these guys need their heads checked if they were going to throw under the bus a country that sold them tanks and supported them on Kashmir (and there’s not exactly a line of those countries out the door) reply rayiner 12 hours agorootparent [–] The CIA rarely goes anywhere with guns. And this is way worse than drone strikes. Drone strikes kill some people, often terrorists. At least the US has a material self-interest in killing terrorists. Meddling with the internal affairs of a country with 241 million people has much greater consequences. reply GuidelinesFAQListsAPISecurityLegalApply to YCContact Search:",
    "originSummary": [
      "A mother in Bangladesh has been arrested due to her son's Facebook post criticizing the government.",
      "The son, a Ph.D. student in the U.S., expressed frustration over his mother's detention, which he believes was a result of his post.",
      "This incident raises concerns about censorship and persecution of people in the Bangladeshi diaspora who speak out against the government."
    ],
    "commentSummary": [
      "A mother in Bangladesh was arrested because her son criticized the government online.",
      "The issue of arresting individuals for online criticism is not limited to Bangladesh and may have geopolitical implications.",
      "The conversation explores topics such as online anonymity, nonviolent resistance, and the political situation in Bangladesh."
    ],
    "points": 222,
    "commentCount": 110,
    "retryCount": 0,
    "time": 1693146922
  }
]
